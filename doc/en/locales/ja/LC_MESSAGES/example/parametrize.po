# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, holger krekel and pytest-dev team
# This file is distributed under the same license as the pytest package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pytest 0.1.dev16209\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-05 00:52+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../example/parametrize.rst:5
msgid "Parametrizing tests"
msgstr ""

#: ../../example/parametrize.rst:7
msgid "``pytest`` allows to easily parametrize test functions. For basic docs, see :ref:`parametrize-basics`."
msgstr ""

#: ../../example/parametrize.rst:10
msgid "In the following we provide some examples using the builtin mechanisms."
msgstr ""

#: ../../example/parametrize.rst:14
msgid "Generating parameters combinations, depending on command line"
msgstr ""

#: ../../example/parametrize.rst:18
msgid "Let's say we want to execute a test with different computation parameters and the parameter range shall be determined by a command line argument.  Let's first write a simple (do-nothing) computation test:"
msgstr ""

#: ../../example/parametrize.rst:30
msgid "Now we add a test configuration like this:"
msgstr ""

#: ../../example/parametrize.rst:49
msgid "This means that we only run 2 tests if we do not pass ``--all``:"
msgstr ""

#: ../../example/parametrize.rst:57
msgid "We run only two computations, so we see two dots. let's run the full monty:"
msgstr ""

#: ../../example/parametrize.rst:78
msgid "As expected when running the full range of ``param1`` values we'll get an error on the last one."
msgstr ""

#: ../../example/parametrize.rst:83
msgid "Different options for test IDs"
msgstr ""

#: ../../example/parametrize.rst:85
msgid "pytest will build a string that is the test ID for each set of values in a parametrized test. These IDs can be used with ``-k`` to select specific cases to run, and they will also identify the specific case when one is failing. Running pytest with ``--collect-only`` will show the generated IDs."
msgstr ""

#: ../../example/parametrize.rst:90
msgid "Numbers, strings, booleans and None will have their usual string representation used in the test ID. For other objects, pytest will make a string based on the argument name:"
msgstr ""

#: ../../example/parametrize.rst:147
msgid "In ``test_timedistance_v0``, we let pytest generate the test IDs."
msgstr ""

#: ../../example/parametrize.rst:149
msgid "In ``test_timedistance_v1``, we specified ``ids`` as a list of strings which were used as the test IDs. These are succinct, but can be a pain to maintain."
msgstr ""

#: ../../example/parametrize.rst:152
msgid "In ``test_timedistance_v2``, we specified ``ids`` as a function that can generate a string representation to make part of the test ID. So our ``datetime`` values use the label generated by ``idfn``, but because we didn't generate a label for ``timedelta`` objects, they are still using the default pytest representation:"
msgstr ""

#: ../../example/parametrize.rst:178
msgid "In ``test_timedistance_v3``, we used ``pytest.param`` to specify the test IDs together with the actual data, instead of listing them separately."
msgstr ""

#: ../../example/parametrize.rst:182
msgid "A quick port of \"testscenarios\""
msgstr ""

#: ../../example/parametrize.rst:184
msgid "Here is a quick port to run tests configured with :pypi:`testscenarios`, an add-on from Robert Collins for the standard unittest framework. We only have to work a bit to construct the correct arguments for pytest's :py:func:`Metafunc.parametrize <pytest.Metafunc.parametrize>`:"
msgstr ""

#: ../../example/parametrize.rst:218
msgid "this is a fully self-contained example which you can run with:"
msgstr ""

#: ../../example/parametrize.rst:232
msgid "If you just collect tests you'll also nicely see 'advanced' and 'basic' as variants for the test function:"
msgstr ""

#: ../../example/parametrize.rst:252
msgid "Note that we told ``metafunc.parametrize()`` that your scenario values should be considered class-scoped.  With pytest-2.3 this leads to a resource-based ordering."
msgstr ""

#: ../../example/parametrize.rst:257
msgid "Deferring the setup of parametrized resources"
msgstr ""

#: ../../example/parametrize.rst:261
msgid "The parametrization of test functions happens at collection time.  It is a good idea to setup expensive resources like DB connections or subprocess only when the actual test is run. Here is a simple example how you can achieve that. This test requires a ``db`` object fixture:"
msgstr ""

#: ../../example/parametrize.rst:279
msgid "We can now add a test configuration that generates two invocations of the ``test_db_initialized`` function and also implements a factory that creates a database object for the actual test invocations:"
msgstr ""

#: ../../example/parametrize.rst:311
msgid "Let's first see how it looks like at collection time:"
msgstr ""

#: ../../example/parametrize.rst:328
msgid "And then when we run the test:"
msgstr ""

#: ../../example/parametrize.rst:350
msgid "The first invocation with ``db == \"DB1\"`` passed while the second with ``db == \"DB2\"`` failed.  Our ``db`` fixture function has instantiated each of the DB values during the setup phase while the ``pytest_generate_tests`` generated two according calls to the ``test_db_initialized`` during the collection phase."
msgstr ""

#: ../../example/parametrize.rst:353
msgid "Indirect parametrization"
msgstr ""

#: ../../example/parametrize.rst:355
msgid "Using the ``indirect=True`` parameter when parametrizing a test allows to parametrize a test with a fixture receiving the values before passing them to a test:"
msgstr ""

#: ../../example/parametrize.rst:373
msgid "This can be used, for example, to do more expensive setup at test run time in the fixture, rather than having to run those setup steps at collection time."
msgstr ""

#: ../../example/parametrize.rst:379
msgid "Apply indirect on particular arguments"
msgstr ""

#: ../../example/parametrize.rst:381
msgid "Very often parametrization uses more than one argument name. There is opportunity to apply ``indirect`` parameter on particular arguments. It can be done by passing list or tuple of arguments' names to ``indirect``. In the example below there is a function ``test_indirect`` which uses two fixtures: ``x`` and ``y``. Here we give to indirect the list, which contains the name of the fixture ``x``. The indirect parameter will be applied to this argument only, and the value ``a`` will be passed to respective fixture function:"
msgstr ""

#: ../../example/parametrize.rst:410
msgid "The result of this test will be successful:"
msgstr ""

#: ../../example/parametrize.rst:428
msgid "Parametrizing test methods through per-class configuration"
msgstr ""

#: ../../example/parametrize.rst:433
msgid "Here is an example ``pytest_generate_tests`` function implementing a parametrization scheme similar to Michael Foord's `unittest parametrizer`_ but in a lot less code:"
msgstr ""

#: ../../example/parametrize.rst:466
msgid "Our test generator looks up a class-level definition which specifies which argument sets to use for each test function.  Let's run it:"
msgstr ""

#: ../../example/parametrize.rst:488
msgid "Parametrization with multiple fixtures"
msgstr ""

#: ../../example/parametrize.rst:490
msgid "Here is a stripped down real-life example of using parametrized testing for testing serialization of objects between different python interpreters.  We define a ``test_basic_objects`` function which is to be run with different sets of arguments for its three arguments:"
msgstr ""

#: ../../example/parametrize.rst:495
msgid "``python1``: first python interpreter, run to pickle-dump an object to a file"
msgstr ""

#: ../../example/parametrize.rst:496
msgid "``python2``: second interpreter, run to pickle-load an object from a file"
msgstr ""

#: ../../example/parametrize.rst:497
msgid "``obj``: object to be dumped/loaded"
msgstr ""

#: ../../example/parametrize.rst:501
msgid "Running it results in some skips if we don't have all the python interpreters installed and otherwise runs all combinations (3 interpreters times 3 interpreters times 3 objects to serialize/deserialize):"
msgstr ""

#: ../../example/parametrize.rst:513
msgid "Parametrization of optional implementations/imports"
msgstr ""

#: ../../example/parametrize.rst:515
msgid "If you want to compare the outcomes of several implementations of a given API, you can write test functions that receive the already imported implementations and get skipped in case the implementation is not importable/available.  Let's say we have a \"base\" implementation and the other (possibly optimized ones) need to provide similar results:"
msgstr ""

#: ../../example/parametrize.rst:537
msgid "And then a base implementation of a simple function:"
msgstr ""

#: ../../example/parametrize.rst:545
msgid "And an optimized version:"
msgstr ""

#: ../../example/parametrize.rst:553
msgid "And finally a little test module:"
msgstr ""

#: ../../example/parametrize.rst:564
msgid "If you run this with reporting for skips enabled:"
msgstr ""

#: ../../example/parametrize.rst:580
msgid "You'll see that we don't have an ``opt2`` module and thus the second test run of our ``test_func1`` was skipped.  A few notes:"
msgstr ""

#: ../../example/parametrize.rst:583
msgid "the fixture functions in the ``conftest.py`` file are \"session-scoped\" because we don't need to import more than once"
msgstr ""

#: ../../example/parametrize.rst:586
msgid "if you have multiple test functions and a skipped import, you will see the ``[1]`` count increasing in the report"
msgstr ""

#: ../../example/parametrize.rst:589
msgid "you can put :ref:`@pytest.mark.parametrize <@pytest.mark.parametrize>` style parametrization on the test functions to parametrize input/output values as well."
msgstr ""

#: ../../example/parametrize.rst:595
msgid "Set marks or test ID for individual parametrized test"
msgstr ""

#: ../../example/parametrize.rst:597
msgid "Use ``pytest.param`` to apply marks or set test ID to individual parametrized test. For example:"
msgstr ""

#: ../../example/parametrize.rst:620
msgid "In this example, we have 4 parametrized tests. Except for the first test, we mark the rest three parametrized tests with the custom marker ``basic``, and for the fourth test we also use the built-in mark ``xfail`` to indicate this test is expected to fail. For explicitness, we set test ids for some tests."
msgstr ""

#: ../../example/parametrize.rst:625
msgid "Then run ``pytest`` with verbose mode and with only the ``basic`` marker:"
msgstr ""

#: ../../example/parametrize.rst:642
msgid "As the result:"
msgstr ""

#: ../../example/parametrize.rst:644
msgid "Four tests were collected"
msgstr ""

#: ../../example/parametrize.rst:645
msgid "One test was deselected because it doesn't have the ``basic`` mark."
msgstr ""

#: ../../example/parametrize.rst:646
msgid "Three tests with the ``basic`` mark was selected."
msgstr ""

#: ../../example/parametrize.rst:647
msgid "The test ``test_eval[1+7-8]`` passed, but the name is autogenerated and confusing."
msgstr ""

#: ../../example/parametrize.rst:648
msgid "The test ``test_eval[basic_2+4]`` passed."
msgstr ""

#: ../../example/parametrize.rst:649
msgid "The test ``test_eval[basic_6*9]`` was expected to fail and did fail."
msgstr ""

#: ../../example/parametrize.rst:654
msgid "Parametrizing conditional raising"
msgstr ""

#: ../../example/parametrize.rst:656
msgid "Use :func:`pytest.raises` with the :ref:`pytest.mark.parametrize ref` decorator to write parametrized tests in which some tests raise exceptions and others do not."
msgstr ""

#: ../../example/parametrize.rst:660
msgid "``contextlib.nullcontext`` can be used to test cases that are not expected to raise exceptions but that should result in some value. The value is given as the ``enter_result`` parameter, which will be available as the ``with`` statement’s target (``e`` in the example below)."
msgstr ""

#: ../../example/parametrize.rst:665
msgid "For example:"
msgstr ""

#: ../../example/parametrize.rst:688
msgid "In the example above, the first three test cases should run without any exceptions, while the fourth should raise a ``ZeroDivisionError`` exception, which is expected by pytest."
msgstr ""

