# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, holger krekel and pytest-dev team
# This file is distributed under the same license as the pytest package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pytest 0.1.dev16209\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-05 00:52+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../reference/reference.rst:6
msgid "API Reference"
msgstr "API リファレンス"

#: ../../reference/reference.rst:8
msgid "This page contains the full reference to pytest's API."
msgstr "このページには pytest の API に関する完全なリファレンスが含まれています。"

#: ../../reference/reference.rst:12
msgid "Constants"
msgstr "定数"

#: ../../reference/reference.rst:15
msgid "pytest.__version__"
msgstr "pytest.__version__"

#: ../../reference/reference.rst:17
msgid "The current pytest version, as a string::"
msgstr "現在の pytest のバージョンを文字列として::"

#: ../../reference/reference.rst:27
msgid "pytest.version_tuple"
msgstr "pytest.version_tuple"

#: ../../reference/reference.rst:31
msgid "The current pytest version, as a tuple::"
msgstr "現在の pytest のバージョンをタプルとして::"

#: ../../reference/reference.rst:37
msgid "For pre-releases, the last component will be a string with the prerelease version::"
msgstr "プレリリースの場合、最後の要素はプレリリースバージョンの文字列になります::"

#: ../../reference/reference.rst:45
msgid "Functions"
msgstr "関数"

#: ../../reference/reference.rst:48
msgid "pytest.approx"
msgstr "pytest.approx"

#: _pytest.python_api.approx:1 of
msgid "Assert that two numbers (or two ordered sequences of numbers) are equal to each other within some tolerance."
msgstr "2 つの数値 (または順序付けられた数値のシーケンス) がある許容範囲内で互いに等しいことをアサートします。"

#: _pytest.python_api.approx:4 of
msgid "Due to the :doc:`python:tutorial/floatingpoint`, numbers that we would intuitively expect to be equal are not always so::"
msgstr ":doc:`python:tutorial/floatingpoint` により、直感的に等しいと期待される数値が常にそうであるとは限りません::"

#: _pytest.python_api.approx:10 of
msgid "This problem is commonly encountered when writing tests, e.g. when making sure that floating-point values are what you expect them to be.  One way to deal with this problem is to assert that two floating-point numbers are equal to within some appropriate tolerance::"
msgstr "この問題はテストを書くときによく遭遇します。 例えば、浮動小数点値が期待通りであることを確認する場合です。 この問題に対処する方法の一つは、2 つの浮動小数点数が適切な許容範囲内で等しいことをアサートすることです::"

#: _pytest.python_api.approx:18 of
msgid "However, comparisons like this are tedious to write and difficult to understand.  Furthermore, absolute comparisons like the one above are usually discouraged because there's no tolerance that works well for all situations.  ``1e-6`` is good for numbers around ``1``, but too small for very big numbers and too big for very small ones.  It's better to express the tolerance as a fraction of the expected value, but relative comparisons like that are even more difficult to write correctly and concisely."
msgstr "しかし、このような比較は書くのが面倒で理解しにくいです。 さらに、上記のような絶対比較は通常推奨されません。 なぜなら、すべての状況にうまく適用できる許容範囲がないからです。 ``1e-6`` は ``1`` の周りの数値には良いですが、非常に大きな数値には小さすぎ、非常に小さな数値には大きすぎます。 許容範囲を期待値の分数として表現する方が良いですが、そのような相対比較は正確かつ簡潔に書くのがさらに難しいです。"

#: _pytest.python_api.approx:26 of
msgid "The ``approx`` class performs floating-point comparisons using a syntax that's as intuitive as possible::"
msgstr "``approx`` クラスは、できるだけ直感的な構文を使用して浮動小数点の比較を行います::"

#: _pytest.python_api.approx:33 of
msgid "The same syntax also works for ordered sequences of numbers::"
msgstr "同じ構文は、順序付けられた数値のシーケンスにも適用されます::"

#: _pytest.python_api.approx:38 of
msgid "``numpy`` arrays::"
msgstr "``numpy`` 配列::"

#: _pytest.python_api.approx:44 of
msgid "And for a ``numpy`` array against a scalar::"
msgstr "そして、スカラーに対する ``numpy`` 配列::"

#: _pytest.python_api.approx:50 of
msgid "Only ordered sequences are supported, because ``approx`` needs to infer the relative position of the sequences without ambiguity. This means ``sets`` and other unordered sequences are not supported."
msgstr "``approx`` はシーケンスの相対位置を曖昧さなく推測する必要があるため、順序付けられたシーケンスのみがサポートされます。 これは、``sets`` や他の順序付けられていないシーケンスはサポートされないことを意味します。"

#: _pytest.python_api.approx:54 of
msgid "Finally, dictionary *values* can also be compared::"
msgstr "最後に、辞書の *値* も比較できます::"

#: _pytest.python_api.approx:59 of
msgid "The comparison will be true if both mappings have the same keys and their respective values match the expected tolerances."
msgstr "両方のマッピングが同じキーを持ち、それぞれの値が期待される許容範囲に一致する場合、比較は真となります。"

#: _pytest.python_api.approx:62 of
msgid "**Tolerances**"
msgstr "**許容範囲**"

#: _pytest.python_api.approx:64 of
msgid "By default, ``approx`` considers numbers within a relative tolerance of ``1e-6`` (i.e. one part in a million) of its expected value to be equal. This treatment would lead to surprising results if the expected value was ``0.0``, because nothing but ``0.0`` itself is relatively close to ``0.0``. To handle this case less surprisingly, ``approx`` also considers numbers within an absolute tolerance of ``1e-12`` of its expected value to be equal.  Infinity and NaN are special cases.  Infinity is only considered equal to itself, regardless of the relative tolerance.  NaN is not considered equal to anything by default, but you can make it be equal to itself by setting the ``nan_ok`` argument to True.  (This is meant to facilitate comparing arrays that use NaN to mean \"no data\".)"
msgstr "デフォルトでは、``approx`` は期待値の ``1e-6`` (すなわち百万分の一) の相対許容範囲内の数値を等しいと見なします。 この処理は、期待値が ``0.0`` の場合に驚くべき結果をもたらします。 なぜなら、``0.0`` 自体以外は ``0.0`` に相対的に近いものはないからです。 このケースを驚かせないように処理するために、``approx`` は期待値の ``1e-12`` の絶対許容範囲内の数値も等しいと見なします。 無限大と NaN は特別なケースです。 無限大は相対許容範囲に関係なく、それ自体としか等しく見なされません。 NaN はデフォルトでは何とも等しく見なされませんが、``nan_ok`` 引数を True に設定することでそれ自体と等しく見なすことができます。 (これは、NaN を「データなし」を意味するために使用する配列を比較するのを容易にすることを目的としています。)"

#: _pytest.python_api.approx:76 of
msgid "Both the relative and absolute tolerances can be changed by passing arguments to the ``approx`` constructor::"
msgstr "相対許容範囲と絶対許容範囲の両方は、``approx`` コンストラクタに引数を渡すことで変更できます::"

#: _pytest.python_api.approx:86 of
msgid "If you specify ``abs`` but not ``rel``, the comparison will not consider the relative tolerance at all.  In other words, two numbers that are within the default relative tolerance of ``1e-6`` will still be considered unequal if they exceed the specified absolute tolerance.  If you specify both ``abs`` and ``rel``, the numbers will be considered equal if either tolerance is met::"
msgstr "``abs`` を指定して ``rel`` を指定しない場合、比較は相対許容範囲を全く考慮しません。 言い換えれば、デフォルトの相対許容範囲 ``1e-6`` 内にある 2 つの数値は、指定された絶対許容範囲を超える場合、依然として等しくないと見なされます。 ``abs`` と ``rel`` の両方を指定した場合、いずれかの許容範囲が満たされれば数値は等しいと見なされます::"

#: _pytest.python_api.approx:100 of
msgid "You can also use ``approx`` to compare nonnumeric types, or dicts and sequences containing nonnumeric types, in which case it falls back to strict equality. This can be useful for comparing dicts and sequences that can contain optional values::"
msgstr "``approx`` を使用して非数値型、または非数値型を含む辞書やシーケンスを比較することもできます。 その場合、厳密な等価性に戻ります。 これは、オプションの値を含む可能性のある辞書やシーケンスを比較するのに役立ちます::"

#: _pytest.python_api.approx:112 of
msgid "If you're thinking about using ``approx``, then you might want to know how it compares to other good ways of comparing floating-point numbers.  All of these algorithms are based on relative and absolute tolerances and should agree for the most part, but they do have meaningful differences:"
msgstr "``approx`` を使用することを考えている場合、浮動小数点数を比較する他の良い方法とどのように比較されるかを知りたいかもしれません。 これらのアルゴリズムはすべて相対許容範囲と絶対許容範囲に基づいており、ほとんどの場合一致するはずですが、意味のある違いがあります:"

#: _pytest.python_api.approx:117 of
msgid "``math.isclose(a, b, rel_tol=1e-9, abs_tol=0.0)``:  True if the relative tolerance is met w.r.t. either ``a`` or ``b`` or if the absolute tolerance is met.  Because the relative tolerance is calculated w.r.t. both ``a`` and ``b``, this test is symmetric (i.e.  neither ``a`` nor ``b`` is a \"reference value\").  You have to specify an absolute tolerance if you want to compare to ``0.0`` because there is no tolerance by default.  More information: :py:func:`math.isclose`."
msgstr "``math.isclose(a, b, rel_tol=1e-9, abs_tol=0.0)``: 相対許容範囲が ``a`` または ``b`` のいずれかに対して満たされるか、絶対許容範囲が満たされる場合に True です。 相対許容範囲は ``a`` と ``b`` の両方に対して計算されるため、このテストは対称的です (つまり、``a`` も ``b`` も「基準値」ではありません)。 ``0.0`` と比較する場合は、絶対許容範囲を指定する必要があります。 デフォルトでは許容範囲がないためです。 詳細情報: :py:func:`math.isclose`."

#: _pytest.python_api.approx:125 of
msgid "``numpy.isclose(a, b, rtol=1e-5, atol=1e-8)``: True if the difference between ``a`` and ``b`` is less that the sum of the relative tolerance w.r.t. ``b`` and the absolute tolerance.  Because the relative tolerance is only calculated w.r.t. ``b``, this test is asymmetric and you can think of ``b`` as the reference value.  Support for comparing sequences is provided by :py:func:`numpy.allclose`.  More information: :std:doc:`numpy:reference/generated/numpy.isclose`."
msgstr "``numpy.isclose(a, b, rtol=1e-5, atol=1e-8)``: ``a`` と ``b`` の差が ``b`` に対する相対許容範囲と絶対許容範囲の合計より小さい場合に True です。 相対許容範囲は ``b`` に対してのみ計算されるため、このテストは非対称であり、``b`` を基準値と見なすことができます。 シーケンスの比較のサポートは :py:func:`numpy.allclose` によって提供されます。 詳細情報: :std:doc:`numpy:reference/generated/numpy.isclose`."

#: _pytest.python_api.approx:133 of
msgid "``unittest.TestCase.assertAlmostEqual(a, b)``: True if ``a`` and ``b`` are within an absolute tolerance of ``1e-7``.  No relative tolerance is considered , so this function is not appropriate for very large or very small numbers.  Also, it's only available in subclasses of ``unittest.TestCase`` and it's ugly because it doesn't follow PEP8.  More information: :py:meth:`unittest.TestCase.assertAlmostEqual`."
msgstr "``unittest.TestCase.assertAlmostEqual(a, b)``: ``a`` と ``b`` が絶対許容範囲 ``1e-7`` 内にある場合に True です。 相対許容範囲は考慮されないため、この関数は非常に大きな数値や非常に小さな数値には適していません。 また、``unittest.TestCase`` のサブクラスでのみ利用可能であり、PEP8 に従っていないため見た目が悪いです。 詳細情報: :py:meth:`unittest.TestCase.assertAlmostEqual`."

#: _pytest.python_api.approx:140 of
msgid "``a == pytest.approx(b, rel=1e-6, abs=1e-12)``: True if the relative tolerance is met w.r.t. ``b`` or if the absolute tolerance is met. Because the relative tolerance is only calculated w.r.t. ``b``, this test is asymmetric and you can think of ``b`` as the reference value.  In the special case that you explicitly specify an absolute tolerance but not a relative tolerance, only the absolute tolerance is considered."
msgstr "``a == pytest.approx(b, rel=1e-6, abs=1e-12)``: 相対許容範囲が ``b`` に対して満たされるか、絶対許容範囲が満たされる場合に True です。 相対許容範囲は ``b`` に対してのみ計算されるため、このテストは非対称であり、``b`` を基準値と見なすことができます。 絶対許容範囲を明示的に指定し、相対許容範囲を指定しない特別な場合には、絶対許容範囲のみが考慮されます。"

#: _pytest.python_api.approx:149 of
msgid "``approx`` can handle numpy arrays, but we recommend the specialised test helpers in :std:doc:`numpy:reference/routines.testing` if you need support for comparisons, NaNs, or ULP-based tolerances."
msgstr "``approx`` は numpy 配列を処理できますが、比較、NaN、または ULP ベースの許容範囲のサポートが必要な場合は、:std:doc:`numpy:reference/routines.testing` の専門のテストヘルパーをお勧めします。"

#: _pytest.python_api.approx:153 of
msgid "To match strings using regex, you can use `Matches <https://github.com/asottile/re-assert#re_assertmatchespattern-str-args-kwargs>`_ from the `re_assert package <https://github.com/asottile/re-assert>`_."
msgstr "正規表現を使用して文字列を一致させるには、`re_assert パッケージ <https://github.com/asottile/re-assert>`_ の `Matches <https://github.com/asottile/re-assert#re_assertmatchespattern-str-args-kwargs>`_ を使用できます。"

#: _pytest.python_api.approx:162 of
msgid "In order to avoid inconsistent behavior, :py:exc:`TypeError` is raised for ``>``, ``>=``, ``<`` and ``<=`` comparisons. The example below illustrates the problem::"
msgstr "一貫性のない動作を避けるために、``>``, ``>=``, ``<`` および ``<=`` 比較では :py:exc:`TypeError` が発生します。 以下の例は問題を示しています::"

#: _pytest.python_api.approx:169 of
msgid "In the second example one expects ``approx(0.1).__le__(0.1 + 1e-10)`` to be called. But instead, ``approx(0.1).__lt__(0.1 + 1e-10)`` is used to comparison. This is because the call hierarchy of rich comparisons follows a fixed behavior. More information: :py:meth:`object.__ge__`"
msgstr "2 番目の例では ``approx(0.1).__le__(0.1 + 1e-10)`` が呼び出されることを期待します。 しかし、代わりに ``approx(0.1).__lt__(0.1 + 1e-10)`` が比較に使用されます。 これは、リッチ比較の呼び出し階層が固定された動作に従うためです。 詳細情報: :py:meth:`object.__ge__`"

#: _pytest.python_api.approx:174 of
msgid "``approx`` raises ``TypeError`` when it encounters a dict value or sequence element of nonnumeric type."
msgstr "``approx`` は、非数値型の辞書値またはシーケンス要素に遭遇した場合に ``TypeError`` を発生させます。"

#: _pytest.python_api.approx:178 of
msgid "``approx`` falls back to strict equality for nonnumeric types instead of raising ``TypeError``."
msgstr "``approx`` は ``TypeError`` を発生させる代わりに、非数値型に対して厳密な等価性に戻ります。"

#: ../../reference/reference.rst:53
msgid "pytest.fail"
msgstr "pytest.fail"

#: ../../reference/reference.rst:55
msgid "**Tutorial**: :ref:`skipping`"
msgstr "**チュートリアル**: :ref:`skipping`"

#: _pytest.outcomes.fail:1 of
msgid "Explicitly fail an executing test with the given message."
msgstr "指定されたメッセージで実行中のテストを明示的に失敗させます。"

#: ../../reference/reference.rst _pytest.config.PytestPluginManager.register
#: _pytest.config.argparsing.Parser.addini
#: _pytest.config.argparsing.Parser.addoption
#: _pytest.config.argparsing.Parser.getgroup of
msgid "Parameters"
msgstr "パラメータ"

#: _pytest.outcomes.fail:3 of
msgid "The message to show the user as reason for the failure."
msgstr "失敗の理由としてユーザーに表示するメッセージ。"

#: _pytest.outcomes.fail:6 of
msgid "If False, msg represents the full failure information and no python traceback will be reported."
msgstr "False の場合、msg は完全な失敗情報を表し、Python のトレースバックは報告されません。"

#: ../../reference.reference.rst
msgid "Raises"
msgstr "例外"

#: _pytest.outcomes.exit:10 _pytest.outcomes.fail:10 _pytest.outcomes.skip:18
#: _pytest.outcomes.xfail:16 of
msgid "The exception that is raised."
msgstr "発生する例外。"

#: ../../reference/reference.rst:61
msgid "The exception raised by :func:`pytest.fail`."
msgstr ":func:`pytest.fail` によって発生する例外。"

#: ../../reference/reference.rst:64
msgid "pytest.skip"
msgstr "pytest.skip"

#: _pytest.outcomes.skip:1 of
msgid "Skip an executing test with the given message."
msgstr "指定されたメッセージで実行中のテストをスキップします。"

#: _pytest.outcomes.skip:3 of
msgid "This function should be called only during testing (setup, call or teardown) or during collection by using the ``allow_module_level`` flag.  This function can be called in doctests as well."
msgstr "この関数はテスト中 (セットアップ、コール、またはティアダウン) または ``allow_module_level`` フラグを使用してコレクション中にのみ呼び出す必要があります。 この関数は doctests でも呼び出すことができます。"

#: _pytest.outcomes.skip:7 of
msgid "The message to show the user as reason for the skip."
msgstr "スキップの理由としてユーザーに表示するメッセージ。"

#: _pytest.outcomes.skip:10 of
msgid "Allows this function to be called at module level. Raising the skip exception at module level will stop the execution of the module and prevent the collection of all tests in the module, even those defined before the `skip` call.  Defaults to False."
msgstr "この関数をモジュールレベルで呼び出すことを許可します。 モジュールレベルでスキップ例外を発生させると、モジュールの実行が停止し、`skip` 呼び出しの前に定義されたテストも含めて、モジュール内のすべてのテストの収集が防止されます。 デフォルトは False です。"

#: _pytest.outcomes.skip:11 of
msgid "Allows this function to be called at module level. Raising the skip exception at module level will stop the execution of the module and prevent the collection of all tests in the module, even those defined before the `skip` call."
msgstr "この関数をモジュールレベルで呼び出すことを許可します。 モジュールレベルでスキップ例外を発生させると、モジュールの実行が停止し、`skip` 呼び出しの前に定義されたテストも含めて、モジュール内のすべてのテストの収集が防止されます。"

#: _pytest.outcomes.skip:16 of
msgid "Defaults to False."
msgstr "デフォルトは False です。"

#: _pytest.outcomes.skip:22 of
msgid "It is better to use the :ref:`pytest.mark.skipif ref` marker when possible to declare a test to be skipped under certain conditions like mismatching platforms or dependencies. Similarly, use the ``# doctest: +SKIP`` directive (see :py:data:`doctest.SKIP`) to skip a doctest statically."
msgstr "プラットフォームや依存関係が一致しないなどの特定の条件下でテストをスキップすることを宣言するには、可能な限り :ref:`pytest.mark.skipif ref` マーカーを使用する方が良いです。 同様に、doctest を静的にスキップするには ``# doctest: +SKIP`` ディレクティブを使用します (:py:data:`doctest.SKIP` を参照)。"

#: ../../reference/reference.rst:70
msgid "The exception raised by :func:`pytest.skip`."
msgstr ":func:`pytest.skip` によって発生する例外。"

#: ../../reference/reference.rst:75
msgid "pytest.importorskip"
msgstr "pytest.importorskip"

#: _pytest.outcomes.importorskip:1 of
msgid "Import and return the requested module ``modname``, or skip the current test if the module cannot be imported."
msgstr "要求されたモジュール ``modname`` をインポートして返すか、モジュールをインポートできない場合は現在のテストをスキップします。"

#: _pytest.outcomes.importorskip:4 of
msgid "The name of the module to import."
msgstr "インポートするモジュールの名前。"

#: _pytest.outcomes.importorskip:6 of
msgid "If given, the imported module's ``__version__`` attribute must be at least this minimal version, otherwise the test is still skipped."
msgstr "指定された場合、インポートされたモジュールの ``__version__`` 属性は少なくともこの最小バージョンでなければなりません。 そうでない場合、テストはスキップされます。"

#: _pytest.outcomes.importorskip:9 of
msgid "If given, this reason is shown as the message when the module cannot be imported."
msgstr "指定された場合、モジュールをインポートできないときにこの理由がメッセージとして表示されます。"

#: _pytest.outcomes.importorskip:12 of
msgid "The exception that should be captured in order to skip modules. Must be :py:class:`ImportError` or a subclass.  If the module can be imported but raises :class:`ImportError`, pytest will issue a warning to the user, as often users expect the module not to be found (which would raise :class:`ModuleNotFoundError` instead).  This warning can be suppressed by passing ``exc_type=ImportError`` explicitly.  See :ref:`import-or-skip-import-error` for details."
msgstr "モジュールをスキップするためにキャプチャする必要がある例外。 :py:class:`ImportError` またはそのサブクラスでなければなりません。 モジュールをインポートできても :class:`ImportError` が発生した場合、pytest はユーザーに警告を発します。 多くの場合、ユーザーはモジュールが見つからないことを期待しています (この場合は :class:`ModuleNotFoundError` が発生します)。 この警告は ``exc_type=ImportError`` を明示的に渡すことで抑制できます。 詳細は :ref:`import-or-skip-import-error` を参照してください。"

#: _pytest.outcomes.importorskip:13 of
msgid "The exception that should be captured in order to skip modules. Must be :py:class:`ImportError` or a subclass."
msgstr "モジュールをスキップするためにキャプチャする必要がある例外。 :py:class:`ImportError` またはそのサブクラスでなければなりません。"

#: _pytest.outcomes.importorskip:16 of
msgid "If the module can be imported but raises :class:`ImportError`, pytest will issue a warning to the user, as often users expect the module not to be found (which would raise :class:`ModuleNotFoundError` instead)."
msgstr "モジュールをインポートできても :class:`ImportError` が発生した場合、pytest はユーザーに警告を発します。 多くの場合、ユーザーはモジュールが見つからないことを期待しています (この場合は :class:`ModuleNotFoundError` が発生します)。"

#: _pytest.outcomes.importorskip:20 of
msgid "This warning can be suppressed by passing ``exc_type=ImportError`` explicitly."
msgstr "この警告は ``exc_type=ImportError`` を明示的に渡すことで抑制できます。"

#: _pytest.outcomes.importorskip:22 of
msgid "See :ref:`import-or-skip-import-error` for details."
msgstr "詳細は :ref:`import-or-skip-import-error` を参照してください。"

#: ../../reference/reference.rst _pytest.config.PytestPluginManager.register
#: _pytest.config.argparsing.Parser.getgroup of
msgid "Returns"
msgstr "戻り値"

#: _pytest.outcomes.importorskip:25 of
msgid "The imported module. This should be assigned to its canonical name."
msgstr "インポートされたモジュール。 これはその標準名に割り当てる必要があります。"

#: _pytest.outcomes.importorskip:28 of
msgid "If the module cannot be imported."
msgstr "モジュールをインポートできない場合。"

#: ../../reference/reference.rst _pytest.config.PytestPluginManager.register
#: _pytest.config.argparsing.Parser.getgroup of
msgid "Return type"
msgstr "戻り値の型"

#: _pytest.fixtures.pytestconfig:4 _pytest.junitxml.record_property:9
#: _pytest.mark.structures.MarkGenerator:4 _pytest.outcomes.importorskip:31 of
msgid "Example::"
msgstr "例::"

#: _pytest.outcomes.importorskip:37 of
msgid "The ``exc_type`` parameter."
msgstr "``exc_type`` パラメータ。"

#: ../../reference/reference.rst:80
msgid "pytest.xfail"
msgstr "pytest.xfail"

#: _pytest.outcomes.xfail:1 of
msgid "Imperatively xfail an executing test or setup function with the given reason."
msgstr "指定された理由で実行中のテストまたはセットアップ関数を強制的に xfail します。"

#: _pytest.outcomes.xfail:3 of
msgid "This function should be called only during testing (setup, call or teardown)."
msgstr "この関数はテスト中 (セットアップ、コール、またはティアダウン) にのみ呼び出す必要があります。"

#: _pytest.outcomes.xfail:5 of
msgid "No other code is executed after using ``xfail()`` (it is implemented internally by raising an exception)."
msgstr "``xfail()`` を使用した後、他のコードは実行されません (これは内部的に例外を発生させることで実装されています)。"

#: _pytest.outcomes.xfail:8 of
msgid "The message to show the user as reason for the xfail."
msgstr "xfail の理由としてユーザーに表示するメッセージ。"

#: _pytest.outcomes.xfail:12 of
msgid "It is better to use the :ref:`pytest.mark.xfail ref` marker when possible to declare a test to be xfailed under certain conditions like known bugs or missing features."
msgstr "既知のバグや欠落している機能などの特定の条件下でテストを xfail することを宣言するには、可能な限り :ref:`pytest.mark.xfail ref` マーカーを使用する方が良いです。"

#: ../../reference/reference.rst:86
msgid "The exception raised by :func:`pytest.xfail`."
msgstr ":func:`pytest.xfail` によって発生する例外。"

#: ../../reference/reference.rst:89
msgid "pytest.exit"
msgstr "pytest.exit"

#: _pytest.outcomes.exit:1 of
msgid "Exit testing process."
msgstr "テストプロセスを終了します。"

#: _pytest.outcomes.exit:3 of
msgid "The message to show as the reason for exiting pytest.  reason has a default value only because `msg` is deprecated."
msgstr "pytest を終了する理由として表示するメッセージ。 reason は `msg` が非推奨であるためにのみデフォルト値を持ちます。"

#: _pytest.outcomes.exit:7 of
msgid "Return code to be used when exiting pytest. None means the same as ``0`` (no error), same as :func:`sys.exit`."
msgstr "pytest を終了するときに使用されるリターンコード。 None は ``0`` (エラーなし) と同じ意味です。 :func:`sys.exit` と同じです。"

#: ../../reference/reference.rst:95
msgid "The exception raised by :func:`pytest.exit`."
msgstr ":func:`pytest.exit` によって発生する例外。"

#: ../../reference/reference.rst:98
msgid "pytest.main"
msgstr "pytest.main"

#: ../../reference/reference.rst:100
msgid "**Tutorial**: :ref:`pytest.main-usage`"
msgstr "**チュートリアル**: :ref:`pytest.main-usage`"

#: _pytest.config.main:1 of
msgid "Perform an in-process test run."
msgstr "インプロセステストを実行します。"

#: _pytest.config.main:3 of
msgid "List of command line arguments. If `None` or not given, defaults to reading arguments directly from the process command line (:data:`sys.argv`)."
msgstr "コマンドライン引数のリスト。 `None` または指定されていない場合、プロセスのコマンドライン (:data:`sys.argv`) から直接引数を読み取るのがデフォルトです。"

#: _pytest.config.main:6 of
msgid "List of plugin objects to be auto-registered during initialization."
msgstr "初期化中に自動登録されるプラグインオブジェクトのリスト。"

#: _pytest.config.main:8 of
msgid "An exit code."
msgstr "終了コード。"

#: ../../reference/reference.rst:105
msgid "pytest.param"
msgstr "pytest.param"

#: _pytest.mark.param:1 of
msgid "Specify a parameter in `pytest.mark.parametrize`_ calls or :ref:`parametrized fixtures <fixture-parametrize-marks>`."
msgstr "`pytest.mark.parametrize`_ 呼び出しや :ref:`parametrized fixtures <fixture-parametrize-marks>` でパラメータを指定します。"

#: _pytest.mark.param:16 of
msgid "Variable args of the values of the parameter set, in order."
msgstr "パラメータセットの値の可変引数を順番に。"

#: _pytest.mark.param:17 of
msgid "A single mark or a list of marks to be applied to this parameter set."
msgstr "このパラメータセットに適用される単一のマークまたはマークのリスト。"

#: _pytest.mark.param:18 of
msgid "The id to attribute to this parameter set."
msgstr "このパラメータセットに付与する ID。"

#: ../../reference/reference.rst:110
msgid "pytest.raises"
msgstr "pytest.raises"

#: ../../reference/reference.rst:112
msgid "**Tutorial**: :ref:`assertraises`"
msgstr "**チュートリアル**: :ref:`assertraises`"

#: _pytest.python_api.raises:1 of
msgid "Assert that a code block/function call raises an exception type, or one of its subclasses."
msgstr "コードブロック/関数呼び出しが例外タイプまたはそのサブクラスのいずれかを発生させることをアサートします。"

#: _pytest.python_api.raises:3 of
msgid "The expected exception type, or a tuple if one of multiple possible exception types are expected. Note that subclasses of the passed exceptions will also match."
msgstr "期待される例外タイプ、または複数の可能な例外タイプのいずれかが期待される場合はタプル。 渡された例外のサブクラスも一致することに注意してください。"

#: _pytest.python_api.raises:8 of
msgid "If specified, a string containing a regular expression, or a regular expression object, that is tested against the string representation of the exception and its :pep:`678` `__notes__` using :func:`re.search`.  To match a literal string that may contain :ref:`special characters <re-syntax>`, the pattern can first be escaped with :func:`re.escape`.  (This is only used when ``pytest.raises`` is used as a context manager, and passed through to the function otherwise. When using ``pytest.raises`` as a function, you can use: ``pytest.raises(Exc, func, match=\"passed on\").match(\"my pattern\")``.)"
msgstr "指定された場合、正規表現を含む文字列、または正規表現オブジェクトが例外の文字列表現およびその :pep:`678` `__notes__` に対して :func:`re.search` を使用してテストされます。 :ref:`special characters <re-syntax>` を含む可能性のあるリテラル文字列に一致させるには、最初にパターンを :func:`re.escape` でエスケープできます。 (これは ``pytest.raises`` がコンテキストマネージャとして使用される場合にのみ使用され、そうでない場合は関数に渡されます。 関数として ``pytest.raises`` を使用する場合は、``pytest.raises(Exc, func, match=\"passed on\").match(\"my pattern\")`` を使用できます。)"

#: _pytest.python_api.raises:9 of
msgid "If specified, a string containing a regular expression, or a regular expression object, that is tested against the string representation of the exception and its :pep:`678` `__notes__` using :func:`re.search`."
msgstr "指定された場合、正規表現を含む文字列、または正規表現オブジェクトが例外の文字列表現およびその :pep:`678` `__notes__` に対して :func:`re.search` を使用してテストされます。"

#: _pytest._code.code.ExceptionInfo.group_contains:13
#: _pytest.python_api.raises:14 of
msgid "To match a literal string that may contain :ref:`special characters <re-syntax>`, the pattern can first be escaped with :func:`re.escape`."
msgstr ":ref:`special characters <re-syntax>` を含む可能性のあるリテラル文字列に一致させるには、最初にパターンを :func:`re.escape` でエスケープできます。"

#: _pytest.python_api.raises:17 of
msgid "(This is only used when ``pytest.raises`` is used as a context manager, and passed through to the function otherwise. When using ``pytest.raises`` as a function, you can use: ``pytest.raises(Exc, func, match=\"passed on\").match(\"my pattern\")``.)"
msgstr "(これは ``pytest.raises`` がコンテキストマネージャとして使用される場合にのみ使用され、そうでない場合は関数に渡されます。 関数として ``pytest.raises`` を使用する場合は、``pytest.raises(Exc, func, match=\"passed on\").match(\"my pattern\")`` を使用できます。)"

#: _pytest.python_api.raises:22 of
msgid "Use ``pytest.raises`` as a context manager, which will capture the exception of the given type, or any of its subclasses::"
msgstr "コンテキストマネージャとして ``pytest.raises`` を使用すると、指定されたタイプの例外またはそのサブクラスのいずれかをキャプチャします::"

#: _pytest.python_api.raises:29 of
msgid "If the code block does not raise the expected exception (:class:`ZeroDivisionError` in the example above), or no exception at all, the check will fail instead."
msgstr "コードブロックが期待される例外 (:class:`ZeroDivisionError` 上記の例) を発生させない場合、またはまったく例外を発生させない場合、チェックは失敗します。"

#: _pytest.python_api.raises:32 of
msgid "You can also use the keyword argument ``match`` to assert that the exception matches a text or regex::"
msgstr "キーワード引数 ``match`` を使用して、例外がテキストまたは正規表現に一致することをアサートすることもできます::"

#: _pytest.python_api.raises:41 of
msgid "The ``match`` argument searches the formatted exception string, which includes any `PEP-678 <https://peps.python.org/pep-0678/>`__ ``__notes__``:"
msgstr "``match`` 引数は、フォーマットされた例外文字列を検索します。 これには、`PEP-678 <https://peps.python.org/pep-0678/>`__ ``__notes__`` が含まれます。"

#: _pytest.python_api.raises:49 of
msgid "The context manager produces an :class:`ExceptionInfo` object which can be used to inspect the details of the captured exception::"
msgstr "コンテキストマネージャは :class:`ExceptionInfo` オブジェクトを生成し、キャプチャされた例外の詳細を調査するために使用できます。"

#: _pytest.python_api.raises:59 of
msgid "Given that ``pytest.raises`` matches subclasses, be wary of using it to match :class:`Exception` like this::"
msgstr "``pytest.raises`` はサブクラスに一致するため、次のように :class:`Exception` に一致させる場合は注意してください。"

#: _pytest.python_api.raises:64 of
msgid "Because :class:`Exception` is the base class of almost all exceptions, it is easy for this to hide real bugs, where the user wrote this expecting a specific exception, but some other exception is being raised due to a bug introduced during a refactoring."
msgstr ":class:`Exception` はほとんどすべての例外の基底クラスであるため、特定の例外を期待してこれを書いたユーザーが、リファクタリング中に導入されたバグにより他の例外が発生している場合に、これが実際のバグを隠すことが容易です。"

#: _pytest.python_api.raises:68 of
msgid "Avoid using ``pytest.raises`` to catch :class:`Exception` unless certain that you really want to catch **any** exception raised."
msgstr "**任意の** 例外をキャッチしたいと確信している場合を除き、:class:`Exception` をキャッチするために ``pytest.raises`` を使用することは避けてください。"

#: _pytest.python_api.raises:73 of
msgid "When using ``pytest.raises`` as a context manager, it's worthwhile to note that normal context manager rules apply and that the exception raised *must* be the final line in the scope of the context manager. Lines of code after that, within the scope of the context manager will not be executed. For example::"
msgstr "``pytest.raises`` をコンテキストマネージャとして使用する場合、通常のコンテキストマネージャのルールが適用され、発生した例外はコンテキストマネージャのスコープ内の最後の行でなければならないことに注意する価値があります。 その後のコード行はコンテキストマネージャのスコープ内では実行されません。 例えば::"

#: _pytest.python_api.raises:85 of
msgid "Instead, the following approach must be taken (note the difference in scope)::"
msgstr "代わりに、次のアプローチを取る必要があります (スコープの違いに注意)::"

#: _pytest.python_api.raises:94 _pytest.recwarn.warns:33 of
msgid "**Using with** ``pytest.mark.parametrize``"
msgstr "``pytest.mark.parametrize`` **を使用する**"

#: _pytest.python_api.raises:96 of
msgid "When using :ref:`pytest.mark.parametrize ref` it is possible to parametrize tests such that some runs raise an exception and others do not."
msgstr ":ref:`pytest.mark.parametrize ref` を使用する場合、いくつかの実行で例外を発生させ、他の実行では発生させないようにテストをパラメータ化することが可能です。"

#: _pytest.python_api.raises:100 of
msgid "See :ref:`parametrizing_conditional_raising` for an example."
msgstr "例については :ref:`parametrizing_conditional_raising` を参照してください。"

#: _pytest.python_api.raises:104 of
msgid ":ref:`assertraises` for more examples and detailed discussion."
msgstr "詳細な議論と他の例については :ref:`assertraises` を参照してください。"

#: _pytest.python_api.raises:106 of
msgid "**Legacy form**"
msgstr "**レガシーフォーム**"

#: _pytest.python_api.raises:108 of
msgid "It is possible to specify a callable by passing a to-be-called lambda::"
msgstr "呼び出されるラムダを渡すことで、呼び出し可能なものを指定することができます::"

#: _pytest.python_api.raises:113 of
msgid "or you can specify an arbitrary callable with arguments::"
msgstr "または、引数付きの任意の呼び出し可能なものを指定することもできます::"

#: _pytest.python_api.raises:122 of
msgid "The form above is fully supported but discouraged for new code because the context manager form is regarded as more readable and less error-prone."
msgstr "上記の形式は完全にサポートされていますが、新しいコードには推奨されません。 コンテキストマネージャ形式の方が読みやすく、エラーが発生しにくいと考えられているためです。"

#: _pytest.python_api.raises:126 of
msgid "Similar to caught exception objects in Python, explicitly clearing local references to returned ``ExceptionInfo`` objects can help the Python interpreter speed up its garbage collection."
msgstr "Python でキャッチされた例外オブジェクトと同様に、返された ``ExceptionInfo`` オブジェクトへのローカル参照を明示的にクリアすることで、Python インタープリタがガベージコレクションを高速化するのに役立ちます。"

#: _pytest.python_api.raises:130 of
msgid "Clearing those references breaks a reference cycle (``ExceptionInfo`` --> caught exception --> frame stack raising the exception --> current frame stack --> local variables --> ``ExceptionInfo``) which makes Python keep all objects referenced from that cycle (including all local variables in the current frame) alive until the next cyclic garbage collection run. More detailed information can be found in the official Python documentation for :ref:`the try statement <python:try>`."
msgstr "これらの参照をクリアすることで、参照サイクル (``ExceptionInfo`` --> キャッチされた例外 --> 例外を発生させるフレームスタック --> 現在のフレームスタック --> ローカル変数 --> ``ExceptionInfo``) が破壊され、Python がそのサイクルから参照されるすべてのオブジェクト (現在のフレームのすべてのローカル変数を含む) を次の循環ガベージコレクション実行まで生きている状態に保ちます。 詳細な情報は、公式の Python ドキュメントの :ref:`the try statement <python:try>` にあります。"

#: ../../reference/reference.rst:118
msgid "pytest.deprecated_call"
msgstr "pytest.deprecated_call"

#: ../../reference/reference.rst:120
msgid "**Tutorial**: :ref:`ensuring_function_triggers`"
msgstr "**チュートリアル**: :ref:`ensuring_function_triggers`"

#: _pytest.recwarn.deprecated_call:1 of
msgid "Assert that code produces a ``DeprecationWarning`` or ``PendingDeprecationWarning`` or ``FutureWarning``."
msgstr "コードが ``DeprecationWarning`` または ``PendingDeprecationWarning`` または ``FutureWarning`` を生成することをアサートします。"

#: _pytest.recwarn.deprecated_call:3 _pytest.recwarn.warns:11 of
msgid "This function can be used as a context manager::"
msgstr "この関数はコンテキストマネージャとして使用できます::"

#: _pytest.recwarn.deprecated_call:14 of
msgid "It can also be used by passing a function and ``*args`` and ``**kwargs``, in which case it will ensure calling ``func(*args, **kwargs)`` produces one of the warnings types above. The return value is the return value of the function."
msgstr "関数と ``*args`` および ``**kwargs`` を渡すことで使用することもできます。 この場合、``func(*args, **kwargs)`` を呼び出すと、上記のいずれかの警告タイプが生成されることを保証します。 戻り値は関数の戻り値です。"

#: _pytest.recwarn.deprecated_call:18 of
msgid "In the context manager form you may use the keyword argument ``match`` to assert that the warning matches a text or regex."
msgstr "コンテキストマネージャ形式では、キーワード引数 ``match`` を使用して、警告がテキストまたは正規表現に一致することをアサートできます。"

#: _pytest.recwarn.deprecated_call:21 of
msgid "The context manager produces a list of :class:`warnings.WarningMessage` objects, one for each warning raised."
msgstr "コンテキストマネージャは、発生した警告ごとに 1 つの :class:`warnings.WarningMessage` オブジェクトのリストを生成します。"

#: ../../reference/reference.rst:126
msgid "pytest.register_assert_rewrite"
msgstr "pytest.register_assert_rewrite"

#: ../../reference/reference.rst:128
msgid "**Tutorial**: :ref:`assertion-rewriting`"
msgstr "**チュートリアル**: :ref:`assertion-rewriting`"

#: _pytest.assertion.register_assert_rewrite:1 of
msgid "Register one or more module names to be rewritten on import."
msgstr "インポート時に書き換えられる 1 つ以上のモジュール名を登録します。"

#: _pytest.assertion.register_assert_rewrite:3 of
msgid "This function will make sure that this module or all modules inside the package will get their assert statements rewritten. Thus you should make sure to call this before the module is actually imported, usually in your __init__.py if you are a plugin using a package."
msgstr "この関数は、このモジュールまたはパッケージ内のすべてのモジュールがアサートステートメントが書き換えられるようにします。 したがって、通常はパッケージを使用するプラグインの __init__.py で実際にモジュールがインポートされる前にこれを呼び出すようにしてください。"

#: _pytest.assertion.register_assert_rewrite:9 of
msgid "The module names to register."
msgstr "登録するモジュール名。"

#: ../../reference/reference.rst:133
msgid "pytest.warns"
msgstr "pytest.warns"

#: ../../reference/reference.rst:135
msgid "**Tutorial**: :ref:`assertwarnings`"
msgstr "**チュートリアル**: :ref:`assertwarnings`"

#: _pytest.recwarn.warns:1 of
msgid "Assert that code raises a particular class of warning."
msgstr "コードが特定のクラスの警告を発生させることをアサートします。"

#: _pytest.recwarn.warns:3 of
msgid "Specifically, the parameter ``expected_warning`` can be a warning class or tuple of warning classes, and the code inside the ``with`` block must issue at least one warning of that class or classes."
msgstr "具体的には、パラメータ ``expected_warning`` は警告クラスまたは警告クラスのタプルであり、``with`` ブロック内のコードは、そのクラスまたはクラスの少なくとも 1 つの警告を発行する必要があります。"

#: _pytest.recwarn.warns:7 of
msgid "This helper produces a list of :class:`warnings.WarningMessage` objects, one for each warning emitted (regardless of whether it is an ``expected_warning`` or not). Since pytest 8.0, unmatched warnings are also re-emitted when the context closes."
msgstr "このヘルパーは、発行された警告ごとに 1 つの :class:`warnings.WarningMessage` オブジェクトのリストを生成します (``expected_warning`` であるかどうかに関係なく)。 pytest 8.0 以降、一致しない警告もコンテキストが閉じると再発行されます。"

#: _pytest.recwarn.warns:17 of
msgid "In the context manager form you may use the keyword argument ``match`` to assert that the warning matches a text or regex::"
msgstr "コンテキストマネージャ形式では、キーワード引数 ``match`` を使用して、警告がテキストまたは正規表現に一致することをアサートできます::"

#: _pytest.recwarn.warns:35 of
msgid "When using :ref:`pytest.mark.parametrize ref` it is possible to parametrize tests such that some runs raise a warning and others do not."
msgstr ":ref:`pytest.mark.parametrize ref` を使用すると、いくつかの実行で警告を発生させ、他の実行では発生させないようにテストをパラメータ化することが可能です。"

#: _pytest.recwarn.warns:38 of
msgid "This could be achieved in the same way as with exceptions, see :ref:`parametrizing_conditional_raising` for an example."
msgstr "これは例外と同じ方法で達成できます。 例については :ref:`parametrizing_conditional_raising` を参照してください。"

#: ../../reference/reference.rst:141
msgid "pytest.freeze_includes"
msgstr "pytest.freeze_includes"

#: ../../reference/reference.rst:143
msgid "**Tutorial**: :ref:`freezing-pytest`"
msgstr "**チュートリアル**: :ref:`freezing-pytest`"

#: _pytest.freeze_support.freeze_includes:1 of
msgid "Return a list of module names used by pytest that should be included by cx_freeze."
msgstr "cx_freeze によって含まれるべき pytest で使用されるモジュール名のリストを返します。"

#: ../../reference/reference.rst:150
msgid "Marks"
msgstr "マーク"

#: ../../reference/reference.rst:152
msgid "Marks can be used to apply metadata to *test functions* (but not fixtures), which can then be accessed by fixtures or plugins."
msgstr "マークは、*テスト関数* (ただしフィクスチャではない) にメタデータを適用するために使用でき、その後フィクスチャやプラグインからアクセスできます。"

#: ../../reference/reference.rst:161
msgid "pytest.mark.filterwarnings"
msgstr "pytest.mark.filterwarnings"

#: ../../reference/reference.rst:163
msgid "**Tutorial**: :ref:`filterwarnings`"
msgstr "**チュートリアル**: :ref:`filterwarnings`"

#: ../../reference/reference.rst:165
msgid "Add warning filters to marked test items."
msgstr "マークされたテスト項目に警告フィルタを追加します。"

#: ../../reference/reference.rst:169
msgid "A *warning specification string*, which is composed of contents of the tuple ``(action, message, category, module, lineno)`` as specified in :ref:`python:warning-filter` section of the Python documentation, separated by ``\":\"``. Optional fields can be omitted. Module names passed for filtering are not regex-escaped.  For example:  .. code-block:: python      @pytest.mark.filterwarnings(\"ignore:.*usage will be deprecated.*:DeprecationWarning\")     def test_foo(): ..."
msgstr "*警告仕様文字列* は、Python ドキュメントの :ref:`python:warning-filter` セクションで指定されている ``(action, message, category, module, lineno)`` のタプルの内容で構成され、``\":\"`` で区切られます。 オプションのフィールドは省略できます。 フィルタリングに渡されるモジュール名は正規表現でエスケープされません。  例:  .. code-block:: python      @pytest.mark.filterwarnings(\"ignore:.*usage will be deprecated.*:DeprecationWarning\")     def test_foo(): ..."

#: ../../reference/reference.rst:170
msgid "A *warning specification string*, which is composed of contents of the tuple ``(action, message, category, module, lineno)`` as specified in :ref:`python:warning-filter` section of the Python documentation, separated by ``\":\"``. Optional fields can be omitted. Module names passed for filtering are not regex-escaped."
msgstr "*警告仕様文字列* は、Python ドキュメントの :ref:`python:warning-filter` セクションで指定されている ``(action, message, category, module, lineno)`` のタプルの内容で構成され、``\":\"`` で区切られます。 オプションのフィールドは省略できます。 フィルタリングに渡されるモジュール名は正規表現でエスケープされません。"

#: ../../reference/reference.rst:175 ../../reference/reference.rst:287
#: _pytest.monkeypatch.MonkeyPatch.setattr:3 of
msgid "For example:"
msgstr "例:"

#: ../../reference/reference.rst:186
msgid "pytest.mark.parametrize"
msgstr "pytest.mark.parametrize"

#: ../../reference/reference.rst:188
msgid "**Tutorial**: :ref:`parametrize`"
msgstr "**チュートリアル**: :ref:`parametrize`"

#: ../../reference/reference.rst:190
msgid "This mark has the same signature as :py:meth:`pytest.Metafunc.parametrize`; see there."
msgstr "このマークは :py:meth:`pytest.Metafunc.parametrize` と同じシグネチャを持っています。 そちらを参照してください。"

#: ../../reference/reference.rst:196
msgid "pytest.mark.skip"
msgstr "pytest.mark.skip"

#: ../../reference/reference.rst:198
msgid "**Tutorial**: :ref:`skip`"
msgstr "**チュートリアル**: :ref:`skip`"

#: ../../reference/reference.rst:200
msgid "Unconditionally skip a test function."
msgstr "テスト関数を無条件でスキップします。"

#: ../../reference/reference.rst:204 ../../reference/reference.rst:220
msgid "Reason why the test function is being skipped."
msgstr "テスト関数がスキップされる理由。"

#: ../../reference/reference.rst:210
msgid "pytest.mark.skipif"
msgstr "pytest.mark.skipif"

#: ../../reference/reference.rst:212
msgid "**Tutorial**: :ref:`skipif`"
msgstr "**チュートリアル**: :ref:`skipif`"

#: ../../reference/reference.rst:214
msgid "Skip a test function if a condition is ``True``."
msgstr "条件が ``True`` の場合、テスト関数をスキップします。"

#: ../../reference/reference.rst:219
msgid "``True/False`` if the condition should be skipped or a :ref:`condition string <string conditions>`."
msgstr "条件がスキップされるべきかどうかの ``True/False`` または :ref:`condition string <string conditions>`。"

#: ../../reference/reference.rst:226
msgid "pytest.mark.usefixtures"
msgstr "pytest.mark.usefixtures"

#: ../../reference/reference.rst:228
msgid "**Tutorial**: :ref:`usefixtures`"
msgstr "**チュートリアル**: :ref:`usefixtures`"

#: ../../reference/reference.rst:230
msgid "Mark a test function as using the given fixture names."
msgstr "テスト関数を指定されたフィクスチャ名を使用するようにマークします。"

#: ../../reference/reference.rst:234
msgid "The names of the fixture to use, as strings."
msgstr "フィクスチャの名前。 文字列として。"

#: ../../reference/reference.rst:238
msgid "When using `usefixtures` in hooks, it can only load fixtures when applied to a test function before test setup (for example in the `pytest_collection_modifyitems` hook)."
msgstr "フックで `usefixtures` を使用する場合、テストセットアップ前のテスト関数に適用されるときのみフィクスチャをロードできます (たとえば `pytest_collection_modifyitems` フックで)。"

#: ../../reference/reference.rst:241
msgid "Also note that this mark has no effect when applied to **fixtures**."
msgstr "また、このマークは **フィクスチャ** に適用された場合には効果がありません。"

#: ../../reference/reference.rst:248
msgid "pytest.mark.xfail"
msgstr "pytest.mark.xfail"

#: ../../reference/reference.rst:250
msgid "**Tutorial**: :ref:`xfail`"
msgstr "**チュートリアル**: :ref:`xfail`"

#: ../../reference/reference.rst:252
msgid "Marks a test function as *expected to fail*."
msgstr "テスト関数を *失敗することが期待される* としてマークします。"

#: ../../reference/reference.rst:256
msgid "Condition for marking the test function as xfail (``True/False`` or a :ref:`condition string <string conditions>`). If a ``bool``, you also have to specify ``reason`` (see :ref:`condition string <string conditions>`)."
msgstr "テスト関数を xfail としてマークする条件 (``True/False`` または :ref:`condition string <string conditions>`)。 ``bool`` の場合は ``reason`` も指定する必要があります (:ref:`condition string <string conditions>` を参照)。"

#: ../../reference/reference.rst:260
msgid "Reason why the test function is marked as xfail."
msgstr "テスト関数が xfail としてマークされる理由。"

#: ../../reference/reference.rst:262
msgid "Exception class (or tuple of classes) expected to be raised by the test function; other exceptions will fail the test. Note that subclasses of the classes passed will also result in a match (similar to how the ``except`` statement works)."
msgstr "テスト関数によって発生することが期待される例外クラス (またはクラスのタプル)。 他の例外はテストに失敗します。 渡されたクラスのサブクラスも一致する結果になることに注意してください (``except`` ステートメントの動作と同様)。"

#: ../../reference/reference.rst:267
msgid "Whether the test function should actually be executed. If ``False``, the function will always xfail and will not be executed (useful if a function is segfaulting)."
msgstr "テスト関数が実際に実行されるべきかどうか。 ``False`` の場合、関数は常に xfail となり、実行されません (関数がセグフォルトしている場合に便利です)。"

#: ../../reference/reference.rst:270
msgid "* If ``False`` the function will be shown in the terminal output as ``xfailed`` if it fails   and as ``xpass`` if it passes. In both cases this will not cause the test suite to fail as a whole. This   is particularly useful to mark *flaky* tests (tests that fail at random) to be tackled later. * If ``True``, the function will be shown in the terminal output as ``xfailed`` if it fails, but if it   unexpectedly passes then it will **fail** the test suite. This is particularly useful to mark functions   that are always failing and there should be a clear indication if they unexpectedly start to pass (for example   a new release of a library fixes a known bug).  Defaults to :confval:`xfail_strict`, which is ``False`` by default."
msgstr "* ``False`` の場合、関数はターミナル出力に ``xfailed`` として表示され、失敗した場合は ``xpass`` として表示されます。  どちらの場合も、これはテストスイート全体を失敗させることはありません。  これは、後で対処するために *flaky* テスト (ランダムに失敗するテスト) をマークするのに特に便利です。 * ``True`` の場合、関数は失敗した場合に ``xfailed`` としてターミナル出力に表示されますが、  予期せずにパスした場合はテストスイートを **失敗** させます。  これは、常に失敗する関数をマークし、予期せずにパスし始めた場合には明確な指示があるべきである関数をマークするのに特に便利です (たとえば、新しいリリースで既知のバグが修正された場合)。  デフォルトは :confval:`xfail_strict` で、デフォルトは ``False`` です。"

#: ../../reference/reference.rst:271
msgid "If ``False`` the function will be shown in the terminal output as ``xfailed`` if it fails and as ``xpass`` if it passes. In both cases this will not cause the test suite to fail as a whole. This is particularly useful to mark *flaky* tests (tests that fail at random) to be tackled later."
msgstr "``False`` の場合、関数はターミナル出力に ``xfailed`` として表示され、失敗した場合は ``xpass`` として表示されます。 どちらの場合も、これはテストスイート全体を失敗させることはありません。 これは、後で対処するために *flaky* テスト (ランダムに失敗するテスト) をマークするのに特に便利です。"

#: ../../reference/reference.rst:274
msgid "If ``True``, the function will be shown in the terminal output as ``xfailed`` if it fails, but if it unexpectedly passes then it will **fail** the test suite. This is particularly useful to mark functions that are always failing and there should be a clear indication if they unexpectedly start to pass (for example a new release of a library fixes a known bug)."
msgstr "``True`` の場合、関数は失敗した場合に ``xfailed`` としてターミナル出力に表示されますが、予期せずにパスした場合はテストスイートを **失敗** させます。 これは、常に失敗する関数をマークし、予期せずにパスし始めた場合には明確な指示があるべきである関数をマークするのに特に便利です (たとえば、新しいリリースで既知のバグが修正された場合)。"

#: ../../reference/reference.rst:279
msgid "Defaults to :confval:`xfail_strict`, which is ``False`` by default."
msgstr "デフォルトは :confval:`xfail_strict` で、デフォルトは ``False`` です。"

#: ../../reference/reference.rst:283
msgid "Custom marks"
msgstr "カスタムマーク"

#: ../../reference/reference.rst:285
msgid "Marks are created dynamically using the factory object ``pytest.mark`` and applied as a decorator."
msgstr "マークは、ファクトリオブジェクト ``pytest.mark`` を使用して動的に作成され、デコレータとして適用されます。"

#: ../../reference/reference.rst:294
msgid "Will create and attach a :class:`Mark <pytest.Mark>` object to the collected :class:`Item <pytest.Item>`, which can then be accessed by fixtures or hooks with :meth:`Node.iter_markers <_pytest.nodes.Node.iter_markers>`. The ``mark`` object will have the following attributes:"
msgstr "収集された :class:`Item <pytest.Item>` に :class:`Mark <pytest.Mark>` オブジェクトを作成してアタッチし、その後、フィクスチャやフックで :meth:`Node.iter_markers <_pytest.nodes.Node.iter_markers>` を使用してアクセスできます。 ``mark`` オブジェクトには以下の属性があります:"

#: ../../reference/reference.rst:303
msgid "Example for using multiple custom markers:"
msgstr "複数のカスタムマーカーを使用する例:"

#: ../../reference/reference.rst:311
msgid "When :meth:`Node.iter_markers <_pytest.nodes.Node.iter_markers>` or :meth:`Node.iter_markers_with_node <_pytest.nodes.Node.iter_markers_with_node>` is used with multiple markers, the marker closest to the function will be iterated over first. The above example will result in ``@pytest.mark.slow`` followed by ``@pytest.mark.timeout(...)``."
msgstr ":meth:`Node.iter_markers <_pytest.nodes.Node.iter_markers>` または :meth:`Node.iter_markers_with_node <_pytest.nodes.Node.iter_markers_with_node>` が複数のマーカーで使用されると、関数に最も近いマーカーが最初に反復されます。 上記の例では、``@pytest.mark.slow`` が最初に続いて ``@pytest.mark.timeout(...)`` になります。"

#: ../../reference/reference.rst:316
msgid "Fixtures"
msgstr "フィクスチャ"

#: ../../reference/reference.rst:318
msgid "**Tutorial**: :ref:`fixture`"
msgstr "**チュートリアル**: :ref:`fixture`"

#: ../../reference/reference.rst:320
msgid "Fixtures are requested by test functions or other fixtures by declaring them as argument names."
msgstr "フィクスチャは、テスト関数や他のフィクスチャによって、引数名として宣言することで要求されます。"

#: ../../reference/reference.rst:323
msgid "Example of a test requiring a fixture:"
msgstr "フィクスチャを必要とするテストの例:"

#: ../../reference/reference.rst:333
msgid "Example of a fixture requiring another fixture:"
msgstr "別のフィクスチャを必要とするフィクスチャの例:"

#: ../../reference/reference.rst:342
msgid "For more details, consult the full :ref:`fixtures docs <fixture>`."
msgstr "詳細については、完全な :ref:`fixtures docs <fixture>` を参照してください。"

#: ../../reference/reference.rst:348
msgid "@pytest.fixture"
msgstr "@pytest.fixture"

#: _pytest.fixtures.fixture:1 of
msgid "Decorator to mark a fixture factory function."
msgstr "フィクスチャファクトリ関数をマークするためのデコレータ。"

#: _pytest.fixtures.fixture:3 of
msgid "This decorator can be used, with or without parameters, to define a fixture function."
msgstr "このデコレータは、パラメータの有無にかかわらず、フィクスチャ関数を定義するために使用できます。"

#: _pytest.fixtures.fixture:6 of
msgid "The name of the fixture function can later be referenced to cause its invocation ahead of running tests: test modules or classes can use the ``pytest.mark.usefixtures(fixturename)`` marker."
msgstr "フィクスチャ関数の名前は、テストの実行前にその呼び出しを引き起こすために参照されることがあります: テストモジュールやクラスは ``pytest.mark.usefixtures(fixturename)`` マーカーを使用できます。"

#: _pytest.fixtures.fixture:10 of
msgid "Test functions can directly use fixture names as input arguments in which case the fixture instance returned from the fixture function will be injected."
msgstr "テスト関数は、入力引数として直接フィクスチャ名を使用でき、その場合、フィクスチャ関数から返されるフィクスチャインスタンスが注入されます。"

#: _pytest.fixtures.fixture:14 of
msgid "Fixtures can provide their values to test functions using ``return`` or ``yield`` statements. When using ``yield`` the code block after the ``yield`` statement is executed as teardown code regardless of the test outcome, and must yield exactly once."
msgstr "フィクスチャは ``return`` または ``yield`` ステートメントを使用してテスト関数に値を提供できます。 ``yield`` を使用する場合、``yield`` ステートメントの後のコードブロックはテストの結果に関係なくティアダウンコードとして実行され、正確に一度だけ ``yield`` されなければなりません。"

#: _pytest.fixtures.fixture:19 of
msgid "The scope for which this fixture is shared; one of ``\"function\"`` (default), ``\"class\"``, ``\"module\"``, ``\"package\"`` or ``\"session\"``.  This parameter may also be a callable which receives ``(fixture_name, config)`` as parameters, and must return a ``str`` with one of the values mentioned above.  See :ref:`dynamic scope` in the docs for more information."
msgstr "このフィクスチャが共有されるスコープ; ``\"function\"`` (デフォルト)、``\"class\"``、``\"module\"``、``\"package\"``、または ``\"session\"`` のいずれか。 このパラメータは ``(fixture_name, config)`` をパラメータとして受け取り、上記の値のいずれかを持つ ``str`` を返すコール可能なものでもかまいません。 詳細については、ドキュメントの :ref:`dynamic scope` を参照してください。"

#: _pytest.fixtures.fixture:20 of
msgid "The scope for which this fixture is shared; one of ``\"function\"`` (default), ``\"class\"``, ``\"module\"``, ``\"package\"`` or ``\"session\"``."
msgstr "このフィクスチャが共有されるスコープ; ``\"function\"`` (デフォルト)、``\"class\"``、``\"module\"``、``\"package\"``、または ``\"session\"`` のいずれか。"

#: _pytest.fixtures.fixture:23 of
msgid "This parameter may also be a callable which receives ``(fixture_name, config)`` as parameters, and must return a ``str`` with one of the values mentioned above."
msgstr "このパラメータは ``(fixture_name, config)`` をパラメータとして受け取り、上記の値のいずれかを持つ ``str`` を返すコール可能なものでもかまいません。"

#: _pytest.fixtures.fixture:26 of
msgid "See :ref:`dynamic scope` in the docs for more information."
msgstr "詳細については、ドキュメントの :ref:`dynamic scope` を参照してください。"

#: _pytest.fixtures.fixture:28 of
msgid "An optional list of parameters which will cause multiple invocations of the fixture function and all of the tests using it. The current parameter is available in ``request.param``."
msgstr "フィクスチャ関数とそれを使用するすべてのテストの複数の呼び出しを引き起こすパラメータのオプションのリスト。 現在のパラメータは ``request.param`` で利用できます。"

#: _pytest.fixtures.fixture:33 of
msgid "If True, the fixture func is activated for all tests that can see it. If False (the default), an explicit reference is needed to activate the fixture."
msgstr "True の場合、フィクスチャ関数はそれを見ることができるすべてのテストに対してアクティブになります。 False (デフォルト) の場合、フィクスチャをアクティブにするには明示的な参照が必要です。"

#: _pytest.fixtures.fixture:38 of
msgid "Sequence of ids each corresponding to the params so that they are part of the test id. If no ids are provided they will be generated automatically from the params."
msgstr "パラメータに対応する ID のシーケンス。 これらはテスト ID の一部となります。 ID が提供されない場合、それらはパラメータから自動的に生成されます。"

#: _pytest.fixtures.fixture:43 of
msgid "The name of the fixture. This defaults to the name of the decorated function. If a fixture is used in the same module in which it is defined, the function name of the fixture will be shadowed by the function arg that requests the fixture; one way to resolve this is to name the decorated function ``fixture_<fixturename>`` and then use ``@pytest.fixture(name='<fixturename>')``."
msgstr "フィクスチャの名前。 これはデコレートされた関数の名前がデフォルトになります。 フィクスチャが定義されているモジュール内で使用される場合、フィクスチャの関数名はフィクスチャを要求する関数引数によって隠されます。 これを解決する方法の一つは、デコレートされた関数を ``fixture_<fixturename>`` と名付け、``@pytest.fixture(name='<fixturename>')`` を使用することです。"

#: ../../reference/reference.rst:357
msgid "capfd"
msgstr "capfd"

#: ../../reference/reference.rst:359 ../../reference/reference.rst:370
#: ../../reference/reference.rst:397 ../../reference/reference.rst:410
msgid "**Tutorial**: :ref:`captures`"
msgstr "**チュートリアル**: :ref:`captures`"

#: _pytest.capture.capfd:1 of
msgid "Enable text capturing of writes to file descriptors ``1`` and ``2``."
msgstr "ファイルディスクリプタ ``1`` と ``2`` への書き込みのテキストキャプチャを有効にします。"

#: _pytest.capture.capfd:3 of
msgid "The captured output is made available via ``capfd.readouterr()`` method calls, which return a ``(out, err)`` namedtuple. ``out`` and ``err`` will be ``text`` objects."
msgstr "キャプチャされた出力は ``capfd.readouterr()`` メソッド呼び出しを通じて利用可能で、``(out, err)`` の名前付きタプルを返します。 ``out`` と ``err`` は ``text`` オブジェクトになります。"

#: _pytest.capture.capfd:7 _pytest.capture.capsys:7 of
msgid "Returns an instance of :class:`CaptureFixture[str] <pytest.CaptureFixture>`."
msgstr "インスタンスを返します :class:`CaptureFixture[str] <pytest.CaptureFixture>`。"

#: _pytest.capture.capfd:9 _pytest.capture.capfdbinary:9
#: _pytest.capture.capsys:9 _pytest.capture.capsysbinary:9
#: _pytest.config.Config.get_verbosity:14
#: _pytest.monkeypatch.MonkeyPatch.context:4 of
msgid "Example:"
msgstr "例:"

#: ../../reference/reference.rst:368
msgid "capfdbinary"
msgstr "capfdbinary"

#: _pytest.capture.capfdbinary:1 of
msgid "Enable bytes capturing of writes to file descriptors ``1`` and ``2``."
msgstr "ファイルディスクリプタ ``1`` と ``2`` への書き込みのバイトキャプチャを有効にします。"

#: _pytest.capture.capfdbinary:3 of
msgid "The captured output is made available via ``capfd.readouterr()`` method calls, which return a ``(out, err)`` namedtuple. ``out`` and ``err`` will be ``byte`` objects."
msgstr "キャプチャされた出力は ``capfd.readouterr()`` メソッド呼び出しを通じて利用可能で、``(out, err)`` の名前付きタプルを返します。 ``out`` と ``err`` は ``byte`` オブジェクトになります。"

#: _pytest.capture.capfdbinary:7 _pytest.capture.capsysbinary:7 of
msgid "Returns an instance of :class:`CaptureFixture[bytes] <pytest.CaptureFixture>`."
msgstr "インスタンスを返します :class:`CaptureFixture[bytes] <pytest.CaptureFixture>`。"

#: ../../reference/reference.rst:379
msgid "caplog"
msgstr "caplog"

#: ../../reference.reference.rst:381
msgid "**Tutorial**: :ref:`logging`"
msgstr "**チュートリアル**: :ref:`logging`"

#: _pytest.logging.caplog:1 of
msgid "Access and control log capturing."
msgstr "ログキャプチャへのアクセスと制御。"

#: _pytest.logging.caplog:3 of
msgid "Captured logs are available through the following properties/methods::"
msgstr "キャプチャされたログは次のプロパティ/メソッドを通じて利用可能です::"

#: ../../reference.reference.rst:386
msgid "Returns a :class:`pytest.LogCaptureFixture` instance."
msgstr "インスタンスを返します :class:`pytest.LogCaptureFixture`。"

#: _pytest.logging.LogCaptureFixture:1 of
msgid "Provides access and control of log capturing."
msgstr "ログキャプチャへのアクセスと制御を提供します。"

#: of pytest.LogCaptureFixture.handler:1
msgid "Get the logging handler used by the fixture."
msgstr "フィクスチャで使用されるロギングハンドラを取得します。"

#: _pytest.logging.LogCaptureFixture.get_records:1 of
msgid "Get the logging records for one of the possible test phases."
msgstr "可能なテストフェーズのいずれかのログレコードを取得します。"

#: _pytest.logging.LogCaptureFixture.get_records:3 of
msgid "Which test phase to obtain the records from. Valid values are: \"setup\", \"call\" and \"teardown\"."
msgstr "どのテストフェーズからレコードを取得するか。 有効な値は: \"setup\"、\"call\"、および \"teardown\"。"

#: _pytest.logging.LogCaptureFixture.get_records:7 of
msgid "The list of captured records at the given stage."
msgstr "指定されたステージでキャプチャされたレコードのリスト。"

#: of pytest.LogCaptureFixture.text:1
msgid "The formatted log text."
msgstr "フォーマットされたログテキスト。"

#: of pytest.LogCaptureFixture.records:1
msgid "The list of log records."
msgstr "ログレコードのリスト。"

#: of pytest.LogCaptureFixture.record_tuples:1
msgid "A list of a stripped down version of log records intended for use in assertion comparison."
msgstr "アサーション比較に使用するために意図されたログレコードの簡略版のリスト。"

#: of pytest.LogCaptureFixture.record_tuples:4
msgid "The format of the tuple is:"
msgstr "タプルの形式は:"

#: of pytest.LogCaptureFixture.record_tuples:6
msgid "(logger_name, log_level, message)"
msgstr "(logger_name, log_level, message)"

#: of pytest.LogCaptureFixture.messages:1
msgid "A list of format-interpolated log messages."
msgstr "フォーマットされたログメッセージのリスト。"

#: of pytest.LogCaptureFixture.messages:3
msgid "Unlike 'records', which contains the format string and parameters for interpolation, log messages in this list are all interpolated."
msgstr "「records」とは異なり、このリストのログメッセージはすべてフォーマットされています。"

#: of pytest.LogCaptureFixture.messages:6
msgid "Unlike 'text', which contains the output from the handler, log messages in this list are unadorned with levels, timestamps, etc, making exact comparisons more reliable."
msgstr "「text」とは異なり、このリストのログメッセージにはレベル、タイムスタンプなどが付いていないため、正確な比較がより信頼性の高いものになります。"

#: of pytest.LogCaptureFixture.messages:10
msgid "Note that traceback or stack info (from :func:`logging.exception` or the `exc_info` or `stack_info` arguments to the logging functions) is not included, as this is added by the formatter in the handler."
msgstr "トレースバックやスタック情報 (:func:`logging.exception` またはロギング関数への `exc_info` または `stack_info` 引数から) は含まれていないことに注意してください。 これはハンドラのフォーマッタによって追加されます。"

#: _pytest.logging.LogCaptureFixture.clear:1 of
msgid "Reset the list of log records and the captured log text."
msgstr "ログレコードのリストとキャプチャされたログテキストをリセットします。"

#: _pytest.logging.LogCaptureFixture.set_level:1 of
msgid "Set the threshold level of a logger for the duration of a test."
msgstr "テストの期間中にロガーのしきい値レベルを設定します。"

#: _pytest.logging.LogCaptureFixture.set_level:3 of
msgid "Logging messages which are less severe than this level will not be captured."
msgstr "このレベルよりも重大度の低いロギングメッセージはキャプチャされません。"

#: _pytest.logging.LogCaptureFixture.set_level:5 of
msgid "The levels of the loggers changed by this function will be restored to their initial values at the end of the test."
msgstr "この関数によって変更されたロガーのレベルは、テストの終了時に元の値に戻されます。"

#: _pytest.logging.LogCaptureFixture.at_level:5
#: _pytest.logging.LogCaptureFixture.set_level:9 of
msgid "Will enable the requested logging level if it was disabled via :func:`logging.disable`."
msgstr "要求されたロギングレベルが :func:`logging.disable` によって無効にされていた場合、それを有効にします。"

#: _pytest.logging.LogCaptureFixture.at_level:7
#: _pytest.logging.LogCaptureFixture.set_level:11 of
msgid "The level."
msgstr "レベル。"

#: _pytest.logging.LogCaptureFixture.at_level:8
#: _pytest.logging.LogCaptureFixture.set_level:12 of
msgid "The logger to update. If not given, the root logger."
msgstr "更新するロガー。 指定されていない場合は、ルートロガー。"

#: _pytest.logging.LogCaptureFixture.at_level:1 of
msgid "Context manager that sets the level for capturing of logs. After the end of the 'with' statement the level is restored to its original value."
msgstr "ログのキャプチャのためのレベルを設定するコンテキストマネージャ。 'with' ステートメントの終了後、レベルは元の値に戻されます。"

#: _pytest.logging.LogCaptureFixture.filtering:1 of
msgid "Context manager that temporarily adds the given filter to the caplog's :meth:`handler` for the 'with' statement block, and removes that filter at the end of the block."
msgstr "指定されたフィルタを caplog の :meth:`handler` に一時的に追加し、ブロックの終了時にそのフィルタを削除するコンテキストマネージャ。"

#: _pytest.logging.LogCaptureFixture.filtering:5 of
msgid "A custom :class:`logging.Filter` object."
msgstr "カスタム :class:`logging.Filter` オブジェクト。"

#: ../../reference/reference.rst:395
msgid "capsys"
msgstr "capsys"

#: _pytest.capture.capsys:1 of
msgid "Enable text capturing of writes to ``sys.stdout`` and ``sys.stderr``."
msgstr "``sys.stdout`` と ``sys.stderr`` への書き込みのテキストキャプチャを有効にします。"

#: _pytest.capture.capsys:3 of
msgid "The captured output is made available via ``capsys.readouterr()`` method calls, which return a ``(out, err)`` namedtuple. ``out`` and ``err`` will be ``text`` objects."
msgstr "キャプチャされた出力は ``capsys.readouterr()`` メソッド呼び出しを通じて利用可能で、``(out, err)`` の名前付きタプルを返します。 ``out`` と ``err`` は ``text`` オブジェクトになります。"

#: _pytest.capture.CaptureFixture:1 of
msgid "Object returned by the :fixture:`capsys`, :fixture:`capsysbinary`, :fixture:`capfd` and :fixture:`capfdbinary` fixtures."
msgstr "オブジェクトを返します :fixture:`capsys`、:fixture:`capsysbinary`、:fixture:`capfd`、および :fixture:`capfdbinary` フィクスチャ。"

#: _pytest.capture.CaptureFixture.readouterr:1 of
msgid "Read and return the captured output so far, resetting the internal buffer."
msgstr "キャプチャされた出力を読み取り、内部バッファをリセットします。"

#: _pytest.capture.CaptureFixture.readouterr:4 of
msgid "The captured content as a namedtuple with ``out`` and ``err`` string attributes."
msgstr "``out`` と ``err`` の文字列属性を持つ名前付きタプルとしてキャプチャされた内容。"

#: _pytest.capture.CaptureFixture.disabled:1 of
msgid "Temporarily disable capturing while inside the ``with`` block."
msgstr "``with`` ブロック内で一時的にキャプチャを無効にします。"

#: ../../reference/reference.rst:408
msgid "capsysbinary"
msgstr "capsysbinary"

#: _pytest.capture.capsysbinary:1 of
msgid "Enable bytes capturing of writes to ``sys.stdout`` and ``sys.stderr``."
msgstr "``sys.stdout`` と ``sys.stderr`` への書き込みのバイトキャプチャを有効にします。"

#: _pytest.capture.capsysbinary:3 of
msgid "The captured output is made available via ``capsysbinary.readouterr()`` method calls, which return a ``(out, err)`` namedtuple. ``out`` and ``err`` will be ``bytes`` objects."
msgstr "キャプチャされた出力は ``capsysbinary.readouterr()`` メソッド呼び出しを通じて利用可能で、``(out, err)`` の名前付きタプルを返します。 ``out`` と ``err`` は ``bytes`` オブジェクトになります。"

#: ../../reference/reference.rst:419
msgid "config.cache"
msgstr "config.cache"

#: ../../reference/reference.rst:421
msgid "**Tutorial**: :ref:`cache`"
msgstr "**チュートリアル**: :ref:`cache`"

#: ../../reference/reference.rst:423
msgid "The ``config.cache`` object allows other plugins and fixtures to store and retrieve values across test runs. To access it from fixtures request ``pytestconfig`` into your fixture and get it with ``pytestconfig.cache``."
msgstr "``config.cache`` オブジェクトは、他のプラグインやフィクスチャがテストの実行間で値を保存および取得することを可能にします。 フィクスチャからアクセスするには、``pytestconfig`` をフィクスチャに要求し、``pytestconfig.cache`` で取得します。"

#: ../../reference/reference.rst:427
msgid "Under the hood, the cache plugin uses the simple ``dumps``/``loads`` API of the :py:mod:`json` stdlib module."
msgstr "内部では、キャッシュプラグインは :py:mod:`json` 標準ライブラリモジュールのシンプルな ``dumps``/``loads`` API を使用します。"

#: ../../reference/reference.rst:430
msgid "``config.cache`` is an instance of :class:`pytest.Cache`:"
msgstr "``config.cache`` は :class:`pytest.Cache` のインスタンスです:"

#: _pytest.cacheprovider.Cache:1 of
msgid "Instance of the `cache` fixture."
msgstr "``cache`` フィクスチャのインスタンス。"

#: _pytest.cacheprovider.Cache.mkdir:1 of
msgid "Return a directory path object with the given name."
msgstr "指定された名前のディレクトリパスオブジェクトを返します。"

#: _pytest.cacheprovider.Cache.mkdir:3 of
msgid "If the directory does not yet exist, it will be created. You can use it to manage files to e.g. store/retrieve database dumps across test sessions."
msgstr "ディレクトリがまだ存在しない場合は作成されます。 これを使用して、テストセッション間でデータベースダンプを保存/取得するためのファイルを管理できます。"

#: _pytest.cacheprovider.Cache.mkdir:9 of
msgid "Must be a string not containing a ``/`` separator. Make sure the name contains your plugin or application identifiers to prevent clashes with other cache users."
msgstr "``/`` セパレータを含まない文字列でなければなりません。 名前には他のキャッシュユーザーとの衝突を防ぐためにプラグインまたはアプリケーションの識別子を含めてください。"

#: _pytest.cacheprovider.Cache.get:1 of
msgid "Return the cached value for the given key."
msgstr "指定されたキーのキャッシュされた値を返します。"

#: _pytest.cacheprovider.Cache.get:3 of
msgid "If no value was yet cached or the value cannot be read, the specified default is returned."
msgstr "まだ値がキャッシュされていない場合、または値を読み取ることができない場合、指定されたデフォルトが返されます。"

#: _pytest.cacheprovider.Cache.get:6 _pytest.cacheprovider.Cache.set:3 of
msgid "Must be a ``/`` separated value. Usually the first name is the name of your plugin or your application."
msgstr "``/`` で区切られた値でなければなりません。 通常、最初の名前はプラグインまたはアプリケーションの名前です。"

#: _pytest.cacheprovider.Cache.get:9 of
msgid "The value to return in case of a cache-miss or invalid cache value."
msgstr "キャッシュミスまたは無効なキャッシュ値の場合に返す値。"

#: _pytest.cacheprovider.Cache.set:1 of
msgid "Save value for the given key."
msgstr "指定されたキーの値を保存します。"

#: _pytest.cacheprovider.Cache.set:6 of
msgid "Must be of any combination of basic python types, including nested types like lists of dictionaries."
msgstr "基本的な Python タイプの任意の組み合わせでなければなりません。 リストや辞書のようなネストされたタイプも含まれます。"

#: ../../reference/reference.rst:439
msgid "doctest_namespace"
msgstr "doctest_namespace"

#: ../../reference/reference.rst:441
msgid "**Tutorial**: :ref:`doctest`"
msgstr "**チュートリアル**: :ref:`doctest`"

#: _pytest.doctest.doctest_namespace:1 of
msgid "Fixture that returns a :py:class:`dict` that will be injected into the namespace of doctests."
msgstr "フィクスチャは、doctest の名前空間に挿入される :py:class:`dict` を返します。"

#: _pytest.doctest.doctest_namespace:4 of
msgid "Usually this fixture is used in conjunction with another ``autouse`` fixture:"
msgstr "通常、このフィクスチャは別の ``autouse`` フィクスチャと組み合わせて使用されます:"

#: _pytest.doctest.doctest_namespace:12 of
msgid "For more details: :ref:`doctest_namespace`."
msgstr "詳細については: :ref:`doctest_namespace`。"

#: ../../reference/reference.rst:449
msgid "monkeypatch"
msgstr "monkeypatch"

#: ../../reference/reference.rst:451
msgid "**Tutorial**: :ref:`monkeypatching`"
msgstr "**チュートリアル**: :ref:`monkeypatching`"

#: _pytest.monkeypatch.monkeypatch:1 of
msgid "A convenient fixture for monkey-patching."
msgstr "モンキーパッチのための便利なフィクスチャ。"

#: _pytest.monkeypatch.monkeypatch:3 of
msgid "The fixture provides these methods to modify objects, dictionaries, or :data:`os.environ`:"
msgstr "フィクスチャは、オブジェクト、辞書、または :data:`os.environ` を変更するためのこれらのメソッドを提供します:"

#: _pytest.monkeypatch.monkeypatch:6 of
msgid ":meth:`monkeypatch.setattr(obj, name, value, raising=True) <pytest.MonkeyPatch.setattr>`"
msgstr ":meth:`monkeypatch.setattr(obj, name, value, raising=True) <pytest.MonkeyPatch.setattr>`"

#: _pytest.monkeypatch.monkeypatch:7 of
msgid ":meth:`monkeypatch.delattr(obj, name, raising=True) <pytest.MonkeyPatch.delattr>`"
msgstr ":meth:`monkeypatch.delattr(obj, name, raising=True) <pytest.MonkeyPatch.delattr>`"

#: _pytest.monkeypatch.monkeypatch:8 of
msgid ":meth:`monkeypatch.setitem(mapping, name, value) <pytest.MonkeyPatch.setitem>`"
msgstr ":meth:`monkeypatch.setitem(mapping, name, value) <pytest.MonkeyPatch.setitem>`"

#: _pytest.monkeypatch.monkeypatch:9 of
msgid ":meth:`monkeypatch.delitem(obj, name, raising=True) <pytest.MonkeyPatch.delitem>`"
msgstr ":meth:`monkeypatch.delitem(obj, name, raising=True) <pytest.MonkeyPatch.delitem>`"

#: _pytest.monkeypatch.monkeypatch:10 of
msgid ":meth:`monkeypatch.setenv(name, value, prepend=None) <pytest.MonkeyPatch.setenv>`"
msgstr ":meth:`monkeypatch.setenv(name, value, prepend=None) <pytest.MonkeyPatch.setenv>`"

#: _pytest.monkeypatch.monkeypatch:11 of
msgid ":meth:`monkeypatch.delenv(name, raising=True) <pytest.MonkeyPatch.delenv>`"
msgstr ":meth:`monkeypatch.delenv(name, raising=True) <pytest.MonkeyPatch.delenv>`"

#: _pytest.monkeypatch.monkeypatch:12 of
msgid ":meth:`monkeypatch.syspath_prepend(path) <pytest.MonkeyPatch.syspath_prepend>`"
msgstr ":meth:`monkeypatch.syspath_prepend(path) <pytest.MonkeyPatch.syspath_prepend>`"

#: _pytest.monkeypatch.monkeypatch:13 of
msgid ":meth:`monkeypatch.chdir(path) <pytest.MonkeyPatch.chdir>`"
msgstr ":meth:`monkeypatch.chdir(path) <pytest.MonkeyPatch.chdir>`"

#: _pytest.monkeypatch.monkeypatch:14 of
msgid ":meth:`monkeypatch.context() <pytest.MonkeyPatch.context>`"
msgstr ":meth:`monkeypatch.context() <pytest.MonkeyPatch.context>`"

#: _pytest.monkeypatch.monkeypatch:16 of
msgid "All modifications will be undone after the requesting test function or fixture has finished. The ``raising`` parameter determines if a :class:`KeyError` or :class:`AttributeError` will be raised if the set/deletion operation does not have the specified target."
msgstr "すべての変更は、要求されたテスト関数またはフィクスチャが終了した後に元に戻されます。 ``raising`` パラメータは、設定/削除操作が指定されたターゲットを持たない場合に :class:`KeyError` または :class:`AttributeError` が発生するかどうかを決定します。"

#: _pytest.monkeypatch.monkeypatch:21 of
msgid "To undo modifications done by the fixture in a contained scope, use :meth:`context() <pytest.MonkeyPatch.context>`."
msgstr "制限されたスコープでフィクスチャによって行われた変更を元に戻すには、:meth:`context() <pytest.MonkeyPatch.context>` を使用します。"

#: ../../reference/reference.rst:456
msgid "Returns a :class:`~pytest.MonkeyPatch` instance."
msgstr "インスタンスを返します :class:`~pytest.MonkeyPatch`。"

#: _pytest.monkeypatch.MonkeyPatch:1 of
msgid "Helper to conveniently monkeypatch attributes/items/environment variables/syspath."
msgstr "属性/アイテム/環境変数/シスパスを便利にモンキーパッチするためのヘルパー。"

#: _pytest.monkeypatch.MonkeyPatch:4 of
msgid "Returned by the :fixture:`monkeypatch` fixture."
msgstr "フィクスチャ :fixture:`monkeypatch` によって返されます。"

#: _pytest.monkeypatch.MonkeyPatch:6 of
msgid "Can now also be used directly as `pytest.MonkeyPatch()`, for when the fixture is not available. In this case, use :meth:`with MonkeyPatch.context() as mp: <context>` or remember to call :meth:`undo` explicitly."
msgstr "フィクスチャが利用できない場合に `pytest.MonkeyPatch()` として直接使用することもできます。 この場合、:meth:`with MonkeyPatch.context() as mp: <context>` を使用するか、:meth:`undo` を明示的に呼び出すことを忘れないでください。"

#: _pytest.monkeypatch.MonkeyPatch.context:1 of
msgid "Context manager that returns a new :class:`MonkeyPatch` object which undoes any patching done inside the ``with`` block upon exit."
msgstr "``with`` ブロックの終了時に内部で行われたパッチを元に戻す新しい :class:`MonkeyPatch` オブジェクトを返すコンテキストマネージャ。"

#: _pytest.monkeypatch.MonkeyPatch.context:15 of
msgid "Useful in situations where it is desired to undo some patches before the test ends, such as mocking ``stdlib`` functions that might break pytest itself if mocked (for examples of this see :issue:`3290`)."
msgstr "テストが終了する前にいくつかのパッチを元に戻す必要がある状況で便利です。 例えば、``stdlib`` 関数をモックする場合、モックすると pytest 自体が壊れる可能性があります (この例については :issue:`3290` を参照してください)。"

#: _pytest.monkeypatch.MonkeyPatch.setattr:1 of
msgid "Set attribute value on target, memorizing the old value."
msgstr "ターゲットの属性値を設定し、古い値を記憶します。"

#: _pytest.monkeypatch.MonkeyPatch.setattr:11 of
msgid "The code above replaces the :func:`os.getcwd` function by a ``lambda`` which always returns ``\"/\"``."
msgstr "上記のコードは、:func:`os.getcwd` 関数を常に ``\"/\"`` を返す ``lambda`` に置き換えます。"

#: _pytest.monkeypatch.MonkeyPatch.setattr:14 of
msgid "For convenience, you can specify a string as ``target`` which will be interpreted as a dotted import path, with the last part being the attribute name:"
msgstr "便利なように、``target`` として文字列を指定することができ、これはドットで区切られたインポートパスとして解釈され、最後の部分が属性名になります:"

#: _pytest.monkeypatch.MonkeyPatch.setattr:22 of
msgid "Raises :class:`AttributeError` if the attribute does not exist, unless ``raising`` is set to False."
msgstr "属性が存在しない場合、``raising`` が False に設定されていない限り、:class:`AttributeError` が発生します。"

#: _pytest.monkeypatch.MonkeyPatch.setattr:25 of
msgid "**Where to patch**"
msgstr "**どこにパッチを当てるか**"

#: _pytest.monkeypatch.MonkeyPatch.setattr:27 of
msgid "``monkeypatch.setattr`` works by (temporarily) changing the object that a name points to with another one. There can be many names pointing to any individual object, so for patching to work you must ensure that you patch the name used by the system under test."
msgstr "``monkeypatch.setattr`` は、名前が指すオブジェクトを別のオブジェクトに (一時的に) 変更することで機能します。 任意の個々のオブジェクトを指す名前は多数存在する可能性があるため、パッチが機能するためには、テスト対象のシステムが使用する名前をパッチする必要があります。"

#: _pytest.monkeypatch.MonkeyPatch.setattr:31 of
msgid "See the section :ref:`Where to patch <python:where-to-patch>` in the :mod:`unittest.mock` docs for a complete explanation, which is meant for :func:`unittest.mock.patch` but applies to ``monkeypatch.setattr`` as well."
msgstr ":func:`unittest.mock.patch` 用に書かれていますが、``monkeypatch.setattr`` にも適用される完全な説明については、:mod:`unittest.mock` ドキュメントのセクション :ref:`Where to patch <python:where-to-patch>` を参照してください。"

#: _pytest.monkeypatch.MonkeyPatch.delattr:1 of
msgid "Delete attribute ``name`` from ``target``."
msgstr "``target`` から属性 ``name`` を削除します。"

#: _pytest.monkeypatch.MonkeyPatch.delattr:3 of
msgid "If no ``name`` is specified and ``target`` is a string it will be interpreted as a dotted import path with the last part being the attribute name."
msgstr "``name`` が指定されておらず、``target`` が文字列の場合、それはドットで区切られたインポートパスとして解釈され、最後の部分が属性名になります。"

#: _pytest.monkeypatch.MonkeyPatch.delattr:7 of
msgid "Raises AttributeError it the attribute does not exist, unless ``raising`` is set to False."
msgstr "属性が存在しない場合、``raising`` が False に設定されていない限り、AttributeError が発生します。"

#: _pytest.monkeypatch.MonkeyPatch.setitem:1 of
msgid "Set dictionary entry ``name`` to value."
msgstr "辞書エントリ ``name`` に値を設定します。"

#: _pytest.monkeypatch.MonkeyPatch.delitem:1 of
msgid "Delete ``name`` from dict."
msgstr "辞書から ``name`` を削除します。"

#: _pytest.monkeypatch.MonkeyPatch.delitem:3 of
msgid "Raises ``KeyError`` if it doesn't exist, unless ``raising`` is set to False."
msgstr "存在しない場合、``raising`` が False に設定されていない限り、``KeyError`` が発生します。"

#: _pytest.monkeypatch.MonkeyPatch.setenv:1 of
msgid "Set environment variable ``name`` to ``value``."
msgstr "環境変数 ``name`` に ``value`` を設定します。"

#: _pytest.monkeypatch.MonkeyPatch.setenv:3 of
msgid "If ``prepend`` is a character, read the current environment variable value and prepend the ``value`` adjoined with the ``prepend`` character."
msgstr "``prepend`` が文字の場合、現在の環境変数の値を読み取り、``prepend`` 文字で結合された ``value`` を前に追加します。"

#: _pytest.monkeypatch.MonkeyPatch.delenv:1 of
msgid "Delete ``name`` from the environment."
msgstr "環境から ``name`` を削除します。"

#: _pytest.monkeypatch.MonkeyPatch.delenv:3 of
msgid "Raises ``KeyError`` if it does not exist, unless ``raising`` is set to False."
msgstr "存在しない場合、``raising`` が False に設定されていない限り、``KeyError`` が発生します。"

#: _pytest.monkeypatch.MonkeyPatch.syspath_prepend:1 of
msgid "Prepend ``path`` to ``sys.path`` list of import locations."
msgstr "インポート場所の ``sys.path`` リストに ``path`` を前に追加します。"

#: _pytest.monkeypatch.MonkeyPatch.chdir:1 of
msgid "Change the current working directory to the specified path."
msgstr "現在の作業ディレクトリを指定されたパスに変更します。"

#: _pytest.monkeypatch.MonkeyPatch.chdir:3 of
msgid "The path to change into."
msgstr "変更するパス。"

#: _pytest.monkeypatch.MonkeyPatch.undo:1 of
msgid "Undo previous changes."
msgstr "以前の変更を元に戻します。"

#: _pytest.monkeypatch.MonkeyPatch.undo:3 of
msgid "This call consumes the undo stack. Calling it a second time has no effect unless you do more monkeypatching after the undo call."
msgstr "この呼び出しは元に戻すスタックを消費します。 元に戻す呼び出しの後にさらにモンキーパッチを行わない限り、2 回目の呼び出しは効果がありません。"

#: _pytest.monkeypatch.MonkeyPatch.undo:6 of
msgid "There is generally no need to call `undo()`, since it is called automatically during tear-down."
msgstr "通常、`undo()` を呼び出す必要はありません。 ティアダウン中に自動的に呼び出されます。"

#: _pytest.monkeypatch.MonkeyPatch.undo:10 of
msgid "The same `monkeypatch` fixture is used across a single test function invocation. If `monkeypatch` is used both by the test function itself and one of the test fixtures, calling `undo()` will undo all of the changes made in both functions."
msgstr "同じ `monkeypatch` フィクスチャが単一のテスト関数呼び出し全体で使用されます。 テスト関数自体とテストフィクスチャの両方で `monkeypatch` が使用される場合、`undo()` を呼び出すと、両方の関数で行われたすべての変更が元に戻されます。"

#: _pytest.monkeypatch.MonkeyPatch.undo:16 of
msgid "Prefer to use :meth:`context() <pytest.MonkeyPatch.context>` instead."
msgstr "代わりに :meth:`context() <pytest.MonkeyPatch.context>` を使用することをお勧めします。"

#: ../../reference/reference.rst:465
msgid "pytestconfig"
msgstr "pytestconfig"

#: _pytest.fixtures.pytestconfig:1 of
msgid "Session-scoped fixture that returns the session's :class:`pytest.Config` object."
msgstr "セッションの :class:`pytest.Config` オブジェクトを返すセッションスコープのフィクスチャ。"

#: ../../reference/reference.rst:473
msgid "pytester"
msgstr "pytester"

#: ../../reference/reference.rst:477
msgid "Provides a :class:`~pytest.Pytester` instance that can be used to run and test pytest itself."
msgstr "pytest 自体を実行およびテストするために使用できる :class:`~pytest.Pytester` インスタンスを提供します。"

#: ../../reference/reference.rst:479
msgid "It provides an empty directory where pytest can be executed in isolation, and contains facilities to write tests, configuration files, and match against expected output."
msgstr "pytest を隔離して実行できる空のディレクトリを提供し、テスト、設定ファイルの作成、および予想される出力との一致を行うための機能を含みます。"

#: ../../reference/reference.rst:482
msgid "To use it, include in your topmost ``conftest.py`` file:"
msgstr "使用するには、最上位の ``conftest.py`` ファイルに含めます:"

#: _pytest.pytester.Pytester:1 of
msgid "Facilities to write tests/configuration files, execute pytest in isolation, and match against expected output, perfect for black-box testing of pytest plugins."
msgstr "pytest プラグインのブラックボックステストに最適な、テスト/設定ファイルの作成、pytest の隔離実行、および予想される出力との一致を行うための機能。"

#: _pytest.pytester.Pytester:4 of
msgid "It attempts to isolate the test run from external factors as much as possible, modifying the current working directory to :attr:`path` and environment variables during initialization."
msgstr "外部要因からテスト実行をできるだけ隔離し、初期化中に現在の作業ディレクトリを :attr:`path` に変更し、環境変数を変更します。"

#: ../../../../docstring of pytest.Pytester.plugins:1
msgid "A list of plugins to use with :py:meth:`parseconfig` and :py:meth:`runpytest`.  Initially this is an empty list but plugins can be added to the list.  The type of items to add to the list depends on the method using them so refer to them for details."
msgstr "プラグインを使用するためのリスト :py:meth:`parseconfig` および :py:meth:`runpytest`。 初期状態ではこれは空のリストですが、プラグインをリストに追加できます。 使用するメソッドによって追加するアイテムのタイプが異なるため、詳細についてはそれらを参照してください。"

#: of pytest.Pytester.path:1
msgid "Temporary directory path used to create files/run tests from, etc."
msgstr "ファイル/テストの作成に使用される一時ディレクトリパスなど。"

#: _pytest.pytester.Pytester.make_hook_recorder:1 of
msgid "Create a new :class:`HookRecorder` for a :class:`PytestPluginManager`."
msgstr ":class:`PytestPluginManager` のための新しい :class:`HookRecorder` を作成します。"

#: _pytest.pytester.Pytester.chdir:1 of
msgid "Cd into the temporary directory."
msgstr "一時ディレクトリに移動します。"

#: _pytest.pytester.Pytester.chdir:3 of
msgid "This is done automatically upon instantiation."
msgstr "これはインスタンス化時に自動的に行われます。"

#: _pytest.pytester.Pytester.makefile:1 of
msgid "Create new text file(s) in the test directory."
msgstr "テストディレクトリに新しいテキストファイルを作成します。"

#: _pytest.pytester.Pytester.makefile:3 of
msgid "The extension the file(s) should use, including the dot, e.g. `.py`."
msgstr "ファイルが使用する拡張子 (ドットを含む)、例: `.py`。"

#: _pytest.pytester.Pytester.makefile:5 of
msgid "All args are treated as strings and joined using newlines. The result is written as contents to the file.  The name of the file is based on the test function requesting this fixture."
msgstr "すべての引数は文字列として扱われ、改行で結合されます。 結果はファイルの内容として書き込まれます。 ファイルの名前はこのフィクスチャを要求するテスト関数に基づいています。"

#: _pytest.pytester.Pytester.makefile:9 of
msgid "Each keyword is the name of a file, while the value of it will be written as contents of the file."
msgstr "各キーワードはファイルの名前であり、その値がファイルの内容として書き込まれます。"

#: _pytest.pytester.Pytester.makefile:12 of
msgid "The first created file."
msgstr "最初に作成されたファイル。"

#: _pytest.pytester.Pytester.makefile:15 _pytest.pytester.Pytester.makepyfile:6
#: _pytest.pytester.Pytester.maketxtfile:6 of
msgid "Examples:"
msgstr "例:"

#: _pytest.pytester.Pytester.makefile:23 of
msgid "To create binary files, use :meth:`pathlib.Path.write_bytes` directly:"
msgstr "バイナリファイルを作成するには、:meth:`pathlib.Path.write_bytes` を直接使用します:"

#: _pytest.pytester.Pytester.makeconftest:1 of
msgid "Write a conftest.py file."
msgstr "conftest.py ファイルを書き込みます。"

#: _pytest.pytester.Pytester.makeconftest:3 _pytest.pytester.Pytester.makeini:3
#: _pytest.pytester.Pytester.makepyprojecttoml:3 of
msgid "The contents."
msgstr "内容。"

#: _pytest.pytester.Pytester.makeconftest:4 of
msgid "The conftest.py file."
msgstr "conftest.py ファイル。"

#: _pytest.pytester.Pytester.makeini:1 of
msgid "Write a tox.ini file."
msgstr "tox.ini ファイルを書き込みます。"

#: _pytest.pytester.Pytester.makeini:4 of
msgid "The tox.ini file."
msgstr "tox.ini ファイル。"

#: _pytest.pytester.Pytester.getinicfg:1 of
msgid "Return the pytest section from the tox.ini config file."
msgstr "tox.ini 設定ファイルから pytest セクションを返します。"

#: _pytest.pytester.Pytester.makepyprojecttoml:1 of
msgid "Write a pyproject.toml file."
msgstr "pyproject.toml ファイルを書き込みます。"

#: _pytest.pytester.Pytester.makepyprojecttoml:4 of
msgid "The pyproject.ini file."
msgstr "pyproject.ini ファイル。"

#: _pytest.pytester.Pytester.makepyfile:1 of
msgid "Shortcut for .makefile() with a .py extension."
msgstr ".py 拡張子を持つ .makefile() のショートカット。"

#: _pytest.pytester.Pytester.makepyfile:3 of
msgid "Defaults to the test name with a '.py' extension, e.g test_foobar.py, overwriting existing files."
msgstr "デフォルトでは、拡張子 '.py' を持つテスト名 (例: test_foobar.py) になり、既存のファイルを上書きします。"

#: _pytest.pytester.Pytester.maketxtfile:1 of
msgid "Shortcut for .makefile() with a .txt extension."
msgstr ".txt 拡張子を持つ .makefile() のショートカット。"

#: _pytest.pytester.Pytester.maketxtfile:3 of
msgid "Defaults to the test name with a '.txt' extension, e.g test_foobar.txt, overwriting existing files."
msgstr "デフォルトでは、拡張子 '.txt' を持つテスト名 (例: test_foobar.txt) になり、既存のファイルを上書きします。"

#: _pytest.pytester.Pytester.syspathinsert:1 of
msgid "Prepend a directory to sys.path, defaults to :attr:`path`."
msgstr "ディレクトリを sys.path に前に追加します。 デフォルトは :attr:`path`。"

#: _pytest.pytester.Pytester.syspathinsert:3 of
msgid "This is undone automatically when this object dies at the end of each test."
msgstr "これは各テストの終了時にこのオブジェクトが破棄されると自動的に元に戻されます。"

#: _pytest.pytester.Pytester.syspathinsert:6 of
msgid "The path."
msgstr "パス。"

#: _pytest.pytester.Pytester.mkdir:1 of
msgid "Create a new (sub)directory."
msgstr "新しい (サブ) ディレクトリを作成します。"

#: _pytest.pytester.Pytester.mkdir:3 of
msgid "The name of the directory, relative to the pytester path."
msgstr "pytester パスに対するディレクトリの名前。"

#: _pytest.pytester.Pytester.mkdir:5 of
msgid "The created directory."
msgstr "作成されたディレクトリ。"

#: _pytest.pytester.Pytester.mkpydir:1 of
msgid "Create a new python package."
msgstr "新しい Python パッケージを作成します。"

#: _pytest.pytester.Pytester.mkpydir:3 of
msgid "This creates a (sub)directory with an empty ``__init__.py`` file so it gets recognised as a Python package."
msgstr "これにより、空の ``__init__.py`` ファイルを持つ (サブ) ディレクトリが作成され、Python パッケージとして認識されます。"

#: _pytest.pytester.Pytester.copy_example:1 of
msgid "Copy file from project's directory into the testdir."
msgstr "プロジェクトのディレクトリからテストディレクトリにファイルをコピーします。"

#: _pytest.pytester.Pytester.copy_example:3 of
msgid "The name of the file to copy."
msgstr "コピーするファイルの名前。"

#: _pytest.pytester.Pytester.copy_example:5 of
msgid "Path to the copied directory (inside ``self.path``)."
msgstr "コピーされたディレクトリへのパス (``self.path`` 内)。"

#: _pytest.pytester.Pytester.getnode:1 of
msgid "Get the collection node of a file."
msgstr "ファイルのコレクションノードを取得します。"

#: _pytest.pytester.Pytester.getnode:3 of
msgid "A pytest config. See :py:meth:`parseconfig` and :py:meth:`parseconfigure` for creating it."
msgstr "pytest 設定。 作成方法については :py:meth:`parseconfig` および :py:meth:`parseconfigure` を参照してください。"

#: _pytest.pytester.Pytester.getnode:6 _pytest.pytester.Pytester.getpathnode:6
#: of
msgid "Path to the file."
msgstr "ファイルへのパス。"

#: _pytest.pytester.Pytester.getnode:8 _pytest.pytester.Pytester.getpathnode:8
#: of
msgid "The node."
msgstr "ノード。"

#: _pytest.pytester.Pytester.getpathnode:1 of
msgid "Return the collection node of a file."
msgstr "ファイルのコレクションノードを返します。"

#: _pytest.pytester.Pytester.getpathnode:3 of
msgid "This is like :py:meth:`getnode` but uses :py:meth:`parseconfigure` to create the (configured) pytest Config instance."
msgstr "これは :py:meth:`getnode` に似ていますが、(設定された) pytest Config インスタンスを作成するために :py:meth:`parseconfigure` を使用します。"

#: _pytest.pytester.Pytester.genitems:1 of
msgid "Generate all test items from a collection node."
msgstr "コレクションノードからすべてのテストアイテムを生成します。"

#: _pytest.pytester.Pytester.genitems:3 of
msgid "This recurses into the collection node and returns a list of all the test items contained within."
msgstr "これによりコレクションノードが再帰的に処理され、その中に含まれるすべてのテストアイテムのリストが返されます。"

#: _pytest.pytester.Pytester.genitems:6 of
msgid "The collection nodes."
msgstr "コレクションノード。"

#: _pytest.pytester.Pytester.genitems:8 of
msgid "The collected items."
msgstr "収集されたアイテム。"

#: _pytest.pytester.Pytester.runitem:1 of
msgid "Run the \"test_func\" Item."
msgstr "\"test_func\" アイテムを実行します。"

#: _pytest.pytester.Pytester.runitem:3 of
msgid "The calling test instance (class containing the test method) must provide a ``.getrunner()`` method which should return a runner which can run the test protocol for a single item, e.g. ``_pytest.runner.runtestprotocol``."
msgstr "呼び出し元のテストインスタンス (テストメソッドを含むクラス) は、単一のアイテムのテストプロトコルを実行できるランナーを返す ``.getrunner()`` メソッドを提供する必要があります。 例: ``_pytest.runner.runtestprotocol``。"

#: _pytest.pytester.Pytester.inline_runsource:1 of
msgid "Run a test module in process using ``pytest.main()``."
msgstr "``pytest.main()`` を使用してプロセス内でテストモジュールを実行します。"

#: _pytest.pytester.Pytester.inline_runsource:3 of
msgid "This run writes \"source\" into a temporary file and runs ``pytest.main()`` on it, returning a :py:class:`HookRecorder` instance for the result."
msgstr "この実行は \"source\" を一時ファイルに書き込み、``pytest.main()`` を実行し、その結果の :py:class:`HookRecorder` インスタンスを返します。"

#: _pytest.pytester.Pytester.inline_runsource:7 of
msgid "The source code of the test module."
msgstr "テストモジュールのソースコード。"

#: _pytest.pytester.Pytester.inline_runsource:8 of
msgid "Any extra command line arguments to use."
msgstr "使用する追加のコマンドライン引数。"

#: _pytest.pytester.Pytester.inline_genitems:1 of
msgid "Run ``pytest.main(['--collect-only'])`` in-process."
msgstr "プロセス内で ``pytest.main(['--collect-only'])`` を実行します。"

#: _pytest.pytester.Pytester.inline_genitems:3 of
msgid "Runs the :py:func:`pytest.main` function to run all of pytest inside the test process itself like :py:meth:`inline_run`, but returns a tuple of the collected items and a :py:class:`HookRecorder` instance."
msgstr ":py:meth:`inline_run` のように、テストプロセス内で pytest 全体を実行するために :py:func:`pytest.main` 関数を実行しますが、収集されたアイテムのタプルと :py:class:`HookRecorder` インスタンスを返します。"

#: _pytest.pytester.Pytester.inline_run:1 of
msgid "Run ``pytest.main()`` in-process, returning a HookRecorder."
msgstr "プロセス内で ``pytest.main()`` を実行し、HookRecorder を返します。"

#: _pytest.pytester.Pytester.inline_run:3 of
msgid "Runs the :py:func:`pytest.main` function to run all of pytest inside the test process itself.  This means it can return a :py:class:`HookRecorder` instance which gives more detailed results from that run than can be done by matching stdout/stderr from :py:meth:`runpytest`."
msgstr ":py:func:`pytest.main` 関数を実行して、テストプロセス内で pytest 全体を実行します。 これにより、:py:class:`HookRecorder` インスタンスが返され、その実行からの結果が :py:meth:`runpytest` からの stdout/stderr の一致よりも詳細になります。"

#: _pytest.pytester.Pytester.inline_run:9 of
msgid "Command line arguments to pass to :py:func:`pytest.main`."
msgstr "コマンドライン引数を :py:func:`pytest.main` に渡します。"

#: _pytest.pytester.Pytester.inline_run:11 of
msgid "Extra plugin instances the ``pytest.main()`` instance should use."
msgstr "``pytest.main()`` インスタンスが使用する追加のプラグインインスタンス。"

#: _pytest.pytester.Pytester.inline_run:13 of
msgid "Typically we reraise keyboard interrupts from the child run. If True, the KeyboardInterrupt exception is captured."
msgstr "通常、子プロセスの実行からキーボード割り込みを再発生させます。 True の場合、KeyboardInterrupt 例外がキャプチャされます。"

#: _pytest.pytester.Pytester.runpytest_inprocess:1 of
msgid "Return result of running pytest in-process, providing a similar interface to what self.runpytest() provides."
msgstr "pytest をプロセス内で実行した結果を返し、self.runpytest() が提供するインターフェースに似ています。"

#: _pytest.pytester.Pytester.runpytest:1 of
msgid "Run pytest inline or in a subprocess, depending on the command line option \"--runpytest\" and return a :py:class:`~pytest.RunResult`."
msgstr "コマンドラインオプション \"--runpytest\" に応じて、pytest をインラインまたはサブプロセスで実行し、:py:class:`~pytest.RunResult` を返します。"

#: _pytest.pytester.Pytester.parseconfig:1 of
msgid "Return a new pytest :class:`pytest.Config` instance from given commandline args."
msgstr "指定されたコマンドライン引数から新しい pytest :class:`pytest.Config` インスタンスを返します。"

#: _pytest.pytester.Pytester.parseconfig:4 of
msgid "This invokes the pytest bootstrapping code in _pytest.config to create a new :py:class:`pytest.PytestPluginManager` and call the :hook:`pytest_cmdline_parse` hook to create a new :class:`pytest.Config` instance."
msgstr "これにより、_pytest.config の pytest ブートストラップコードが呼び出され、新しい :py:class:`pytest.PytestPluginManager` が作成され、:hook:`pytest_cmdline_parse` フックが呼び出されて新しい :class:`pytest.Config` インスタンスが作成されます。"

#: _pytest.pytester.Pytester.parseconfig:9 of
msgid "If :attr:`plugins` has been populated they should be plugin modules to be registered with the plugin manager."
msgstr ":attr:`plugins` が設定されている場合、それらはプラグインマネージャーに登録されるプラグインモジュールである必要があります。"

#: _pytest.pytester.Pytester.parseconfigure:1 of
msgid "Return a new pytest configured Config instance."
msgstr "新しい pytest 設定済み Config インスタンスを返します。"

#: _pytest.pytester.Pytester.parseconfigure:3 of
msgid "Returns a new :py:class:`pytest.Config` instance like :py:meth:`parseconfig`, but also calls the :hook:`pytest_configure` hook."
msgstr ":py:meth:`parseconfig` のように新しい :py:class:`pytest.Config` インスタンスを返しますが、:hook:`pytest_configure` フックも呼び出します。"

#: _pytest.pytester.Pytester.getitem:1 of
msgid "Return the test item for a test function."
msgstr "テスト関数のテストアイテムを返します。"

#: _pytest.pytester.Pytester.getitem:3 of
msgid "Writes the source to a python file and runs pytest's collection on the resulting module, returning the test item for the requested function name."
msgstr "ソースを Python ファイルに書き込み、結果のモジュールで pytest のコレクションを実行し、要求された関数名のテストアイテムを返します。"

#: _pytest.pytester.Pytester.getitem:7 of
msgid "The module source."
msgstr "モジュールソース。"

#: _pytest.pytester.Pytester.getitem:9 of
msgid "The name of the test function for which to return a test item."
msgstr "テストアイテムを返すテスト関数の名前。"

#: _pytest.pytester.Pytester.getitem:11 of
msgid "The test item."
msgstr "テストアイテム。"

#: _pytest.pytester.Pytester.getitems:1 of
msgid "Return all test items collected from the module."
msgstr "モジュールから収集されたすべてのテストアイテムを返します。"

#: _pytest.pytester.Pytester.getitems:3 of
msgid "Writes the source to a Python file and runs pytest's collection on the resulting module, returning all test items contained within."
msgstr "ソースを Python ファイルに書き込み、結果のモジュールで pytest のコレクションを実行し、その中に含まれるすべてのテストアイテムを返します。"

#: _pytest.pytester.Pytester.getmodulecol:1 of
msgid "Return the module collection node for ``source``."
msgstr "``source`` のモジュールコレクションノードを返します。"

#: _pytest.pytester.Pytester.getmodulecol:3 of
msgid "Writes ``source`` to a file using :py:meth:`makepyfile` and then runs the pytest collection on it, returning the collection node for the test module."
msgstr "``source`` を :py:meth:`makepyfile` を使用してファイルに書き込み、その後 pytest のコレクションを実行し、テストモジュールのコレクションノードを返します。"

#: _pytest.pytester.Pytester.getmodulecol:7 of
msgid "The source code of the module to collect."
msgstr "収集するモジュールのソースコード。"

#: _pytest.pytester.Pytester.getmodulecol:10 of
msgid "Any extra arguments to pass to :py:meth:`parseconfigure`."
msgstr ":py:meth:`parseconfigure` に渡す追加の引数。"

#: _pytest.pytester.Pytester.getmodulecol:13 of
msgid "Whether to also write an ``__init__.py`` file to the same directory to ensure it is a package."
msgstr "パッケージであることを保証するために、同じディレクトリに ``__init__.py`` ファイルも書き込むかどうか。"

#: _pytest.pytester.Pytester.collect_by_name:1 of
msgid "Return the collection node for name from the module collection."
msgstr "モジュールコレクションから名前のコレクションノードを返します。"

#: _pytest.pytester.Pytester.collect_by_name:3 of
msgid "Searches a module collection node for a collection node matching the given name."
msgstr "指定された名前に一致するコレクションノードをモジュールコレクションノードから検索します。"

#: _pytest.pytester.Pytester.collect_by_name:6 of
msgid "A module collection node; see :py:meth:`getmodulecol`."
msgstr "モジュールコレクションノード; :py:meth:`getmodulecol` を参照してください。"

#: _pytest.pytester.Pytester.collect_by_name:7 of
msgid "The name of the node to return."
msgstr "返すノードの名前。"

#: _pytest.pytester.Pytester.popen:1 of
msgid "Invoke :py:class:`subprocess.Popen`."
msgstr ":py:class:`subprocess.Popen` を呼び出します。"

#: _pytest.pytester.Pytester.popen:3 of
msgid "Calls :py:class:`subprocess.Popen` making sure the current working directory is in ``PYTHONPATH``."
msgstr "現在の作業ディレクトリが ``PYTHONPATH`` に含まれていることを確認して :py:class:`subprocess.Popen` を呼び出します。"

#: _pytest.pytester.Pytester.popen:6 of
msgid "You probably want to use :py:meth:`run` instead."
msgstr "代わりに :py:meth:`run` を使用することをお勧めします。"

#: _pytest.pytester.Pytester.run:1 of
msgid "Run a command with arguments."
msgstr "引数付きでコマンドを実行します。"

#: _pytest.pytester.Pytester.run:3 of
msgid "Run a process using :py:class:`subprocess.Popen` saving the stdout and stderr."
msgstr ":py:class:`subprocess.Popen` を使用してプロセスを実行し、stdout と stderr を保存します。"

#: _pytest.pytester.Pytester.run:6 of
msgid "The sequence of arguments to pass to :py:class:`subprocess.Popen`, with path-like objects being converted to :py:class:`str` automatically."
msgstr ":py:class:`subprocess.Popen` に渡す引数のシーケンス。 パスのようなオブジェクトは自動的に :py:class:`str` に変換されます。"

#: _pytest.pytester.Pytester.run:10
#: _pytest.pytester.Pytester.runpytest_subprocess:11 of
msgid "The period in seconds after which to timeout and raise :py:class:`Pytester.TimeoutExpired`."
msgstr "タイムアウト後に :py:class:`Pytester.TimeoutExpired` を発生させる秒数。"

#: _pytest.pytester.Pytester.run:13 of
msgid "Optional standard input.  - If it is ``CLOSE_STDIN`` (Default), then this method calls   :py:class:`subprocess.Popen` with ``stdin=subprocess.PIPE``, and   the standard input is closed immediately after the new command is   started.  - If it is of type :py:class:`bytes`, these bytes are sent to the   standard input of the command.  - Otherwise, it is passed through to :py:class:`subprocess.Popen`.   For further information in this case, consult the document of the   ``stdin`` parameter in :py:class:`subprocess.Popen`."
msgstr "オプションの標準入力。 - ``CLOSE_STDIN`` (デフォルト) の場合、このメソッドは ``stdin=subprocess.PIPE`` で :py:class:`subprocess.Popen` を呼び出し、新しいコマンドが開始された直後に標準入力を閉じます。 - :py:class:`bytes` 型の場合、これらのバイトがコマンドの標準入力に送信されます。 - それ以外の場合は、:py:class:`subprocess.Popen` に渡されます。 この場合の詳細については、:py:class:`subprocess.Popen` の ``stdin`` パラメータのドキュメントを参照してください。"

#: _pytest.pytester.Pytester.run:14 of
msgid "Optional standard input."
msgstr "オプションの標準入力。"

#: _pytest.pytester.Pytester.run:16 of
msgid "If it is ``CLOSE_STDIN`` (Default), then this method calls :py:class:`subprocess.Popen` with ``stdin=subprocess.PIPE``, and the standard input is closed immediately after the new command is started."
msgstr "``CLOSE_STDIN`` (デフォルト) の場合、このメソッドは ``stdin=subprocess.PIPE`` で :py:class:`subprocess.Popen` を呼び出し、新しいコマンドが開始された直後に標準入力を閉じます。"

#: _pytest.pytester.Pytester.run:21 of
msgid "If it is of type :py:class:`bytes`, these bytes are sent to the standard input of the command."
msgstr ":py:class:`bytes` 型の場合、これらのバイトがコマンドの標準入力に送信されます。"

#: _pytest.pytester.Pytester.run:24 of
msgid "Otherwise, it is passed through to :py:class:`subprocess.Popen`. For further information in this case, consult the document of the ``stdin`` parameter in :py:class:`subprocess.Popen`."
msgstr "それ以外の場合は、:py:class:`subprocess.Popen` に渡されます。 この場合の詳細については、:py:class:`subprocess.Popen` の ``stdin`` パラメータのドキュメントを参照してください。"

#: _pytest.pytester.Pytester.run:28
#: _pytest.pytester.Pytester.runpytest_subprocess:14 of
msgid "The result."
msgstr "結果。"

#: _pytest.pytester.Pytester.runpython:1 of
msgid "Run a python script using sys.executable as interpreter."
msgstr "sys.executable をインタープリターとして使用して Python スクリプトを実行します。"

#: _pytest.pytester.Pytester.runpython_c:1 of
msgid "Run ``python -c \"command\"``."
msgstr "``python -c \"command\"`` を実行します。"

#: _pytest.pytester.Pytester.runpytest_subprocess:1 of
msgid "Run pytest as a subprocess with given arguments."
msgstr "指定された引数で pytest をサブプロセスとして実行します。"

#: _pytest.pytester.Pytester.runpytest_subprocess:3 of
msgid "Any plugins added to the :py:attr:`plugins` list will be added using the ``-p`` command line option.  Additionally ``--basetemp`` is used to put any temporary files and directories in a numbered directory prefixed with \"runpytest-\" to not conflict with the normal numbered pytest location for temporary files and directories."
msgstr ":py:attr:`plugins` リストに追加されたプラグインは、``-p`` コマンドラインオプションを使用して追加されます。 さらに、``--basetemp`` を使用して、一時ファイルやディレクトリを \"runpytest-\" というプレフィックスが付いた番号付きディレクトリに配置し、通常の番号付き pytest の一時ファイルやディレクトリの場所と競合しないようにします。"

#: _pytest.pytester.Pytester.runpytest_subprocess:9 of
msgid "The sequence of arguments to pass to the pytest subprocess."
msgstr "pytest サブプロセスに渡す引数のシーケンス。"

#: _pytest.pytester.Pytester.spawn_pytest:1 of
msgid "Run pytest using pexpect."
msgstr "pexpect を使用して pytest を実行します。"

#: _pytest.pytester.Pytester.spawn_pytest:3 of
msgid "This makes sure to use the right pytest and sets up the temporary directory locations."
msgstr "これにより、正しい pytest を使用し、一時ディレクトリの場所を設定します。"

#: _pytest.pytester.Pytester.spawn:3 _pytest.pytester.Pytester.spawn_pytest:6
#: of
msgid "The pexpect child is returned."
msgstr "pexpect の子プロセスが返されます。"

#: _pytest.pytester.Pytester.spawn:1 of
msgid "Run a command using pexpect."
msgstr "pexpect を使用してコマンドを実行します。"

#: _pytest.pytester.RunResult:1 of
msgid "The result of running a command from :class:`~pytest.Pytester`."
msgstr ":class:`~pytest.Pytester` からコマンドを実行した結果。"

#: ../../../../docstring of pytest.RunResult.ret:1
msgid "The return value."
msgstr "戻り値。"

#: ../../../../docstring of pytest.RunResult.outlines:1
msgid "List of lines captured from stdout."
msgstr "stdout からキャプチャされた行のリスト。"

#: ../../../../docstring of pytest.RunResult.errlines:1
msgid "List of lines captured from stderr."
msgstr "stderr からキャプチャされた行のリスト。"

#: ../../../../docstring of pytest.RunResult.stdout:1
msgid ":class:`~pytest.LineMatcher` of stdout."
msgstr "stdout の :class:`~pytest.LineMatcher`。"

#: ../../../../docstring of pytest.RunResult.stdout:3
msgid "Use e.g. :func:`str(stdout) <pytest.LineMatcher.__str__()>` to reconstruct stdout, or the commonly used :func:`stdout.fnmatch_lines() <pytest.LineMatcher.fnmatch_lines()>` method."
msgstr "例として :func:`str(stdout) <pytest.LineMatcher.__str__()>` を使用して stdout を再構築するか、一般的に使用される :func:`stdout.fnmatch_lines() <pytest.LineMatcher.fnmatch_lines()>` メソッドを使用します。"

#: ../../../../docstring of pytest.RunResult.stderr:1
msgid ":class:`~pytest.LineMatcher` of stderr."
msgstr "stderr の :class:`~pytest.LineMatcher`。"

#: ../../../../docstring of pytest.RunResult.duration:1
msgid "Duration in seconds."
msgstr "秒単位の期間。"

#: _pytest.pytester.RunResult.parseoutcomes:1 of
msgid "Return a dictionary of outcome noun -> count from parsing the terminal output that the test process produced."
msgstr "テストプロセスが生成したターミナル出力を解析して、結果の名詞 -> カウントの辞書を返します。"

#: _pytest.pytester.RunResult.parseoutcomes:4 of
msgid "The returned nouns will always be in plural form::"
msgstr "返される名詞は常に複数形になります::"

#: _pytest.pytester.RunResult.parse_summary_nouns:7
#: _pytest.pytester.RunResult.parseoutcomes:8 of
#, python-brace-format
msgid "Will return ``{\"failed\": 1, \"passed\": 1, \"warnings\": 1, \"errors\": 1}``."
msgstr "``{\"failed\": 1, \"passed\": 1, \"warnings\": 1, \"errors\": 1}`` を返します。"

#: _pytest.pytester.RunResult.parse_summary_nouns:1 of
msgid "Extract the nouns from a pytest terminal summary line."
msgstr "pytest のターミナルサマリー行から名詞を抽出します。"

#: _pytest.pytester.RunResult.parse_summary_nouns:3 of
msgid "It always returns the plural noun for consistency::"
msgstr "一貫性のために常に複数形の名詞を返します::"

#: _pytest.pytester.RunResult.assert_outcomes:1 of
msgid "Assert that the specified outcomes appear with the respective numbers (0 means it didn't occur) in the text output from a test run."
msgstr "指定された結果がテスト実行のテキスト出力にそれぞれの数で表示されることをアサートします (0 は発生しなかったことを意味します)。"

#: _pytest.pytester.RunResult.assert_outcomes:4 of
msgid "``warnings`` and ``deselected`` are only checked if not None."
msgstr "``warnings`` と ``deselected`` は None でない場合にのみチェックされます。"

#: _pytest.pytester.LineMatcher:1 of
msgid "Flexible matching of text."
msgstr "テキストの柔軟なマッチング。"

#: _pytest.pytester.LineMatcher:3 of
msgid "This is a convenience class to test large texts like the output of commands."
msgstr "これは、コマンドの出力のような大きなテキストをテストするための便利なクラスです。"

#: _pytest.pytester.LineMatcher:6 of
msgid "The constructor takes a list of lines without their trailing newlines, i.e. ``text.splitlines()``."
msgstr "コンストラクタは、末尾の改行を含まない行のリストを受け取ります。 すなわち、``text.splitlines()``。"

#: _pytest.pytester.LineMatcher.__str__:1 _pytest.pytester.LineMatcher.str:1 of
msgid "Return the entire original text."
msgstr "元のテキスト全体を返します。"

#: _pytest.pytester.LineMatcher.__str__:3 of
msgid "You can use :meth:`str` in older versions."
msgstr "古いバージョンでは :meth:`str` を使用できます。"

#: _pytest.pytester.LineMatcher.fnmatch_lines_random:1 of
msgid "Check lines exist in the output in any order (using :func:`python:fnmatch.fnmatch`)."
msgstr "出力内の行が任意の順序で存在することを確認します (using :func:`python:fnmatch.fnmatch`)。"

#: _pytest.pytester.LineMatcher.re_match_lines_random:1 of
msgid "Check lines exist in the output in any order (using :func:`python:re.match`)."
msgstr "出力に任意の順序で行が存在することを確認します（:func:`python:re.match` を使用）。"

#: _pytest.pytester.LineMatcher.get_lines_after:1 of
msgid "Return all lines following the given line in the text."
msgstr "テキスト内の指定された行の後に続くすべての行を返します。"

#: _pytest.pytester.LineMatcher.get_lines_after:3 of
msgid "The given line can contain glob wildcards."
msgstr "指定された行にはグロブワイルドカードを含めることができます。"

#: _pytest.pytester.LineMatcher.fnmatch_lines:1 of
msgid "Check lines exist in the output (using :func:`python:fnmatch.fnmatch`)."
msgstr "出力に行が存在することを確認します（:func:`python:fnmatch.fnmatch` を使用）。"

#: _pytest.pytester.LineMatcher.fnmatch_lines:3 of
msgid "The argument is a list of lines which have to match and can use glob wildcards.  If they do not match a pytest.fail() is called.  The matches and non-matches are also shown as part of the error message."
msgstr "引数は一致する必要がある行のリストで、グロブワイルドカードを使用できます。 一致しない場合は pytest.fail() が呼び出されます。 一致と不一致はエラーメッセージの一部としても表示されます。"

#: _pytest.pytester.LineMatcher.fnmatch_lines:7 of
msgid "String patterns to match."
msgstr "一致する文字列パターン。"

#: _pytest.pytester.LineMatcher.fnmatch_lines:8 of
msgid "Match lines consecutively?"
msgstr "行を連続して一致させますか？"

#: _pytest.pytester.LineMatcher.re_match_lines:1 of
msgid "Check lines exist in the output (using :func:`python:re.match`)."
msgstr "出力に行が存在することを確認します（:func:`python:re.match` を使用）。"

#: _pytest.pytester.LineMatcher.re_match_lines:3 of
msgid "The argument is a list of lines which have to match using ``re.match``. If they do not match a pytest.fail() is called."
msgstr "引数は ``re.match`` を使用して一致する必要がある行のリストです。 一致しない場合は pytest.fail() が呼び出されます。"

#: _pytest.pytester.LineMatcher.re_match_lines:6 of
msgid "The matches and non-matches are also shown as part of the error message."
msgstr "一致と不一致はエラーメッセージの一部としても表示されます。"

#: _pytest.pytester.LineMatcher.re_match_lines:8 of
msgid "string patterns to match."
msgstr "一致する文字列パターン。"

#: _pytest.pytester.LineMatcher.re_match_lines:9 of
msgid "match lines consecutively?"
msgstr "行を連続して一致させますか？"

#: _pytest.pytester.LineMatcher.no_fnmatch_line:1 of
msgid "Ensure captured lines do not match the given pattern, using ``fnmatch.fnmatch``."
msgstr "``fnmatch.fnmatch`` を使用して、キャプチャされた行が指定されたパターンに一致しないことを確認します。"

#: _pytest.pytester.LineMatcher.no_fnmatch_line:3 of
msgid "The pattern to match lines."
msgstr "行を一致させるパターン。"

#: _pytest.pytester.LineMatcher.no_re_match_line:1 of
msgid "Ensure captured lines do not match the given pattern, using ``re.match``."
msgstr "``re.match`` を使用して、キャプチャされた行が指定されたパターンに一致しないことを確認します。"

#: _pytest.pytester.LineMatcher.no_re_match_line:3 of
msgid "The regular expression to match lines."
msgstr "行を一致させる正規表現。"

#: _pytest.pytester.HookRecorder:1 of
msgid "Record all hooks called in a plugin manager."
msgstr "プラグインマネージャーで呼び出されたすべてのフックを記録します。"

#: _pytest.pytester.HookRecorder:3 of
msgid "Hook recorders are created by :class:`Pytester`."
msgstr "フックレコーダーは :class:`Pytester` によって作成されます。"

#: _pytest.pytester.HookRecorder:5 of
msgid "This wraps all the hook calls in the plugin manager, recording each call before propagating the normal calls."
msgstr "これはプラグインマネージャー内のすべてのフック呼び出しをラップし、通常の呼び出しを伝播する前に各呼び出しを記録します。"

#: _pytest.pytester.HookRecorder.getcalls:1 of
msgid "Get all recorded calls to hooks with the given names (or name)."
msgstr "指定された名前（または名前）のフックへのすべての記録された呼び出しを取得します。"

#: _pytest.pytester.HookRecorder.matchreport:1 of
msgid "Return a testreport whose dotted import path matches."
msgstr "ドットインポートパスが一致するテストレポートを返します。"

#: _pytest.pytester.RecordedHookCall:1 of
msgid "A recorded call to a hook."
msgstr "フックへの記録された呼び出し。"

#: _pytest.pytester.RecordedHookCall:3 of
msgid "The arguments to the hook call are set as attributes. For example:"
msgstr "フック呼び出しの引数は属性として設定されます。 例えば："

#: ../../reference/reference.rst:510
msgid "record_property"
msgstr "record_property"

#: ../../reference/reference.rst:512
msgid "**Tutorial**: :ref:`record_property example`"
msgstr "**チュートリアル**： :ref:`record_property example`"

#: _pytest.junitxml.record_property:1 of
msgid "Add extra properties to the calling test."
msgstr "呼び出しテストに追加のプロパティを追加します。"

#: _pytest.junitxml.record_property:3 of
msgid "User properties become part of the test report and are available to the configured reporters, like JUnit XML."
msgstr "ユーザープロパティはテストレポートの一部となり、JUnit XML のような設定されたレポーターで利用可能です。"

#: _pytest.junitxml.record_property:6 of
msgid "The fixture is callable with ``name, value``. The value is automatically XML-encoded."
msgstr "フィクスチャは ``name, value`` で呼び出し可能です。 値は自動的に XML エンコードされます。"

#: ../../reference/reference.rst:520
msgid "record_testsuite_property"
msgstr "record_testsuite_property"

#: ../../reference/reference.rst:522
msgid "**Tutorial**: :ref:`record_testsuite_property example`"
msgstr "**チュートリアル**： :ref:`record_testsuite_property example`"

#: _pytest.junitxml.record_testsuite_property:1 of
msgid "Record a new ``<property>`` tag as child of the root ``<testsuite>``."
msgstr "新しい ``<property>`` タグをルート ``<testsuite>`` の子として記録します。"

#: _pytest.junitxml.record_testsuite_property:3 of
msgid "This is suitable to writing global information regarding the entire test suite, and is compatible with ``xunit2`` JUnit family."
msgstr "これはテストスイート全体に関するグローバル情報の記録に適しており、``xunit2`` JUnit ファミリーと互換性があります。"

#: _pytest.junitxml.record_testsuite_property:6 of
msgid "This is a ``session``-scoped fixture which is called with ``(name, value)``. Example:"
msgstr "これは ``session`` スコープのフィクスチャで、``(name, value)`` で呼び出されます。 例："

#: _pytest.junitxml.record_testsuite_property:14 of
msgid "The property name."
msgstr "プロパティ名。"

#: _pytest.junitxml.record_testsuite_property:16 of
msgid "The property value. Will be converted to a string."
msgstr "プロパティ値。 文字列に変換されます。"

#: _pytest.junitxml.record_testsuite_property:21 of
msgid "Currently this fixture **does not work** with the `pytest-xdist <https://github.com/pytest-dev/pytest-xdist>`__ plugin. See :issue:`7767` for details."
msgstr "現在、このフィクスチャは `pytest-xdist <https://github.com/pytest-dev/pytest-xdist>`__ プラグインでは **動作しません**。 詳細は :issue:`7767` を参照してください。"

#: ../../reference/reference.rst:530
msgid "recwarn"
msgstr "recwarn"

#: ../../reference/reference.rst:532
msgid "**Tutorial**: :ref:`recwarn`"
msgstr "**チュートリアル**： :ref:`recwarn`"

#: _pytest.recwarn.recwarn:1 of
msgid "Return a :class:`WarningsRecorder` instance that records all warnings emitted by test functions."
msgstr ":class:`WarningsRecorder` インスタンスを返し、テスト関数によって発行されたすべての警告を記録します。"

#: _pytest.recwarn.recwarn:3 of
msgid "See :ref:`warnings` for information on warning categories."
msgstr "警告カテゴリに関する情報は :ref:`warnings` を参照してください。"

#: _pytest.recwarn.WarningsRecorder:1 of
msgid "A context manager to record raised warnings."
msgstr "警告を記録するためのコンテキストマネージャー。"

#: _pytest.recwarn.WarningsRecorder:3 of
msgid "Each recorded warning is an instance of :class:`warnings.WarningMessage`."
msgstr "記録された各警告は :class:`warnings.WarningMessage` のインスタンスです。"

#: _pytest.recwarn.WarningsRecorder:5 of
msgid "Adapted from `warnings.catch_warnings`."
msgstr " `warnings.catch_warnings` から適応されました。"

#: _pytest.recwarn.WarningsRecorder:8 of
msgid "``DeprecationWarning`` and ``PendingDeprecationWarning`` are treated differently; see :ref:`ensuring_function_triggers`."
msgstr "``DeprecationWarning`` と ``PendingDeprecationWarning`` は異なる扱いを受けます。 詳細は :ref:`ensuring_function_triggers` を参照してください。"

#: of pytest.WarningsRecorder.list:1
msgid "The list of recorded warnings."
msgstr "記録された警告のリスト。"

#: _pytest.recwarn.WarningsRecorder.__getitem__:1 of
msgid "Get a recorded warning by index."
msgstr "インデックスで記録された警告を取得します。"

#: _pytest.recwarn.WarningsRecorder.__iter__:1 of
msgid "Iterate through the recorded warnings."
msgstr "記録された警告を反復処理します。"

#: _pytest.recwarn.WarningsRecorder.__len__:1 of
msgid "The number of recorded warnings."
msgstr "記録された警告の数。"

#: _pytest.recwarn.WarningsRecorder.pop:1 of
msgid "Pop the first recorded warning which is an instance of ``cls``, but not an instance of a child class of any other match. Raises ``AssertionError`` if there is no match."
msgstr " ``cls`` のインスタンスである最初の記録された警告をポップしますが、他の一致の子クラスのインスタンスではありません。 一致がない場合は ``AssertionError`` を発生させます。"

#: _pytest.recwarn.WarningsRecorder.clear:1 of
msgid "Clear the list of recorded warnings."
msgstr "記録された警告のリストをクリアします。"

#: ../../reference/reference.rst:545
msgid "request"
msgstr "request"

#: ../../reference/reference.rst:547
msgid "**Example**: :ref:`request example`"
msgstr "**例**： :ref:`request example`"

#: ../../reference/reference.rst:549
msgid "The ``request`` fixture is a special fixture providing information of the requesting test function."
msgstr "``request`` フィクスチャは、要求されたテスト関数の情報を提供する特別なフィクスチャです。"

#: _pytest.fixtures.FixtureRequest:1 of
msgid "The type of the ``request`` fixture."
msgstr "``request`` フィクスチャのタイプ。"

#: _pytest.fixtures.FixtureRequest:3 of
msgid "A request object gives access to the requesting test context and has a ``param`` attribute in case the fixture is parametrized."
msgstr "リクエストオブジェクトは、要求されたテストコンテキストへのアクセスを提供し、フィクスチャがパラメータ化されている場合は ``param`` 属性を持ちます。"

#: ../../../../docstring of pytest.FixtureRequest.fixturename:1
msgid "Fixture for which this request is being performed."
msgstr "このリクエストが実行されているフィクスチャ。"

#: of pytest.FixtureDef.scope:1 pytest.FixtureRequest.scope:1
msgid "Scope string, one of \"function\", \"class\", \"module\", \"package\", \"session\"."
msgstr "スコープ文字列。 \"function\"、\"class\"、\"module\"、\"package\"、\"session\" のいずれか。"

#: of pytest.FixtureRequest.fixturenames:1
msgid "Names of all active fixtures in this request."
msgstr "このリクエスト内のすべてのアクティブなフィクスチャの名前。"

#: of pytest.FixtureRequest.node:1
msgid "Underlying collection node (depends on current request scope)."
msgstr "基礎となるコレクションノード（現在のリクエストスコープに依存）。"

#: of pytest.FixtureRequest.config:1
msgid "The pytest config object associated with this request."
msgstr "このリクエストに関連付けられた pytest 設定オブジェクト。"

#: of pytest.FixtureRequest.function:1
msgid "Test function object if the request has a per-function scope."
msgstr "リクエストが関数ごとのスコープを持つ場合のテスト関数オブジェクト。"

#: of pytest.FixtureRequest.cls:1
msgid "Class (can be None) where the test function was collected."
msgstr "テスト関数が収集されたクラス（None の場合があります）。"

#: of pytest.FixtureRequest.instance:1
msgid "Instance (can be None) on which test function was collected."
msgstr "テスト関数が収集されたインスタンス（None の場合があります）。"

#: of pytest.FixtureRequest.module:1
msgid "Python module object where the test function was collected."
msgstr "テスト関数が収集された Python モジュールオブジェクト。"

#: of pytest.FixtureRequest.path:1
msgid "Path where the test function was collected."
msgstr "テスト関数が収集されたパス。"

#: of pytest.FixtureRequest.keywords:1
msgid "Keywords/markers dictionary for the underlying node."
msgstr "基礎となるノードのキーワード/マーカー辞書。"

#: of pytest.FixtureRequest.session:1
msgid "Pytest session object."
msgstr "Pytest セッションオブジェクト。"

#: _pytest.fixtures.FixtureRequest.addfinalizer:1 of
msgid "Add finalizer/teardown function to be called without arguments after the last test within the requesting test context finished execution."
msgstr "要求されたテストコンテキスト内の最後のテストが実行を終了した後に引数なしで呼び出されるファイナライザ/ティアダウン関数を追加します。"

#: _pytest.fixtures.FixtureRequest.applymarker:1 of
msgid "Apply a marker to a single test function invocation."
msgstr "単一のテスト関数の呼び出しにマーカーを適用します。"

#: _pytest.fixtures.FixtureRequest.applymarker:3 of
msgid "This method is useful if you don't want to have a keyword/marker on all function invocations."
msgstr "このメソッドは、すべての関数呼び出しにキーワード/マーカーを持たせたくない場合に便利です。"

#: _pytest.fixtures.FixtureRequest.applymarker:6 of
msgid "An object created by a call to ``pytest.mark.NAME(...)``."
msgstr "``pytest.mark.NAME(...)`` の呼び出しによって作成されたオブジェクト。"

#: _pytest.fixtures.FixtureRequest.raiseerror:1 of
msgid "Raise a FixtureLookupError exception."
msgstr "FixtureLookupError 例外を発生させます。"

#: _pytest.fixtures.FixtureRequest.raiseerror:3 of
msgid "An optional custom error message."
msgstr "オプションのカスタムエラーメッセージ。"

#: _pytest.fixtures.FixtureRequest.getfixturevalue:1 of
msgid "Dynamically run a named fixture function."
msgstr "名前付きフィクスチャ関数を動的に実行します。"

#: _pytest.fixtures.FixtureRequest.getfixturevalue:3 of
msgid "Declaring fixtures via function argument is recommended where possible. But if you can only decide whether to use another fixture at test setup time, you may use this function to retrieve it inside a fixture or test function body."
msgstr "可能な場合は、関数引数を介してフィクスチャを宣言することをお勧めします。 しかし、テストセットアップ時に別のフィクスチャを使用するかどうかを決定する場合は、この関数を使用してフィクスチャまたはテスト関数本体内でそれを取得できます。"

#: _pytest.fixtures.FixtureRequest.getfixturevalue:8 of
msgid "This method can be used during the test setup phase or the test run phase, but during the test teardown phase a fixture's value may not be available."
msgstr "このメソッドはテストセットアップフェーズまたはテスト実行フェーズ中に使用できますが、テストティアダウンフェーズ中にはフィクスチャの値が利用できない場合があります。"

#: _pytest.fixtures.FixtureRequest.getfixturevalue:12 of
msgid "The fixture name."
msgstr "フィクスチャ名。"

#: _pytest.fixtures.FixtureRequest.getfixturevalue:14 of
msgid "If the given fixture could not be found."
msgstr "指定されたフィクスチャが見つからなかった場合。"

#: ../../reference/reference.rst:558
msgid "testdir"
msgstr "testdir"

#: ../../reference/reference.rst:560
msgid "Identical to :fixture:`pytester`, but provides an instance whose methods return legacy ``py.path.local`` objects instead when applicable."
msgstr ":fixture:`pytester` と同じですが、メソッドが適用可能な場合にレガシー ``py.path.local`` オブジェクトを返すインスタンスを提供します。"

#: ../../reference/reference.rst:563
msgid "New code should avoid using :fixture:`testdir` in favor of :fixture:`pytester`."
msgstr "新しいコードでは、:fixture:`testdir` の使用を避け、:fixture:`pytester` を使用することをお勧めします。"

#: _pytest.legacypath.Testdir:1 of
msgid "Similar to :class:`Pytester`, but this class works with legacy legacy_path objects instead."
msgstr ":class:`Pytester` に似ていますが、このクラスはレガシー legacy_path オブジェクトで動作します。"

#: _pytest.legacypath.Testdir:3 of
msgid "All methods just forward to an internal :class:`Pytester` instance, converting results to `legacy_path` objects as necessary."
msgstr "すべてのメソッドは内部の :class:`Pytester` インスタンスに転送され、必要に応じて結果を `legacy_path` オブジェクトに変換します。"

#: of pytest.Testdir.tmpdir:1
msgid "Temporary directory where tests are executed."
msgstr "テストが実行される一時ディレクトリ。"

#: _pytest.legacypath.Testdir.make_hook_recorder:1 of
msgid "See :meth:`Pytester.make_hook_recorder`."
msgstr ":meth:`Pytester.make_hook_recorder` を参照してください。"

#: _pytest.legacypath.Testdir.chdir:1 of
msgid "See :meth:`Pytester.chdir`."
msgstr ":meth:`Pytester.chdir` を参照してください。"

#: _pytest.legacypath.Testdir.makefile:1 of
msgid "See :meth:`Pytester.makefile`."
msgstr ":meth:`Pytester.makefile` を参照してください。"

#: _pytest.legacypath.Testdir.makeconftest:1 of
msgid "See :meth:`Pytester.makeconftest`."
msgstr ":meth:`Pytester.makeconftest` を参照してください。"

#: _pytest.legacypath.Testdir.makeini:1 of
msgid "See :meth:`Pytester.makeini`."
msgstr ":meth:`Pytester.makeini` を参照してください。"

#: _pytest.legacypath.Testdir.getinicfg:1 of
msgid "See :meth:`Pytester.getinicfg`."
msgstr ":meth:`Pytester.getinicfg` を参照してください。"

#: _pytest.legacypath.Testdir.makepyprojecttoml:1 of
msgid "See :meth:`Pytester.makepyprojecttoml`."
msgstr ":meth:`Pytester.makepyprojecttoml` を参照してください。"

#: _pytest.legacypath.Testdir.makepyfile:1 of
msgid "See :meth:`Pytester.makepyfile`."
msgstr ":meth:`Pytester.makepyfile` を参照してください。"

#: _pytest.legacypath.Testdir.maketxtfile:1 of
msgid "See :meth:`Pytester.maketxtfile`."
msgstr ":meth:`Pytester.maketxtfile` を参照してください。"

#: _pytest.legacypath.Testdir.syspathinsert:1 of
msgid "See :meth:`Pytester.syspathinsert`."
msgstr ":meth:`Pytester.syspathinsert` を参照してください。"

#: _pytest.legacypath.Testdir.mkdir:1 of
msgid "See :meth:`Pytester.mkdir`."
msgstr ":meth:`Pytester.mkdir` を参照してください。"

#: _pytest.legacypath.Testdir.mkpydir:1 of
msgid "See :meth:`Pytester.mkpydir`."
msgstr ":meth:`Pytester.mkpydir` を参照してください。"

#: _pytest.legacypath.Testdir.copy_example:1 of
msgid "See :meth:`Pytester.copy_example`."
msgstr ":meth:`Pytester.copy_example` を参照してください。"

#: _pytest.legacypath.Testdir.getnode:1 of
msgid "See :meth:`Pytester.getnode`."
msgstr ":meth:`Pytester.getnode` を参照してください。"

#: _pytest.legacypath.Testdir.getpathnode:1 of
msgid "See :meth:`Pytester.getpathnode`."
msgstr ":meth:`Pytester.getpathnode` を参照してください。"

#: _pytest.legacypath.Testdir.genitems:1 of
msgid "See :meth:`Pytester.genitems`."
msgstr ":meth:`Pytester.genitems` を参照してください。"

#: _pytest.legacypath.Testdir.runitem:1 of
msgid "See :meth:`Pytester.runitem`."
msgstr ":meth:`Pytester.runitem` を参照してください。"

#: _pytest.legacypath.Testdir.inline_runsource:1 of
msgid "See :meth:`Pytester.inline_runsource`."
msgstr ":meth:`Pytester.inline_runsource` を参照してください。"

#: _pytest.legacypath.Testdir.inline_genitems:1 of
msgid "See :meth:`Pytester.inline_genitems`."
msgstr ":meth:`Pytester.inline_genitems` を参照してください。"

#: _pytest.legacypath.Testdir.inline_run:1 of
msgid "See :meth:`Pytester.inline_run`."
msgstr ":meth:`Pytester.inline_run` を参照してください。"

#: _pytest.legacypath.Testdir.runpytest_inprocess:1 of
msgid "See :meth:`Pytester.runpytest_inprocess`."
msgstr ":meth:`Pytester.runpytest_inprocess` を参照してください。"

#: _pytest.legacypath.Testdir.runpytest:1 of
msgid "See :meth:`Pytester.runpytest`."
msgstr ":meth:`Pytester.runpytest` を参照してください。"

#: _pytest.legacypath.Testdir.parseconfig:1 of
msgid "See :meth:`Pytester.parseconfig`."
msgstr ":meth:`Pytester.parseconfig` を参照してください。"

#: _pytest.legacypath.Testdir.parseconfigure:1 of
msgid "See :meth:`Pytester.parseconfigure`."
msgstr ":meth:`Pytester.parseconfigure` を参照してください。"

#: _pytest.legacypath.Testdir.getitem:1 of
msgid "See :meth:`Pytester.getitem`."
msgstr ":meth:`Pytester.getitem` を参照してください。"

#: _pytest.legacypath.Testdir.getitems:1 of
msgid "See :meth:`Pytester.getitems`."
msgstr ":meth:`Pytester.getitems` を参照してください。"

#: _pytest.legacypath.Testdir.getmodulecol:1 of
msgid "See :meth:`Pytester.getmodulecol`."
msgstr ":meth:`Pytester.getmodulecol` を参照してください。"

#: _pytest.legacypath.Testdir.collect_by_name:1 of
msgid "See :meth:`Pytester.collect_by_name`."
msgstr ":meth:`Pytester.collect_by_name` を参照してください。"

#: _pytest.legacypath.Testdir.popen:1 of
msgid "See :meth:`Pytester.popen`."
msgstr ":meth:`Pytester.popen` を参照してください。"

#: _pytest.legacypath.Testdir.run:1 of
msgid "See :meth:`Pytester.run`."
msgstr ":meth:`Pytester.run` を参照してください。"

#: _pytest.legacypath.Testdir.runpython:1 of
msgid "See :meth:`Pytester.runpython`."
msgstr ":meth:`Pytester.runpython` を参照してください。"

#: _pytest.legacypath.Testdir.runpython_c:1 of
msgid "See :meth:`Pytester.runpython_c`."
msgstr ":meth:`Pytester.runpython_c` を参照してください。"

#: _pytest.legacypath.Testdir.runpytest_subprocess:1 of
msgid "See :meth:`Pytester.runpytest_subprocess`."
msgstr ":meth:`Pytester.runpytest_subprocess` を参照してください。"

#: _pytest.legacypath.Testdir.spawn_pytest:1 of
msgid "See :meth:`Pytester.spawn_pytest`."
msgstr ":meth:`Pytester.spawn_pytest` を参照してください。"

#: _pytest.legacypath.Testdir.spawn:1 of
msgid "See :meth:`Pytester.spawn`."
msgstr ":meth:`Pytester.spawn` を参照してください。"

#: ../../reference/reference.rst:573
msgid "tmp_path"
msgstr "tmp_path"

#: ../../reference/reference.rst:575
msgid "**Tutorial**: :ref:`tmp_path`"
msgstr "**チュートリアル**： :ref:`tmp_path`"

#: _pytest.tmpdir.tmp_path:1 of
msgid "Return a temporary directory (as :class:`pathlib.Path` object) which is unique to each test function invocation. The temporary directory is created as a subdirectory of the base temporary directory, with configurable retention, as discussed in :ref:`temporary directory location and retention`."
msgstr "一時ディレクトリ（:class:`pathlib.Path` オブジェクトとして）を返します。 これは各テスト関数の呼び出しに固有です。 一時ディレクトリは、基本一時ディレクトリのサブディレクトリとして作成され、保持期間は :ref:`temporary directory location and retention` で説明されているように設定可能です。"

#: ../../reference/reference.rst:584
msgid "tmp_path_factory"
msgstr "tmp_path_factory"

#: ../../reference/reference.rst:586
msgid "**Tutorial**: :ref:`tmp_path_factory example`"
msgstr "**チュートリアル**： :ref:`tmp_path_factory example`"

#: ../../reference/reference.rst:590
msgid "``tmp_path_factory`` is an instance of :class:`~pytest.TempPathFactory`:"
msgstr "``tmp_path_factory`` は :class:`~pytest.TempPathFactory` のインスタンスです："

#: _pytest.tmpdir.TempPathFactory:1 of
msgid "Factory for temporary directories under the common base temp directory, as discussed at :ref:`temporary directory location and retention`."
msgstr "共通の基本一時ディレクトリの下に一時ディレクトリを作成するファクトリ。 詳細は :ref:`temporary directory location and retention` を参照してください。"

#: _pytest.tmpdir.TempPathFactory.mktemp:1 of
msgid "Create a new temporary directory managed by the factory."
msgstr "ファクトリによって管理される新しい一時ディレクトリを作成します。"

#: _pytest.tmpdir.TempPathFactory.mktemp:3 of
msgid "Directory base name, must be a relative path."
msgstr "ディレクトリの基本名。 相対パスでなければなりません。"

#: _pytest.tmpdir.TempPathFactory.mktemp:6 of
msgid "If ``True``, ensure the directory is unique by adding a numbered suffix greater than any existing one: ``basename=\"foo-\"`` and ``numbered=True`` means that this function will create directories named ``\"foo-0\"``, ``\"foo-1\"``, ``\"foo-2\"`` and so on."
msgstr "``True`` の場合、番号付きサフィックスを追加してディレクトリが一意であることを確認します。 既存のものより大きい番号を追加します。 ``basename=\"foo-\"`` と ``numbered=True`` は、この関数が ``\"foo-0\"``、``\"foo-1\"``、``\"foo-2\"`` などのディレクトリを作成することを意味します。"

#: _pytest.tmpdir.TempPathFactory.mktemp:12 of
msgid "The path to the new directory."
msgstr "新しいディレクトリへのパス。"

#: _pytest.tmpdir.TempPathFactory.getbasetemp:1 of
msgid "Return the base temporary directory, creating it if needed."
msgstr "基本一時ディレクトリを返し、必要に応じて作成します。"

#: _pytest.tmpdir.TempPathFactory.getbasetemp:3 of
msgid "The base temporary directory."
msgstr "基本一時ディレクトリ。"

#: ../../reference/reference.rst:599
msgid "tmpdir"
msgstr "tmpdir"

#: ../../reference/reference.rst:601 ../../reference/reference.rst:612
msgid "**Tutorial**: :ref:`tmpdir and tmpdir_factory`"
msgstr "**チュートリアル**： :ref:`tmpdir and tmpdir_factory`"

#: _pytest.legacypath.LegacyTmpdirPlugin.tmpdir:1 of
msgid "Return a temporary directory (as `legacy_path`_ object) which is unique to each test function invocation. The temporary directory is created as a subdirectory of the base temporary directory, with configurable retention, as discussed in :ref:`temporary directory location and retention`."
msgstr "一時ディレクトリ（`legacy_path`_ オブジェクトとして）を返します。 これは各テスト関数の呼び出しに固有です。 一時ディレクトリは、基本一時ディレクトリのサブディレクトリとして作成され、保持期間は :ref:`temporary directory location and retention` で説明されているように設定可能です。"

#: _pytest.legacypath.LegacyTmpdirPlugin.tmpdir:8 of
msgid "These days, it is preferred to use ``tmp_path``."
msgstr "最近では、``tmp_path`` を使用することが推奨されます。"

#: _pytest.legacypath.LegacyTmpdirPlugin.tmpdir:10
#: _pytest.legacypath.TempdirFactory:7 of
msgid ":ref:`About the tmpdir and tmpdir_factory fixtures<tmpdir and tmpdir_factory>`."
msgstr ":ref:`About the tmpdir and tmpdir_factory fixtures<tmpdir and tmpdir_factory>`。"

#: ../../reference/reference.rst:610
msgid "tmpdir_factory"
msgstr "tmpdir_factory"

#: ../../reference/reference.rst:614
msgid "``tmpdir_factory`` is an instance of :class:`~pytest.TempdirFactory`:"
msgstr "``tmpdir_factory`` は :class:`~pytest.TempdirFactory` のインスタンスです："

#: _pytest.legacypath.TempdirFactory:1 of
msgid "Backward compatibility wrapper that implements ``py.path.local`` for :class:`TempPathFactory`."
msgstr "後方互換性のためのラッパーで、:class:`TempPathFactory` に対して ``py.path.local`` を実装します。"

#: _pytest.legacypath.TempdirFactory:5 of
msgid "These days, it is preferred to use ``tmp_path_factory``."
msgstr "最近では、``tmp_path_factory`` を使用することが推奨されます。"

#: _pytest.legacypath.TempdirFactory.mktemp:1 of
msgid "Same as :meth:`TempPathFactory.mktemp`, but returns a ``py.path.local`` object."
msgstr ":meth:`TempPathFactory.mktemp` と同じですが、``py.path.local`` オブジェクトを返します。"

#: _pytest.legacypath.TempdirFactory.getbasetemp:1 of
msgid "Same as :meth:`TempPathFactory.getbasetemp`, but returns a ``py.path.local`` object."
msgstr ":meth:`TempPathFactory.getbasetemp` と同じですが、``py.path.local`` オブジェクトを返します。"

#: ../../reference/reference.rst:623
msgid "Hooks"
msgstr "フック"

#: ../../reference/reference.rst:625
msgid "**Tutorial**: :ref:`writing-plugins`"
msgstr "**チュートリアル**： :ref:`writing-plugins`"

#: ../../reference/reference.rst:627
msgid "Reference to all hooks which can be implemented by :ref:`conftest.py files <localplugin>` and :ref:`plugins <plugins>`."
msgstr " :ref:`conftest.py files <localplugin>` および :ref:`plugins <plugins>` によって実装できるすべてのフックへのリファレンス。"

#: ../../reference/reference.rst:630
msgid "@pytest.hookimpl"
msgstr "@pytest.hookimpl"

#: ../../reference/reference.rst:635
msgid "pytest's decorator for marking functions as hook implementations."
msgstr "フック実装として関数をマークするための pytest のデコレーター。"

#: ../../reference/reference.rst:637
msgid "See :ref:`writinghooks` and :func:`pluggy.HookimplMarker`."
msgstr ":ref:`writinghooks` および :func:`pluggy.HookimplMarker` を参照してください。"

#: ../../reference/reference.rst:640
msgid "@pytest.hookspec"
msgstr "@pytest.hookspec"

#: ../../reference/reference.rst:645
msgid "pytest's decorator for marking functions as hook specifications."
msgstr "フックスペックとして関数をマークするための pytest のデコレーター。"

#: ../../reference/reference.rst:647
msgid "See :ref:`declaringhooks` and :func:`pluggy.HookspecMarker`."
msgstr ":ref:`declaringhooks` および :func:`pluggy.HookspecMarker` を参照してください。"

#: ../../reference/reference.rst:652
msgid "Bootstrapping hooks"
msgstr "ブートストラップフック"

#: ../../reference/reference.rst:654
msgid "Bootstrapping hooks called for plugins registered early enough (internal and third-party plugins)."
msgstr "早期に登録されたプラグイン（内部およびサードパーティプラグイン）に対して呼び出されるブートストラップフック。"

#: _pytest.hookspec.pytest_load_initial_conftests:1 of
msgid "Called to implement the loading of :ref:`initial conftest files <pluginorder>` ahead of command line option parsing."
msgstr "コマンドラインオプションの解析に先立って、:ref:`initial conftest files <pluginorder>` の読み込みを実装するために呼び出されます。"

#: ../../../../docstring _pytest.hookspec.pytest_assertrepr_compare:8
#: _pytest.hookspec.pytest_cmdline_main:8
#: _pytest.hookspec.pytest_collection_modifyitems:10
#: _pytest.hookspec.pytest_configure:6 _pytest.hookspec.pytest_enter_pdb:6
#: _pytest.hookspec.pytest_ignore_collect:16
#: _pytest.hookspec.pytest_leave_pdb:6
#: _pytest.hookspec.pytest_load_initial_conftests:4
#: _pytest.hookspec.pytest_make_parametrize_id:9
#: _pytest.hookspec.pytest_markeval_namespace:11
#: _pytest.hookspec.pytest_report_collectionfinish:8
#: _pytest.hookspec.pytest_report_from_serializable:4
#: _pytest.hookspec.pytest_report_header:3
#: _pytest.hookspec.pytest_report_teststatus:18
#: _pytest.hookspec.pytest_report_to_serializable:4
#: _pytest.hookspec.pytest_terminal_summary:5
#: _pytest.hookspec.pytest_unconfigure:3 _pytest.nodes.FSCollector.config:1
#: _pytest.nodes.Node.config:1 _pytest.python.FunctionDefinition.config:1 of
#: pytest.Class.config:1 pytest.Collector.config:1 pytest.Dir.config:1
#: pytest.Directory.config:1 pytest.File.config:1 pytest.Function.config:1
#: pytest.Item.config:1 pytest.Module.config:1 pytest.Package.config:1
#: pytest.Session.config:1
msgid "The pytest config object."
msgstr "pytest 設定オブジェクト。"

#: _pytest.hookspec.pytest_load_initial_conftests:5 of
msgid "Arguments passed on the command line."
msgstr "コマンドラインで渡された引数。"

#: _pytest.hookspec.pytest_load_initial_conftests:6 of
msgid "To add command line options."
msgstr "コマンドラインオプションを追加するため。"

#: _pytest.hookspec.pytest_addhooks:10 _pytest.hookspec.pytest_addoption:31
#: _pytest.hookspec.pytest_assertion_pass:27
#: _pytest.hookspec.pytest_assertrepr_compare:14
#: _pytest.hookspec.pytest_cmdline_main:12
#: _pytest.hookspec.pytest_cmdline_parse:15
#: _pytest.hookspec.pytest_collect_directory:20
#: _pytest.hookspec.pytest_collect_file:18
#: _pytest.hookspec.pytest_collection:35
#: _pytest.hookspec.pytest_collection_finish:6
#: _pytest.hookspec.pytest_collection_modifyitems:14
#: _pytest.hookspec.pytest_collectreport:7
#: _pytest.hookspec.pytest_collectstart:7 _pytest.hookspec.pytest_configure:9
#: _pytest.hookspec.pytest_deselected:15 _pytest.hookspec.pytest_enter_pdb:10
#: _pytest.hookspec.pytest_exception_interact:21
#: _pytest.hookspec.pytest_fixture_post_finalizer:11
#: _pytest.hookspec.pytest_fixture_setup:18
#: _pytest.hookspec.pytest_generate_tests:7
#: _pytest.hookspec.pytest_ignore_collect:24
#: _pytest.hookspec.pytest_internalerror:10
#: _pytest.hookspec.pytest_itemcollected:7
#: _pytest.hookspec.pytest_keyboard_interrupt:6
#: _pytest.hookspec.pytest_leave_pdb:10
#: _pytest.hookspec.pytest_load_initial_conftests:9
#: _pytest.hookspec.pytest_make_collect_report:10
#: _pytest.hookspec.pytest_make_parametrize_id:14
#: _pytest.hookspec.pytest_markeval_namespace:15
#: _pytest.hookspec.pytest_plugin_registered:11
#: _pytest.hookspec.pytest_pycollect_makeitem:15
#: _pytest.hookspec.pytest_pycollect_makemodule:20
#: _pytest.hookspec.pytest_pyfunc_call:9
#: _pytest.hookspec.pytest_report_collectionfinish:27
#: _pytest.hookspec.pytest_report_from_serializable:7
#: _pytest.hookspec.pytest_report_header:21
#: _pytest.hookspec.pytest_report_teststatus:24
#: _pytest.hookspec.pytest_report_to_serializable:8
#: _pytest.hookspec.pytest_runtest_call:9
#: _pytest.hookspec.pytest_runtest_logfinish:11
#: _pytest.hookspec.pytest_runtest_logreport:7
#: _pytest.hookspec.pytest_runtest_logstart:11
#: _pytest.hookspec.pytest_runtest_makereport:12
#: _pytest.hookspec.pytest_runtest_protocol:34
#: _pytest.hookspec.pytest_runtest_setup:12
#: _pytest.hookspec.pytest_runtest_teardown:17
#: _pytest.hookspec.pytest_runtestloop:19
#: _pytest.hookspec.pytest_sessionfinish:7
#: _pytest.hookspec.pytest_sessionstart:7
#: _pytest.hookspec.pytest_terminal_summary:11
#: _pytest.hookspec.pytest_unconfigure:6
#: _pytest.hookspec.pytest_warning_recorded:26 of
msgid "Use in conftest plugins"
msgstr "conftest プラグインで使用する"

#: _pytest.hookspec.pytest_cmdline_parse:17
#: _pytest.hookspec.pytest_load_initial_conftests:11 of
msgid "This hook is not called for conftest files."
msgstr "conftest ファイルに対してはこのフックは呼び出されません。"

#: _pytest.hookspec.pytest_cmdline_parse:1 of
msgid "Return an initialized :class:`~pytest.Config`, parsing the specified args."
msgstr "指定された引数を解析して初期化された :class:`~pytest.Config` を返します。"

#: _pytest.hookspec.pytest_cmdline_main:6
#: _pytest.hookspec.pytest_cmdline_parse:3
#: _pytest.hookspec.pytest_collect_directory:11
#: _pytest.hookspec.pytest_fixture_setup:10
#: _pytest.hookspec.pytest_ignore_collect:11
#: _pytest.hookspec.pytest_make_collect_report:4
#: _pytest.hookspec.pytest_make_parametrize_id:7
#: _pytest.hookspec.pytest_pycollect_makeitem:3
#: _pytest.hookspec.pytest_pycollect_makemodule:7
#: _pytest.hookspec.pytest_pyfunc_call:3
#: _pytest.hookspec.pytest_report_teststatus:21
#: _pytest.hookspec.pytest_runtest_makereport:9 of
msgid "Stops at first non-None result, see :ref:`firstresult`."
msgstr "最初の None でない結果で停止します。 詳細は :ref:`firstresult` を参照してください。"

#: _pytest.hookspec.pytest_cmdline_parse:6 of
msgid "This hook is only called for plugin classes passed to the ``plugins`` arg when using `pytest.main`_ to perform an in-process test run."
msgstr "このフックは、`pytest.main`_ を使用してインプロセステストを実行する際に ``plugins`` 引数に渡されたプラグインクラスに対してのみ呼び出されます。"

#: _pytest.hookspec.pytest_addhooks:4 _pytest.hookspec.pytest_cmdline_parse:10
#: _pytest.hookspec.pytest_plugin_registered:5 of
msgid "The pytest plugin manager."
msgstr "pytest プラグインマネージャー。"

#: _pytest.hookspec.pytest_cmdline_parse:11 of
msgid "List of arguments passed on the command line."
msgstr "コマンドラインで渡された引数のリスト。"

#: _pytest.hookspec.pytest_cmdline_parse:12 of
msgid "A pytest config object."
msgstr "pytest 設定オブジェクト。"

#: _pytest.hookspec.pytest_cmdline_main:1 of
msgid "Called for performing the main command line action."
msgstr "メインのコマンドラインアクションを実行するために呼び出されます。"

#: _pytest.hookspec.pytest_cmdline_main:3 of
msgid "The default implementation will invoke the configure hooks and :hook:`pytest_runtestloop`."
msgstr "デフォルトの実装は、configure フックと :hook:`pytest_runtestloop` を呼び出します。"

#: _pytest.hookspec.pytest_cmdline_main:9 of
msgid "The exit code."
msgstr "終了コード。"

#: _pytest.hookspec.pytest_addoption:36 _pytest.hookspec.pytest_cmdline_main:14
#: _pytest.hookspec.pytest_collection:37
#: _pytest.hookspec.pytest_report_header:23
#: _pytest.hookspec.pytest_sessionstart:9 of
msgid "This hook is only called for :ref:`initial conftests <pluginorder>`."
msgstr "このフックは :ref:`initial conftests <pluginorder>` に対してのみ呼び出されます。"

#: ../../reference/reference.rst:666
msgid "Initialization hooks"
msgstr "初期化フック"

#: ../../reference/reference.rst:668
msgid "Initialization hooks called for plugins and ``conftest.py`` files."
msgstr "プラグインおよび ``conftest.py`` ファイルに対して呼び出される初期化フック。"

#: _pytest.hookspec.pytest_addoption:1 of
msgid "Register argparse-style options and ini-style config values, called once at the beginning of a test run."
msgstr "argparse スタイルのオプションと ini スタイルの設定値を登録します。 テスト実行の開始時に一度だけ呼び出されます。"

#: _pytest.hookspec.pytest_addoption:4 of
msgid "To add command line options, call :py:func:`parser.addoption(...) <pytest.Parser.addoption>`. To add ini-file values call :py:func:`parser.addini(...) <pytest.Parser.addini>`."
msgstr "コマンドラインオプションを追加するには、:py:func:`parser.addoption(...) <pytest.Parser.addoption>` を呼び出します。 ini ファイルの値を追加するには、:py:func:`parser.addini(...) <pytest.Parser.addini>` を呼び出します。"

#: _pytest.hookspec.pytest_addoption:10 of
msgid "The pytest plugin manager, which can be used to install :py:func:`~pytest.hookspec`'s or :py:func:`~pytest.hookimpl`'s and allow one plugin to call another plugin's hooks to change how command line options are added."
msgstr "pytest プラグインマネージャー。 これを使用して :py:func:`~pytest.hookspec` や :py:func:`~pytest.hookimpl` をインストールし、あるプラグインが別のプラグインのフックを呼び出してコマンドラインオプションの追加方法を変更できるようにします。"

#: _pytest.hookspec.pytest_addoption:15 of
msgid "Options can later be accessed through the :py:class:`config <pytest.Config>` object, respectively:"
msgstr "オプションは後で :py:class:`config <pytest.Config>` オブジェクトを介してアクセスできます。"

#: _pytest.hookspec.pytest_addoption:18 of
msgid ":py:func:`config.getoption(name) <pytest.Config.getoption>` to retrieve the value of a command line option."
msgstr ":py:func:`config.getoption(name) <pytest.Config.getoption>` を使用してコマンドラインオプションの値を取得します。"

#: _pytest.hookspec.pytest_addoption:21 of
msgid ":py:func:`config.getini(name) <pytest.Config.getini>` to retrieve a value read from an ini-style file."
msgstr ":py:func:`config.getini(name) <pytest.Config.getini>` を使用して ini スタイルのファイルから読み取った値を取得します。"

#: _pytest.hookspec.pytest_addoption:24 of
msgid "The config object is passed around on many internal objects via the ``.config`` attribute or can be retrieved as the ``pytestconfig`` fixture."
msgstr "設定オブジェクトは、多くの内部オブジェクトに ``.config`` 属性を介して渡されるか、``pytestconfig`` フィクスチャとして取得できます。"

#: _pytest.hookspec.pytest_addhooks:7 _pytest.hookspec.pytest_addoption:28
#: _pytest.hookspec.pytest_configure:4
#: _pytest.hookspec.pytest_plugin_registered:8 of
msgid "This hook is incompatible with hook wrappers."
msgstr "このフックはフックラッパーと互換性がありません。"

#: _pytest.hookspec.pytest_addhooks:12 _pytest.hookspec.pytest_addoption:33 of
msgid "If a conftest plugin implements this hook, it will be called immediately when the conftest is registered."
msgstr "conftest プラグインがこのフックを実装している場合、conftest が登録されたときにすぐに呼び出されます。"

#: _pytest.hookspec.pytest_addhooks:1 of
msgid "Called at plugin registration time to allow adding new hooks via a call to :func:`pluginmanager.add_hookspecs(module_or_class, prefix) <pytest.PytestPluginManager.add_hookspecs>`."
msgstr "プラグイン登録時に呼び出され、:func:`pluginmanager.add_hookspecs(module_or_class, prefix) <pytest.PytestPluginManager.add_hookspecs>` の呼び出しを介して新しいフックを追加できるようにします。"

#: _pytest.hookspec.pytest_configure:1 of
msgid "Allow plugins and conftest files to perform initial configuration."
msgstr "プラグインおよび conftest ファイルが初期設定を実行できるようにします。"

#: _pytest.hookspec.pytest_configure:11 of
msgid "This hook is called for every :ref:`initial conftest <pluginorder>` file after command line options have been parsed. After that, the hook is called for other conftest files as they are registered."
msgstr "このフックは、コマンドラインオプションが解析された後、すべての :ref:`initial conftest <pluginorder>` ファイルに対して呼び出されます。 その後、他の conftest ファイルが登録されるときに呼び出されます。"

#: _pytest.hookspec.pytest_unconfigure:1 of
msgid "Called before test process is exited."
msgstr "テストプロセスが終了する前に呼び出されます。"

#: _pytest.hookspec.pytest_deselected:17
#: _pytest.hookspec.pytest_make_parametrize_id:16
#: _pytest.hookspec.pytest_runtest_protocol:36
#: _pytest.hookspec.pytest_runtestloop:21
#: _pytest.hookspec.pytest_sessionfinish:9
#: _pytest.hookspec.pytest_unconfigure:8 of
msgid "Any conftest file can implement this hook."
msgstr "任意の conftest ファイルがこのフックを実装できます。"

#: _pytest.hookspec.pytest_sessionstart:1 of
msgid "Called after the ``Session`` object has been created and before performing collection and entering the run test loop."
msgstr "``Session`` オブジェクトが作成された後、コレクションを実行し、テストループに入る前に呼び出されます。"

#: _pytest.hookspec.pytest_collection:32
#: _pytest.hookspec.pytest_collection_finish:3
#: _pytest.hookspec.pytest_collection_modifyitems:9
#: _pytest.hookspec.pytest_runtestloop:13
#: _pytest.hookspec.pytest_sessionfinish:3
#: _pytest.hookspec.pytest_sessionstart:4 of
msgid "The pytest session object."
msgstr "pytest セッションオブジェクト。"

#: _pytest.hookspec.pytest_sessionfinish:1 of
msgid "Called after whole test run finished, right before returning the exit status to the system."
msgstr "テストの全実行が終了した後、終了ステータスをシステムに返す直前に呼び出されます。"

#: _pytest.hookspec.pytest_sessionfinish:4 of
msgid "The status which pytest will return to the system."
msgstr "pytest がシステムに返すステータス。"

#: _pytest.hookspec.pytest_plugin_registered:1 of
msgid "A new pytest plugin got registered."
msgstr "新しい pytest プラグインが登録されました。"

#: _pytest.hookspec.pytest_plugin_registered:3 of
msgid "The plugin module or instance."
msgstr "プラグインモジュールまたはインスタンス。"

#: _pytest.hookspec.pytest_plugin_registered:4 of
msgid "The name by which the plugin is registered."
msgstr "プラグインが登録された名前。"

#: _pytest.hookspec.pytest_plugin_registered:13 of
msgid "If a conftest plugin implements this hook, it will be called immediately when the conftest is registered, once for each plugin registered thus far (including itself!), and for all plugins thereafter when they are registered."
msgstr "conftest プラグインがこのフックを実装している場合、conftest が登録されたときにすぐに呼び出されます。 これまでに登録された各プラグイン（自分自身を含む！）およびその後に登録されるすべてのプラグインに対して呼び出されます。"

#: ../../reference/reference.rst:687
msgid "Collection hooks"
msgstr "コレクションフック"

#: ../../reference/reference.rst:689
msgid "``pytest`` calls the following hooks for collecting files and directories:"
msgstr "``pytest`` はファイルおよびディレクトリを収集するために次のフックを呼び出します："

#: _pytest.hookspec.pytest_collection:1 of
msgid "Perform the collection phase for the given session."
msgstr "指定されたセッションのコレクションフェーズを実行します。"

#: _pytest.hookspec.pytest_collection:3
#: _pytest.hookspec.pytest_runtest_protocol:30
#: _pytest.hookspec.pytest_runtestloop:15 of
msgid "Stops at first non-None result, see :ref:`firstresult`. The return value is not used, but only stops further processing."
msgstr "最初の None でない結果で停止します。 詳細は :ref:`firstresult` を参照してください。 戻り値は使用されませんが、さらなる処理を停止します。"

#: _pytest.hookspec.pytest_collection:6 of
msgid "The default collection phase is this (see individual hooks for full details):"
msgstr "デフォルトのコレクションフェーズは次のとおりです（詳細は個々のフックを参照してください）："

#: _pytest.hookspec.pytest_collection:8 of
msgid "Starting from ``session`` as the initial collector:"
msgstr "初期コレクターとして ``session`` から開始："

#: _pytest.hookspec.pytest_collection:10 of
msgid "``pytest_collectstart(collector)``"
msgstr "``pytest_collectstart(collector)``"

#: _pytest.hookspec.pytest_collection:11 of
msgid "``report = pytest_make_collect_report(collector)``"
msgstr "``report = pytest_make_collect_report(collector)``"

#: _pytest.hookspec.pytest_collection:12 of
msgid "``pytest_exception_interact(collector, call, report)`` if an interactive exception occurred"
msgstr "インタラクティブな例外が発生した場合は ``pytest_exception_interact(collector, call, report)``"

#: _pytest.hookspec.pytest_collection:13 of
msgid "For each collected node:"
msgstr "収集された各ノードに対して："

#: _pytest.hookspec.pytest_collection:15 of
msgid "If an item, ``pytest_itemcollected(item)``"
msgstr "アイテムの場合、``pytest_itemcollected(item)``"

#: _pytest.hookspec.pytest_collection:16 of
msgid "If a collector, recurse into it."
msgstr "コレクターの場合、それに再帰します。"

#: _pytest.hookspec.pytest_collection:18 of
msgid "``pytest_collectreport(report)``"
msgstr "``pytest_collectreport(report)``"

#: _pytest.hookspec.pytest_collection:20 of
msgid "``pytest_collection_modifyitems(session, config, items)``"
msgstr "``pytest_collection_modifyitems(session, config, items)``"

#: _pytest.hookspec.pytest_collection:22 of
msgid "``pytest_deselected(items)`` for any deselected items (may be called multiple times)"
msgstr "選択解除されたアイテムに対して ``pytest_deselected(items)`` (複数回呼び出される場合があります)"

#: _pytest.hookspec.pytest_collection:24 of
msgid "``pytest_collection_finish(session)``"
msgstr "``pytest_collection_finish(session)``"

#: _pytest.hookspec.pytest_collection:25 of
msgid "Set ``session.items`` to the list of collected items"
msgstr "``session.items`` を収集されたアイテムのリストに設定します。"

#: _pytest.hookspec.pytest_collection:26 of
msgid "Set ``session.testscollected`` to the number of collected items"
msgstr "``session.testscollected`` を収集されたアイテムの数に設定します。"

#: _pytest.hookspec.pytest_collection:28 of
msgid "You can implement this hook to only perform some action before collection, for example the terminal plugin uses it to start displaying the collection counter (and returns `None`)."
msgstr "コレクションの前に何らかのアクションを実行するためにこのフックを実装できます。 例えば、ターミナルプラグインはこれを使用してコレクションカウンターの表示を開始します（`None` を返します）。"

#: _pytest.hookspec.pytest_ignore_collect:1 of
msgid "Return ``True`` to ignore this path for collection."
msgstr "このパスをコレクションの対象外にするには ``True`` を返します。"

#: _pytest.hookspec.pytest_ignore_collect:3 of
msgid "Return ``None`` to let other plugins ignore the path for collection."
msgstr "他のプラグインがパスをコレクションの対象外にすることを許可するには ``None`` を返します。"

#: _pytest.hookspec.pytest_ignore_collect:5 of
msgid "Returning ``False`` will forcefully *not* ignore this path for collection, without giving a chance for other plugins to ignore this path."
msgstr "``False`` を返すと、このパスを強制的にコレクションの対象外にしません。 他のプラグインがこのパスを無視する機会を与えません。"

#: _pytest.hookspec.pytest_ignore_collect:8 of
msgid "This hook is consulted for all files and directories prior to calling more specific hooks."
msgstr "このフックは、より具体的なフックを呼び出す前にすべてのファイルとディレクトリに対して参照されます。"

#: _pytest.hookspec.pytest_collect_directory:13
#: _pytest.hookspec.pytest_collect_file:8
#: _pytest.hookspec.pytest_ignore_collect:13 of
msgid "The path to analyze."
msgstr "分析するパス。"

#: _pytest.hookspec.pytest_ignore_collect:15 of
msgid "The path to analyze (deprecated)."
msgstr "分析するパス（非推奨）。"

#: _pytest.hookspec.pytest_ignore_collect:18 of
msgid "The ``collection_path`` parameter was added as a :class:`pathlib.Path` equivalent of the ``path`` parameter. The ``path`` parameter has been deprecated."
msgstr "``collection_path`` パラメータは、``path`` パラメータの :class:`pathlib.Path` 相当として追加されました。 ``path`` パラメータは非推奨となりました。"

#: _pytest.hookspec.pytest_ignore_collect:26 of
msgid "Any conftest file can implement this hook. For a given collection path, only conftest files in parent directories of the collection path are consulted (if the path is a directory, its own conftest file is *not* consulted - a directory cannot ignore itself!)."
msgstr "任意の conftest ファイルがこのフックを実装できます。 指定されたコレクションパスに対して、コレクションパスの親ディレクトリにある conftest ファイルのみが参照されます（パスがディレクトリの場合、そのディレクトリ自身の conftest ファイルは参照されません。 ディレクトリは自分自身を無視できません！）。"

#: _pytest.hookspec.pytest_collect_directory:1 of
msgid "Create a :class:`~pytest.Collector` for the given directory, or None if not relevant."
msgstr "指定されたディレクトリに対して :class:`~pytest.Collector` を作成します。 関連性がない場合は None を返します。"

#: _pytest.hookspec.pytest_collect_directory:6 of
msgid "For best results, the returned collector should be a subclass of :class:`~pytest.Directory`, but this is not required."
msgstr "最良の結果を得るために、返されるコレクターは :class:`~pytest.Directory` のサブクラスであるべきですが、これは必須ではありません。"

#: _pytest.hookspec.pytest_collect_directory:9
#: _pytest.hookspec.pytest_collect_file:6 of
msgid "The new node needs to have the specified ``parent`` as a parent."
msgstr "新しいノードには指定された ``parent`` を親として持つ必要があります。"

#: _pytest.hookspec.pytest_collect_directory:16 of
msgid "See :ref:`custom directory collectors` for a simple example of use of this hook."
msgstr "このフックの使用例については :ref:`custom directory collectors` を参照してください。"

#: _pytest.hookspec.pytest_collect_directory:22 of
msgid "Any conftest file can implement this hook. For a given collection path, only conftest files in parent directories of the collection path are consulted (if the path is a directory, its own conftest file is *not* consulted - a directory cannot collect itself!)."
msgstr "任意の conftest ファイルがこのフックを実装できます。 指定されたコレクションパスに対して、コレクションパスの親ディレクトリにある conftest ファイルのみが参照されます（パスがディレクトリの場合、そのディレクトリ自身の conftest ファイルは参照されません。 ディレクトリは自分自身を収集できません！）。"

#: _pytest.hookspec.pytest_collect_file:1 of
msgid "Create a :class:`~pytest.Collector` for the given path, or None if not relevant."
msgstr "指定されたパスに対して :class:`~pytest.Collector` を作成します。 関連性がない場合は None を返します。"

#: _pytest.hookspec.pytest_collect_file:3 of
msgid "For best results, the returned collector should be a subclass of :class:`~pytest.File`, but this is not required."
msgstr "最良の結果を得るために、返されるコレクターは :class:`~pytest.File` のサブクラスであるべきですが、これは必須ではありません。"

#: _pytest.hookspec.pytest_collect_file:10 of
msgid "The path to collect (deprecated)."
msgstr "収集するパス（非推奨）。"

#: _pytest.hookspec.pytest_collect_file:12 of
msgid "The ``file_path`` parameter was added as a :class:`pathlib.Path` equivalent of the ``path`` parameter. The ``path`` parameter has been deprecated."
msgstr "``file_path`` パラメータは、``path`` パラメータの :class:`pathlib.Path` 相当として追加されました。 ``path`` パラメータは非推奨となりました。"

#: _pytest.hookspec.pytest_collect_file:20 of
msgid "Any conftest file can implement this hook. For a given file path, only conftest files in parent directories of the file path are consulted."
msgstr "任意の conftest ファイルがこのフックを実装できます。 指定されたファイルパスに対して、ファイルパスの親ディレクトリにある conftest ファイルのみが参照されます。"

#: _pytest.hookspec.pytest_pycollect_makemodule:1 of
msgid "Return a :class:`pytest.Module` collector or None for the given path."
msgstr "指定されたパスに対して :class:`pytest.Module` コレクターを返します。 関連性がない場合は None を返します。"

#: _pytest.hookspec.pytest_pycollect_makemodule:3 of
msgid "This hook will be called for each matching test module path. The :hook:`pytest_collect_file` hook needs to be used if you want to create test modules for files that do not match as a test module."
msgstr "このフックは、一致する各テストモジュールパスに対して呼び出されます。 テストモジュールとして一致しないファイルに対してテストモジュールを作成したい場合は、:hook:`pytest_collect_file` フックを使用する必要があります。"

#: _pytest.hookspec.pytest_pycollect_makemodule:9 of
msgid "The path of the module to collect."
msgstr "収集するモジュールのパス。"

#: _pytest.hookspec.pytest_pycollect_makemodule:11 of
msgid "The path of the module to collect (deprecated)."
msgstr "収集するモジュールのパス（非推奨）。"

#: _pytest.hookspec.pytest_pycollect_makemodule:13 of
msgid "The ``module_path`` parameter was added as a :class:`pathlib.Path` equivalent of the ``path`` parameter."
msgstr "``module_path`` パラメータは、``path`` パラメータの :class:`pathlib.Path` 相当として追加されました。"

#: _pytest.hookspec.pytest_pycollect_makemodule:17 of
msgid "The ``path`` parameter has been deprecated in favor of ``fspath``."
msgstr "``path`` パラメータは ``fspath`` に置き換えられました。"

#: _pytest.hookspec.pytest_pycollect_makemodule:22 of
msgid "Any conftest file can implement this hook. For a given parent collector, only conftest files in the collector's directory and its parent directories are consulted."
msgstr "任意の conftest ファイルがこのフックを実装できます。 指定された親コレクターに対して、コレクターのディレクトリおよびその親ディレクトリにある conftest ファイルのみが参照されます。"

#: ../../reference/reference.rst:702
msgid "For influencing the collection of objects in Python modules you can use the following hook:"
msgstr "Python モジュール内のオブジェクトのコレクションに影響を与えるために次のフックを使用できます："

#: _pytest.hookspec.pytest_pycollect_makeitem:1 of
msgid "Return a custom item/collector for a Python object in a module, or None."
msgstr "モジュール内の Python オブジェクトに対してカスタムアイテム/コレクターを返します。 関連性がない場合は None を返します。"

#: _pytest.hookspec.pytest_pycollect_makeitem:5 of
msgid "The module/class collector."
msgstr "モジュール/クラスコレクター。"

#: _pytest.hookspec.pytest_pycollect_makeitem:7 of
msgid "The name of the object in the module/class."
msgstr "モジュール/クラス内のオブジェクトの名前。"

#: _pytest.hookspec.pytest_pycollect_makeitem:9 of
msgid "The object."
msgstr "オブジェクト。"

#: _pytest.hookspec.pytest_pycollect_makeitem:11 of
msgid "The created items/collectors."
msgstr "作成されたアイテム/コレクター。"

#: _pytest.hookspec.pytest_collectreport:9
#: _pytest.hookspec.pytest_collectstart:9
#: _pytest.hookspec.pytest_make_collect_report:12
#: _pytest.hookspec.pytest_pycollect_makeitem:17 of
msgid "Any conftest file can implement this hook. For a given collector, only conftest files in the collector's directory and its parent directories are consulted."
msgstr "任意の conftest ファイルがこのフックを実装できます。 指定されたコレクターに対して、コレクターのディレクトリおよびその親ディレクトリにある conftest ファイルのみが参照されます。"

#: _pytest.hookspec.pytest_generate_tests:1 of
msgid "Generate (multiple) parametrized calls to a test function."
msgstr "テスト関数への（複数の）パラメータ化された呼び出しを生成します。"

#: _pytest.hookspec.pytest_generate_tests:3 of
msgid "The :class:`~pytest.Metafunc` helper for the test function."
msgstr "テスト関数のための :class:`~pytest.Metafunc` ヘルパー。"

#: _pytest.hookspec.pytest_generate_tests:9 of
msgid "Any conftest file can implement this hook. For a given function definition, only conftest files in the functions's directory and its parent directories are consulted."
msgstr "任意の conftest ファイルがこのフックを実装できます。 指定された関数定義に対して、関数のディレクトリおよびその親ディレクトリにある conftest ファイルのみが参照されます。"

#: _pytest.hookspec.pytest_make_parametrize_id:1 of
msgid "Return a user-friendly string representation of the given ``val`` that will be used by @pytest.mark.parametrize calls, or None if the hook doesn't know about ``val``."
msgstr "与えられた ``val`` のユーザーフレンドリーな文字列表現を返します。 これは @pytest.mark.parametrize 呼び出しによって使用されます。 フックが ``val`` を知らない場合は None を返します。"

#: _pytest.hookspec.pytest_make_parametrize_id:5 of
msgid "The parameter name is available as ``argname``, if required."
msgstr "必要に応じて、パラメータ名は ``argname`` として利用可能です。"

#: _pytest.hookspec.pytest_make_parametrize_id:10 of
msgid "The parametrized value."
msgstr "パラメータ化された値。"

#: _pytest.hookspec.pytest_make_parametrize_id:11 of
msgid "The automatic parameter name produced by pytest."
msgstr "pytest によって生成された自動パラメータ名。"

#: ../../reference/reference.rst:712
msgid "Hooks for influencing test skipping:"
msgstr "テストスキップに影響を与えるためのフック："

#: _pytest.hookspec.pytest_markeval_namespace:1 of
msgid "Called when constructing the globals dictionary used for evaluating string conditions in xfail/skipif markers."
msgstr "xfail/skipif マーカーの文字列条件を評価するために使用されるグローバル辞書を構築する際に呼び出されます。"

#: _pytest.hookspec.pytest_markeval_namespace:4 of
msgid "This is useful when the condition for a marker requires objects that are expensive or impossible to obtain during collection time, which is required by normal boolean conditions."
msgstr "マーカーの条件が、コレクション時に取得するのが高価または不可能なオブジェクトを必要とする場合に便利です。 これは通常のブール条件によって必要とされます。"

#: _pytest.hookspec.pytest_markeval_namespace:12 of
msgid "A dictionary of additional globals to add."
msgstr "追加するグローバルの辞書。"

#: _pytest.hookspec.pytest_markeval_namespace:17 of
msgid "Any conftest file can implement this hook. For a given item, only conftest files in parent directories of the item are consulted."
msgstr "任意の conftest ファイルがこのフックを実装できます。 指定されたアイテムに対して、アイテムの親ディレクトリにある conftest ファイルのみが参照されます。"

#: ../../reference/reference.rst:717
msgid "After collection is complete, you can modify the order of items, delete or otherwise amend the test items:"
msgstr "コレクションが完了した後、アイテムの順序を変更したり、削除したり、テストアイテムを修正したりできます："

#: _pytest.hookspec.pytest_collection_modifyitems:1 of
msgid "Called after collection has been performed. May filter or re-order the items in-place."
msgstr "コレクションが実行された後に呼び出されます。 アイテムをフィルタリングまたはインプレースで再注文することができます。"

#: _pytest.hookspec.pytest_collection_modifyitems:4 of
msgid "When items are deselected (filtered out from ``items``), the hook :hook:`pytest_deselected` must be called explicitly with the deselected items to properly notify other plugins, e.g. with ``config.hook.pytest_deselected(deselected_items)``."
msgstr "アイテムが選択解除（``items`` からフィルタリング）された場合、他のプラグインに適切に通知するために、フック :hook:`pytest_deselected` を選択解除されたアイテムで明示的に呼び出す必要があります。 例えば、``config.hook.pytest_deselected(deselected_items)`` のように。"

#: _pytest.hookspec.pytest_collection_modifyitems:11 of
msgid "List of item objects."
msgstr "アイテムオブジェクトのリスト。"

#: _pytest.hookspec.pytest_collection_finish:8
#: _pytest.hookspec.pytest_collection_modifyitems:16
#: _pytest.hookspec.pytest_enter_pdb:12
#: _pytest.hookspec.pytest_internalerror:12
#: _pytest.hookspec.pytest_keyboard_interrupt:8
#: _pytest.hookspec.pytest_leave_pdb:12
#: _pytest.hookspec.pytest_report_collectionfinish:29
#: _pytest.hookspec.pytest_report_teststatus:26
#: _pytest.hookspec.pytest_terminal_summary:13 of
msgid "Any conftest plugin can implement this hook."
msgstr "任意の conftest プラグインがこのフックを実装できます。"

#: ../../reference/reference.rst:724
msgid "If this hook is implemented in ``conftest.py`` files, it always receives all collected items, not only those under the ``conftest.py`` where it is implemented."
msgstr "このフックが ``conftest.py`` ファイルに実装されている場合、実装されている ``conftest.py`` の下にあるアイテムだけでなく、すべての収集されたアイテムを常に受け取ります。"

#: _pytest.hookspec.pytest_collection_finish:1 of
msgid "Called after collection has been performed and modified."
msgstr "コレクションが実行および変更された後に呼び出されます。"

#: ../../reference/reference.rst:730
msgid "Test running (runtest) hooks"
msgstr "テスト実行（runtest）フック"

#: ../../reference/reference.rst:732
msgid "All runtest related hooks receive a :py:class:`pytest.Item <pytest.Item>` object."
msgstr "すべての runtest 関連のフックは :py:class:`pytest.Item <pytest.Item>` オブジェクトを受け取ります。"

#: _pytest.hookspec.pytest_runtestloop:1 of
msgid "Perform the main runtest loop (after collection finished)."
msgstr "メインの runtest ループを実行します（コレクションが終了した後）。"

#: _pytest.hookspec.pytest_runtestloop:3 of
msgid "The default hook implementation performs the runtest protocol for all items collected in the session (``session.items``), unless the collection failed or the ``collectonly`` pytest option is set."
msgstr "デフォルトのフック実装は、コレクションが失敗した場合や ``collectonly`` pytest オプションが設定されている場合を除き、セッションで収集されたすべてのアイテム（``session.items``）に対して runtest プロトコルを実行します。"

#: _pytest.hookspec.pytest_runtestloop:7 of
msgid "If at any point :py:func:`pytest.exit` is called, the loop is terminated immediately."
msgstr "任意の時点で :py:func:`pytest.exit` が呼び出された場合、ループは直ちに終了します。"

#: _pytest.hookspec.pytest_runtestloop:10 of
msgid "If at any point ``session.shouldfail`` or ``session.shouldstop`` are set, the loop is terminated after the runtest protocol for the current item is finished."
msgstr "任意の時点で ``session.shouldfail`` または ``session.shouldstop`` が設定された場合、現在のアイテムの runtest プロトコルが終了した後にループが終了します。"

#: _pytest.hookspec.pytest_runtest_protocol:1 of
msgid "Perform the runtest protocol for a single test item."
msgstr "単一のテストアイテムに対して runtest プロトコルを実行します。"

#: _pytest.hookspec.pytest_runtest_protocol:3 of
msgid "The default runtest protocol is this (see individual hooks for full details):"
msgstr "デフォルトの runtest プロトコルは次のとおりです（詳細は個々のフックを参照してください）："

#: _pytest.hookspec.pytest_runtest_protocol:5 of
msgid "``pytest_runtest_logstart(nodeid, location)``"
msgstr "``pytest_runtest_logstart(nodeid, location)``"

#: _pytest.hookspec.pytest_runtest_protocol:7 of
msgid "Setup phase:"
msgstr "セットアップフェーズ："

#: _pytest.hookspec.pytest_runtest_protocol:8 of
msgid "``call = pytest_runtest_setup(item)`` (wrapped in ``CallInfo(when=\"setup\")``)"
msgstr "``call = pytest_runtest_setup(item)`` (``CallInfo(when=\"setup\")`` でラップ)"

#: _pytest.hookspec.pytest_runtest_protocol:9
#: _pytest.hookspec.pytest_runtest_protocol:15
#: _pytest.hookspec.pytest_runtest_protocol:21 of
msgid "``report = pytest_runtest_makereport(item, call)``"
msgstr "``report = pytest_runtest_makereport(item, call)``"

#: _pytest.hookspec.pytest_runtest_protocol:10
#: _pytest.hookspec.pytest_runtest_protocol:16
#: _pytest.hookspec.pytest_runtest_protocol:22 of
msgid "``pytest_runtest_logreport(report)``"
msgstr "``pytest_runtest_logreport(report)``"

#: _pytest.hookspec.pytest_runtest_protocol:11
#: _pytest.hookspec.pytest_runtest_protocol:17
#: _pytest.hookspec.pytest_runtest_protocol:23 of
msgid "``pytest_exception_interact(call, report)`` if an interactive exception occurred"
msgstr "インタラクティブな例外が発生した場合は ``pytest_exception_interact(call, report)``"

#: _pytest.hookspec.pytest_runtest_protocol:13 of
msgid "Call phase, if the setup passed and the ``setuponly`` pytest option is not set:"
msgstr "セットアップが成功し、``setuponly`` pytest オプションが設定されていない場合のコールフェーズ："

#: _pytest.hookspec.pytest_runtest_protocol:14 of
msgid "``call = pytest_runtest_call(item)`` (wrapped in ``CallInfo(when=\"call\")``)"
msgstr "``call = pytest_runtest_call(item)`` (``CallInfo(when=\"call\")`` でラップ)"

#: _pytest.hookspec.pytest_runtest_protocol:19 of
msgid "Teardown phase:"
msgstr "ティアダウンフェーズ："

#: _pytest.hookspec.pytest_runtest_protocol:20 of
msgid "``call = pytest_runtest_teardown(item, nextitem)`` (wrapped in ``CallInfo(when=\"teardown\")``)"
msgstr "``call = pytest_runtest_teardown(item, nextitem)``（``CallInfo(when=\"teardown\")`` でラップ）"

#: _pytest.hookspec.pytest_runtest_protocol:25 of
msgid "``pytest_runtest_logfinish(nodeid, location)``"
msgstr "``pytest_runtest_logfinish(nodeid, location)``"

#: _pytest.hookspec.pytest_runtest_protocol:27 of
msgid "Test item for which the runtest protocol is performed."
msgstr "runtest プロトコルが実行されるテストアイテム。"

#: _pytest.hookspec.pytest_runtest_protocol:28 of
msgid "The scheduled-to-be-next test item (or None if this is the end my friend)."
msgstr "次に予定されているテストアイテム（これが最後の場合は None）。"

#: _pytest.hookspec.pytest_runtest_logstart:1 of
msgid "Called at the start of running the runtest protocol for a single item."
msgstr "単一のアイテムに対して runtest プロトコルの実行を開始する際に呼び出されます。"

#: _pytest.hookspec.pytest_runtest_logfinish:3
#: _pytest.hookspec.pytest_runtest_logreport:4
#: _pytest.hookspec.pytest_runtest_logstart:3
#: _pytest.hookspec.pytest_runtest_makereport:4 of
msgid "See :hook:`pytest_runtest_protocol` for a description of the runtest protocol."
msgstr "runtest プロトコルの説明については :hook:`pytest_runtest_protocol` を参照してください。"

#: _pytest.hookspec.pytest_runtest_logfinish:5
#: _pytest.hookspec.pytest_runtest_logstart:5 of
msgid "Full node ID of the item."
msgstr "アイテムの完全なノード ID。"

#: _pytest.hookspec.pytest_runtest_logfinish:6
#: _pytest.hookspec.pytest_runtest_logstart:6 of
msgid "A tuple of ``(filename, lineno, testname)`` where ``filename`` is a file path relative to ``config.rootpath`` and ``lineno`` is 0-based."
msgstr "``(filename, lineno, testname)`` のタプル。 ``filename`` は ``config.rootpath`` に対する相対ファイルパスであり、``lineno`` は 0 ベースです。"

#: _pytest.hookspec.pytest_assertion_pass:29
#: _pytest.hookspec.pytest_assertrepr_compare:16
#: _pytest.hookspec.pytest_itemcollected:9
#: _pytest.hookspec.pytest_pyfunc_call:11
#: _pytest.hookspec.pytest_runtest_call:11
#: _pytest.hookspec.pytest_runtest_logfinish:13
#: _pytest.hookspec.pytest_runtest_logreport:9
#: _pytest.hookspec.pytest_runtest_logstart:13
#: _pytest.hookspec.pytest_runtest_makereport:14
#: _pytest.hookspec.pytest_runtest_setup:14
#: _pytest.hookspec.pytest_runtest_teardown:19 of
msgid "Any conftest file can implement this hook. For a given item, only conftest files in the item's directory and its parent directories are consulted."
msgstr "任意の conftest ファイルがこのフックを実装できます。 指定されたアイテムに対して、アイテムのディレクトリおよびその親ディレクトリにある conftest ファイルのみが参照されます。"

#: _pytest.hookspec.pytest_runtest_logfinish:1 of
msgid "Called at the end of running the runtest protocol for a single item."
msgstr "単一のアイテムに対して runtest プロトコルの実行を終了する際に呼び出されます。"

#: _pytest.hookspec.pytest_runtest_setup:1 of
msgid "Called to perform the setup phase for a test item."
msgstr "テストアイテムのセットアップフェーズを実行するために呼び出されます。"

#: _pytest.hookspec.pytest_runtest_setup:3 of
msgid "The default implementation runs ``setup()`` on ``item`` and all of its parents (which haven't been setup yet). This includes obtaining the values of fixtures required by the item (which haven't been obtained yet)."
msgstr "デフォルトの実装は、``item`` およびそのすべての親（まだセットアップされていないもの）に対して ``setup()`` を実行します。 これには、アイテムが必要とするフィクスチャの値を取得すること（まだ取得されていない場合）が含まれます。"

#: _pytest.hookspec.pytest_itemcollected:3
#: _pytest.hookspec.pytest_runtest_call:5
#: _pytest.hookspec.pytest_runtest_makereport:6
#: _pytest.hookspec.pytest_runtest_setup:8
#: _pytest.hookspec.pytest_runtest_teardown:8
#: _pytest.reports.TestReport.from_item_and_call:3 of
msgid "The item."
msgstr "アイテム。"

#: _pytest.hookspec.pytest_runtest_call:1 of
msgid "Called to run the test for test item (the call phase)."
msgstr "テストアイテムのテストを実行するために呼び出されます（コールフェーズ）。"

#: _pytest.hookspec.pytest_runtest_call:3 of
msgid "The default implementation calls ``item.runtest()``."
msgstr "デフォルトの実装は ``item.runtest()`` を呼び出します。"

#: _pytest.hookspec.pytest_runtest_teardown:1 of
msgid "Called to perform the teardown phase for a test item."
msgstr "テストアイテムのティアダウンフェーズを実行するために呼び出されます。"

#: _pytest.hookspec.pytest_runtest_teardown:3 of
msgid "The default implementation runs the finalizers and calls ``teardown()`` on ``item`` and all of its parents (which need to be torn down). This includes running the teardown phase of fixtures required by the item (if they go out of scope)."
msgstr "デフォルトの実装はファイナライザを実行し、``item`` およびそのすべての親（ティアダウンが必要なもの）に対して ``teardown()`` を呼び出します。 これには、アイテムが必要とするフィクスチャのティアダウンフェーズの実行（スコープ外になる場合）が含まれます。"

#: _pytest.hookspec.pytest_runtest_teardown:10 of
msgid "The scheduled-to-be-next test item (None if no further test item is scheduled). This argument is used to perform exact teardowns, i.e. calling just enough finalizers so that nextitem only needs to call setup functions."
msgstr "次に予定されているテストアイテム（次のテストアイテムが予定されていない場合は None）。 この引数は正確なティアダウンを実行するために使用されます。 つまり、nextitem がセットアップ関数のみを呼び出す必要があるように、ちょうど十分なファイナライザを呼び出します。"

#: _pytest.hookspec.pytest_runtest_makereport:1 of
msgid "Called to create a :class:`~pytest.TestReport` for each of the setup, call and teardown runtest phases of a test item."
msgstr "各セットアップ、コール、およびティアダウン runtest フェーズに対して :class:`~pytest.TestReport` を作成するために呼び出されます。"

#: _pytest.hookspec.pytest_runtest_makereport:7 of
msgid "The :class:`~pytest.CallInfo` for the phase."
msgstr "フェーズの :class:`~pytest.CallInfo`。"

#: ../../reference/reference.rst:751
msgid "For deeper understanding you may look at the default implementation of these hooks in ``_pytest.runner`` and maybe also in ``_pytest.pdb`` which interacts with ``_pytest.capture`` and its input/output capturing in order to immediately drop into interactive debugging when a test failure occurs."
msgstr "これらのフックのデフォルト実装については、``_pytest.runner`` および ``_pytest.pdb`` を参照してください。 これらは ``_pytest.capture`` とその入出力キャプチャと連携して、テスト失敗時にインタラクティブデバッグに直ちに移行します。"

#: _pytest.hookspec.pytest_pyfunc_call:1 of
msgid "Call underlying test function."
msgstr "基礎となるテスト関数を呼び出します。"

#: _pytest.hookspec.pytest_pyfunc_call:5 of
msgid "The function item."
msgstr "関数アイテム。"

#: ../../reference/reference.rst:761
msgid "Reporting hooks"
msgstr "レポートフック"

#: ../../reference/reference.rst:763
msgid "Session related reporting hooks:"
msgstr "セッション関連のレポートフック："

#: _pytest.hookspec.pytest_collectstart:1 of
msgid "Collector starts collecting."
msgstr "コレクターが収集を開始します。"

#: _pytest.hookspec.pytest_collectstart:3
#: _pytest.hookspec.pytest_make_collect_report:6 of
msgid "The collector."
msgstr "コレクター。"

#: _pytest.hookspec.pytest_make_collect_report:1 of
msgid "Perform :func:`collector.collect() <pytest.Collector.collect>` and return a :class:`~pytest.CollectReport`."
msgstr ":func:`collector.collect() <pytest.Collector.collect>` を実行し、:class:`~pytest.CollectReport` を返します。"

#: _pytest.hookspec.pytest_itemcollected:1 of
msgid "We just collected a test item."
msgstr "テストアイテムを収集しました。"

#: _pytest.hookspec.pytest_collectreport:1 of
msgid "Collector finished collecting."
msgstr "コレクターが収集を終了しました。"

#: _pytest.hookspec.pytest_collectreport:3 of
msgid "The collect report."
msgstr "収集レポート。"

#: _pytest.hookspec.pytest_deselected:1 of
msgid "Called for deselected test items, e.g. by keyword."
msgstr "キーワードなどで選択解除されたテストアイテムに対して呼び出されます。"

#: _pytest.hookspec.pytest_deselected:3 of
msgid "Note that this hook has two integration aspects for plugins:"
msgstr "このフックには、プラグインのための 2 つの統合側面があることに注意してください："

#: _pytest.hookspec.pytest_deselected:5 of
msgid "it can be *implemented* to be notified of deselected items"
msgstr "選択解除されたアイテムを通知するために *実装* できます。"

#: _pytest.hookspec.pytest_deselected:6 of
msgid "it must be *called* from :hook:`pytest_collection_modifyitems` implementations when items are deselected (to properly notify other plugins)."
msgstr "アイテムが選択解除されたときに、他のプラグインに適切に通知するために :hook:`pytest_collection_modifyitems` 実装から *呼び出される* 必要があります。"

#: _pytest.hookspec.pytest_deselected:9 of
msgid "May be called multiple times."
msgstr "複数回呼び出される場合があります。"

#: _pytest.hookspec.pytest_deselected:11 of
msgid "The items."
msgstr "アイテム。"

#: _pytest.hookspec.pytest_report_header:1 of
msgid "Return a string or list of strings to be displayed as header info for terminal reporting."
msgstr "ターミナルレポートのヘッダー情報として表示される文字列または文字列のリストを返します。"

#: _pytest.hookspec.pytest_report_collectionfinish:9
#: _pytest.hookspec.pytest_report_header:4 of
msgid "The starting dir."
msgstr "開始ディレクトリ。"

#: _pytest.hookspec.pytest_report_collectionfinish:11
#: _pytest.hookspec.pytest_report_header:6 of
msgid "The starting dir (deprecated)."
msgstr "開始ディレクトリ（非推奨）。"

#: _pytest.hookspec.pytest_report_collectionfinish:16
#: _pytest.hookspec.pytest_report_header:10 of
msgid "Lines returned by a plugin are displayed before those of plugins which ran before it. If you want to have your line(s) displayed first, use :ref:`trylast=True <plugin-hookorder>`."
msgstr "プラグインによって返された行は、それ以前に実行されたプラグインの行の前に表示されます。 行を最初に表示したい場合は、:ref:`trylast=True <plugin-hookorder>` を使用してください。"

#: _pytest.hookspec.pytest_report_collectionfinish:21
#: _pytest.hookspec.pytest_report_header:15 of
msgid "The ``start_path`` parameter was added as a :class:`pathlib.Path` equivalent of the ``startdir`` parameter. The ``startdir`` parameter has been deprecated."
msgstr "``start_path`` パラメータは、``startdir`` パラメータの :class:`pathlib.Path` 相当として追加されました。 ``startdir`` パラメータは非推奨となりました。"

#: _pytest.hookspec.pytest_report_collectionfinish:1 of
msgid "Return a string or list of strings to be displayed after collection has finished successfully."
msgstr "コレクションが正常に終了した後に表示される文字列または文字列のリストを返します。"

#: _pytest.hookspec.pytest_report_collectionfinish:4 of
msgid "These strings will be displayed after the standard \"collected X items\" message."
msgstr "これらの文字列は、標準の \"collected X items\" メッセージの後に表示されます。"

#: _pytest.hookspec.pytest_report_collectionfinish:12 of
msgid "List of pytest items that are going to be executed; this list should not be modified."
msgstr "実行される予定の pytest アイテムのリスト。 このリストは変更しないでください。"

#: _pytest.hookspec.pytest_report_teststatus:1 of
msgid "Return result-category, shortletter and verbose word for status reporting."
msgstr "ステータスレポートのために、結果カテゴリ、短い文字、および詳細な単語を返します。"

#: _pytest.hookspec.pytest_report_teststatus:4 of
msgid "The result-category is a category in which to count the result, for example \"passed\", \"skipped\", \"error\" or the empty string."
msgstr "結果カテゴリは、結果をカウントするカテゴリです。 例えば \"passed\"、\"skipped\"、\"error\" または空文字列です。"

#: _pytest.hookspec.pytest_report_teststatus:7 of
msgid "The shortletter is shown as testing progresses, for example \".\", \"s\", \"E\" or the empty string."
msgstr "短い文字は、テストの進行中に表示されます。 例えば \".\"、\"s\"、\"E\" または空文字列です。"

#: _pytest.hookspec.pytest_report_teststatus:10 of
msgid "The verbose word is shown as testing progresses in verbose mode, for example \"PASSED\", \"SKIPPED\", \"ERROR\" or the empty string."
msgstr "詳細な単語は、詳細モードでテストの進行中に表示されます。 例えば \"PASSED\"、\"SKIPPED\"、\"ERROR\" または空文字列です。"

#: _pytest.hookspec.pytest_report_teststatus:13 of
#, python-brace-format
msgid "pytest may style these implicitly according to the report outcome. To provide explicit styling, return a tuple for the verbose word, for example ``\"rerun\", \"R\", (\"RERUN\", {\"yellow\": True})``."
msgstr "pytest はレポートの結果に応じてこれらを暗黙的にスタイル設定する場合があります。 明示的なスタイル設定を提供するには、詳細な単語のタプルを返します。 例えば ``\"rerun\", \"R\", (\"RERUN\", {\"yellow\": True})`` のように。"

#: _pytest.hookspec.pytest_report_teststatus:17 of
msgid "The report object whose status is to be returned."
msgstr "ステータスを返すレポートオブジェクト。"

#: _pytest.hookspec.pytest_report_teststatus:19 of
msgid "The test status."
msgstr "テストステータス。"

#: _pytest.hookspec.pytest_report_to_serializable:1 of
msgid "Serialize the given report object into a data structure suitable for sending over the wire, e.g. converted to JSON."
msgstr "レポートオブジェクトをシリアライズして、例えば JSON に変換するなど、ワイヤー越しに送信するのに適したデータ構造にします。"

#: _pytest.hookspec.pytest_report_to_serializable:5 of
msgid "The report."
msgstr "レポート。"

#: _pytest.hookspec.pytest_report_from_serializable:9
#: _pytest.hookspec.pytest_report_to_serializable:10 of
msgid "Any conftest file can implement this hook. The exact details may depend on the plugin which calls the hook."
msgstr "任意の conftest ファイルがこのフックを実装できます。 詳細は、このフックを呼び出すプラグインによって異なる場合があります。"

#: _pytest.hookspec.pytest_report_from_serializable:1 of
msgid "Restore a report object previously serialized with :hook:`pytest_report_to_serializable`."
msgstr ":hook:`pytest_report_to_serializable` で以前にシリアライズされたレポートオブジェクトを復元します。"

#: _pytest.hookspec.pytest_terminal_summary:1 of
msgid "Add a section to terminal summary reporting."
msgstr "ターミナルサマリーレポートにセクションを追加します。"

#: _pytest.hookspec.pytest_terminal_summary:3 of
msgid "The internal terminal reporter object."
msgstr "内部ターミナルレポーターオブジェクト。"

#: _pytest.hookspec.pytest_terminal_summary:4 of
msgid "The exit status that will be reported back to the OS."
msgstr "OS に報告される終了ステータス。"

#: _pytest.hookspec.pytest_terminal_summary:7 of
msgid "The ``config`` parameter."
msgstr "``config`` パラメータ。"

#: _pytest.hookspec.pytest_fixture_setup:1 of
msgid "Perform fixture setup execution."
msgstr "フィクスチャのセットアップ実行を行います。"

#: _pytest.hookspec.pytest_fixture_post_finalizer:5
#: _pytest.hookspec.pytest_fixture_setup:3 of
msgid "The fixture definition object."
msgstr "フィクスチャ定義オブジェクト。"

#: _pytest.hookspec.pytest_fixture_post_finalizer:7
#: _pytest.hookspec.pytest_fixture_setup:5 of
msgid "The fixture request object."
msgstr "フィクスチャリクエストオブジェクト。"

#: _pytest.hookspec.pytest_fixture_setup:7 of
msgid "The return value of the call to the fixture function."
msgstr "フィクスチャ関数の呼び出しの戻り値。"

#: _pytest.hookspec.pytest_fixture_setup:13 of
msgid "If the fixture function returns None, other implementations of this hook function will continue to be called, according to the behavior of the :ref:`firstresult` option."
msgstr "フィクスチャ関数が None を返す場合、このフック関数の他の実装は :ref:`firstresult` オプションの動作に従って呼び出され続けます。"

#: _pytest.hookspec.pytest_fixture_post_finalizer:13
#: _pytest.hookspec.pytest_fixture_setup:20 of
msgid "Any conftest file can implement this hook. For a given fixture, only conftest files in the fixture scope's directory and its parent directories are consulted."
msgstr "任意の conftest ファイルがこのフックを実装できます。 指定されたフィクスチャに対して、フィクスチャスコープのディレクトリおよびその親ディレクトリにある conftest ファイルのみが参照されます。"

#: _pytest.hookspec.pytest_fixture_post_finalizer:1 of
msgid "Called after fixture teardown, but before the cache is cleared, so the fixture result ``fixturedef.cached_result`` is still available (not ``None``)."
msgstr "フィクスチャのティアダウン後、キャッシュがクリアされる前に呼び出されます。 そのため、フィクスチャ結果 ``fixturedef.cached_result`` はまだ利用可能です（``None`` ではありません）。"

#: _pytest.hookspec.pytest_warning_recorded:1 of
msgid "Process a warning captured by the internal pytest warnings plugin."
msgstr "内部 pytest 警告プラグインによってキャプチャされた警告を処理します。"

#: _pytest.hookspec.pytest_warning_recorded:3 of
msgid "The captured warning. This is the same object produced by :class:`warnings.catch_warnings`, and contains the same attributes as the parameters of :py:func:`warnings.showwarning`."
msgstr "キャプチャされた警告。 これは :class:`warnings.catch_warnings` によって生成されたオブジェクトと同じであり、:py:func:`warnings.showwarning` のパラメータと同じ属性を持ちます。"

#: _pytest.hookspec.pytest_warning_recorded:7 of
msgid "Indicates when the warning was captured. Possible values:  * ``\"config\"``: during pytest configuration/initialization stage. * ``\"collect\"``: during test collection. * ``\"runtest\"``: during test execution."
msgstr ""

#: _pytest.hookspec.pytest_warning_recorded:8 of
msgid "Indicates when the warning was captured. Possible values:"
msgstr "警告がキャプチャされた時点を示します。 可能な値:"

#: _pytest.hookspec.pytest_warning_recorded:10 of
msgid "``\"config\"``: during pytest configuration/initialization stage."
msgstr "``\"config\"``: pytest の設定/初期化段階中。"

#: _pytest.hookspec.pytest_warning_recorded:11 of
msgid "``\"collect\"``: during test collection."
msgstr "``\"collect\"``: テストコレクション中。"

#: _pytest.hookspec.pytest_warning_recorded:12 of
msgid "``\"runtest\"``: during test execution."
msgstr "``\"runtest\"``: テスト実行中。"

#: _pytest.hookspec.pytest_warning_recorded:14 of
msgid "Full id of the item. Empty string for warnings that are not specific to a particular node."
msgstr "アイテムの完全な ID。 特定のノードに特有でない警告の場合は空文字列。"

#: _pytest.hookspec.pytest_warning_recorded:18 of
msgid "When available, holds information about the execution context of the captured warning (filename, linenumber, function). ``function`` evaluates to <module> when the execution context is at the module level."
msgstr "利用可能な場合、キャプチャされた警告の実行コンテキスト（ファイル名、行番号、関数）に関する情報を保持します。 実行コンテキストがモジュールレベルの場合、``function`` は <module> と評価されます。"

#: _pytest.hookspec.pytest_warning_recorded:28 of
msgid "Any conftest file can implement this hook. If the warning is specific to a particular node, only conftest files in parent directories of the node are consulted."
msgstr "任意の conftest ファイルがこのフックを実装できます。 警告が特定のノードに特有である場合、そのノードの親ディレクトリにある conftest ファイルのみが参照されます。"

#: ../../reference/reference.rst:794
msgid "Central hook for reporting about test execution:"
msgstr "テスト実行に関するレポートのための中央フック："

#: _pytest.hookspec.pytest_runtest_logreport:1 of
msgid "Process the :class:`~pytest.TestReport` produced for each of the setup, call and teardown runtest phases of an item."
msgstr "各セットアップ、コール、およびティアダウン runtest フェーズに対して生成された :class:`~pytest.TestReport` を処理します。"

#: ../../reference/reference.rst:799
msgid "Assertion related hooks:"
msgstr "アサーション関連のフック："

#: _pytest.hookspec.pytest_assertrepr_compare:1 of
msgid "Return explanation for comparisons in failing assert expressions."
msgstr "失敗したアサーション式の比較に対する説明を返します。"

#: _pytest.hookspec.pytest_assertrepr_compare:3 of
msgid "Return None for no custom explanation, otherwise return a list of strings. The strings will be joined by newlines but any newlines *in* a string will be escaped. Note that all but the first line will be indented slightly, the intention is for the first line to be a summary."
msgstr "カスタムの説明がない場合は None を返し、それ以外の場合は文字列のリストを返します。 文字列は改行で結合されますが、文字列内の改行はエスケープされます。 最初の行以外は少しインデントされることに注意してください。 最初の行は要約のためのものです。"

#: _pytest.hookspec.pytest_assertrepr_compare:9 of
msgid "The operator, e.g. `\"==\"`, `\"!=\"`, `\"not in\"`."
msgstr "演算子。 例：`\"==\"`、`\"!=\"`、`\"not in\"`。"

#: _pytest.hookspec.pytest_assertrepr_compare:10 of
msgid "The left operand."
msgstr "左オペランド。"

#: _pytest.hookspec.pytest_assertrepr_compare:11 of
msgid "The right operand."
msgstr "右オペランド。"

#: _pytest.hookspec.pytest_assertion_pass:1 of
msgid "Called whenever an assertion passes."
msgstr "アサーションが成功するたびに呼び出されます。"

#: _pytest.hookspec.pytest_assertion_pass:5 of
msgid "Use this hook to do some processing after a passing assertion. The original assertion information is available in the `orig` string and the pytest introspected assertion information is available in the `expl` string."
msgstr "このフックを使用して、成功したアサーションの後に何らかの処理を行います。 元のアサーション情報は `orig` 文字列にあり、pytest によって内省されたアサーション情報は `expl` 文字列にあります。"

#: _pytest.hookspec.pytest_assertion_pass:10 of
msgid "This hook must be explicitly enabled by the ``enable_assertion_pass_hook`` ini-file option:"
msgstr "このフックは ``enable_assertion_pass_hook`` ini ファイルオプションによって明示的に有効にする必要があります："

#: _pytest.hookspec.pytest_assertion_pass:18 of
msgid "You need to **clean the .pyc** files in your project directory and interpreter libraries when enabling this option, as assertions will require to be re-written."
msgstr "このオプションを有効にする際には、プロジェクトディレクトリおよびインタープリタライブラリ内の **.pyc をクリーンアップ** する必要があります。 アサーションは再書き込みが必要です。"

#: _pytest.hookspec.pytest_assertion_pass:21 of
msgid "pytest item object of current test."
msgstr "現在のテストの pytest アイテムオブジェクト。"

#: _pytest.hookspec.pytest_assertion_pass:22 of
msgid "Line number of the assert statement."
msgstr "アサート文の行番号。"

#: _pytest.hookspec.pytest_assertion_pass:23 of
msgid "String with the original assertion."
msgstr "元のアサーションを含む文字列。"

#: _pytest.hookspec.pytest_assertion_pass:24 of
msgid "String with the assert explanation."
msgstr "アサートの説明を含む文字列。"

#: ../../reference/reference.rst:808
msgid "Debugging/Interaction hooks"
msgstr "デバッグ/インタラクションフック"

#: ../../reference/reference.rst:810
msgid "There are few hooks which can be used for special reporting or interaction with exceptions:"
msgstr "例外に対する特別なレポートやインタラクションに使用できるフックがいくつかあります："

#: _pytest.hookspec.pytest_internalerror:1 of
msgid "Called for internal errors."
msgstr "内部エラーに対して呼び出されます。"

#: _pytest.hookspec.pytest_internalerror:3 of
msgid "Return True to suppress the fallback handling of printing an INTERNALERROR message directly to sys.stderr."
msgstr "INTERNALERROR メッセージを直接 sys.stderr に出力するフォールバック処理を抑制するには True を返します。"

#: _pytest.hookspec.pytest_internalerror:6 of
msgid "The exception repr object."
msgstr "例外の再現オブジェクト。"

#: _pytest.hookspec.pytest_internalerror:7
#: _pytest.hookspec.pytest_keyboard_interrupt:3 of
msgid "The exception info."
msgstr "例外情報。"

#: _pytest.hookspec.pytest_keyboard_interrupt:1 of
msgid "Called for keyboard interrupt."
msgstr "キーボード割り込みに対して呼び出されます。"

#: _pytest.hookspec.pytest_exception_interact:1 of
msgid "Called when an exception was raised which can potentially be interactively handled."
msgstr "インタラクティブに処理できる可能性のある例外が発生したときに呼び出されます。"

#: _pytest.hookspec.pytest_exception_interact:4 of
msgid "May be called during collection (see :hook:`pytest_make_collect_report`), in which case ``report`` is a :class:`~pytest.CollectReport`."
msgstr "コレクション中に呼び出される場合があります（:hook:`pytest_make_collect_report` を参照）。 この場合、``report`` は :class:`~pytest.CollectReport` です。"

#: _pytest.hookspec.pytest_exception_interact:7 of
msgid "May be called during runtest of an item (see :hook:`pytest_runtest_protocol`), in which case ``report`` is a :class:`~pytest.TestReport`."
msgstr "アイテムの runtest 中に呼び出される場合があります（:hook:`pytest_runtest_protocol` を参照）。 この場合、``report`` は :class:`~pytest.TestReport` です。"

#: _pytest.hookspec.pytest_exception_interact:10 of
msgid "This hook is not called if the exception that was raised is an internal exception like ``skip.Exception``."
msgstr "発生した例外が ``skip.Exception`` のような内部例外である場合、このフックは呼び出されません。"

#: _pytest.hookspec.pytest_exception_interact:13 of
msgid "The item or collector."
msgstr "アイテムまたはコレクター。"

#: _pytest.hookspec.pytest_exception_interact:15 of
msgid "The call information. Contains the exception."
msgstr "呼び出し情報。 例外を含みます。"

#: _pytest.hookspec.pytest_exception_interact:17 of
msgid "The collection or test report."
msgstr "コレクションまたはテストレポート。"

#: _pytest.hookspec.pytest_exception_interact:23 of
msgid "Any conftest file can implement this hook. For a given node, only conftest files in parent directories of the node are consulted."
msgstr "任意の conftest ファイルがこのフックを実装できます。 指定されたノードに対して、そのノードの親ディレクトリにある conftest ファイルのみが参照されます。"

#: _pytest.hookspec.pytest_enter_pdb:1 of
msgid "Called upon pdb.set_trace()."
msgstr "pdb.set_trace() が呼び出されたときに呼び出されます。"

#: _pytest.hookspec.pytest_enter_pdb:3 of
msgid "Can be used by plugins to take special action just before the python debugger enters interactive mode."
msgstr "プラグインが Python デバッガーがインタラクティブモードに入る直前に特別なアクションを実行するために使用できます。"

#: _pytest.hookspec.pytest_enter_pdb:7 _pytest.hookspec.pytest_leave_pdb:7 of
msgid "The Pdb instance."
msgstr "Pdb インスタンス。"

#: _pytest.hookspec.pytest_leave_pdb:1 of
msgid "Called when leaving pdb (e.g. with continue after pdb.set_trace())."
msgstr "pdb を離れるときに呼び出されます（例：pdb.set_trace() の後に continue で）。"

#: _pytest.hookspec.pytest_leave_pdb:3 of
msgid "Can be used by plugins to take special action just after the python debugger leaves interactive mode."
msgstr "プラグインが Python デバッガーがインタラクティブモードを離れた直後に特別なアクションを実行するために使用できます。"

#: ../../reference/reference.rst:826
msgid "Collection tree objects"
msgstr "コレクションツリーオブジェクト"

#: ../../reference/reference.rst:828
msgid "These are the collector and item classes (collectively called \"nodes\") which make up the collection tree."
msgstr "これらは、コレクションツリーを構成するコレクターおよびアイテムクラス（総称して「ノード」と呼ばれます）です。"

#: ../../reference/reference.rst:832
msgid "Node"
msgstr "ノード"

#: _pytest.nodes.Node:1 of
msgid "Bases: :py:class:`~abc.ABC`"
msgstr "Bases: :py:class:`~abc.ABC`"

#: _pytest.nodes.Node:1 of
msgid "Base class of :class:`Collector` and :class:`Item`, the components of the test collection tree."
msgstr ":class:`Collector` および :class:`Item` の基本クラス。 これらはテストコレクションツリーのコンポーネントです。"

#: _pytest.nodes.Node:4 of
msgid "``Collector``\\'s are the internal nodes of the tree, and ``Item``\\'s are the leaf nodes."
msgstr "``Collector`` はツリーの内部ノードであり、``Item`` はリーフノードです。"

#: ../../../../docstring _pytest.nodes.Node.fspath:1 of
msgid "A ``LEGACY_PATH`` copy of the :attr:`path` attribute. Intended for usage for methods not migrated to ``pathlib.Path`` yet, such as :meth:`Item.reportinfo <pytest.Item.reportinfo>`. Will be deprecated in a future release, prefer using :attr:`path` instead."
msgstr "``LEGACY_PATH`` の :attr:`path` 属性のコピー。 :meth:`Item.reportinfo <pytest.Item.reportinfo>` など、まだ ``pathlib.Path`` に移行されていないメソッドの使用を意図しています。 将来のリリースで非推奨となる予定です。 代わりに :attr:`path` を使用してください。"

#: ../../../../docstring _pytest.nodes.FSCollector.name:1
#: _pytest.nodes.Node.name:1 _pytest.python.FunctionDefinition.name:1 of
#: pytest.Class.name:1 pytest.Collector.name:1 pytest.Dir.name:1
#: pytest.Directory.name:1 pytest.File.name:1 pytest.Function.name:1
#: pytest.Item.name:1 pytest.Module.name:1 pytest.Package.name:1
#: pytest.Session.name:1
msgid "A unique name within the scope of the parent node."
msgstr "親ノードのスコープ内で一意の名前。"

#: ../../../../docstring _pytest.nodes.FSCollector.parent:1
#: _pytest.nodes.Node.parent:1 _pytest.python.FunctionDefinition.parent:1 of
#: pytest.Class.parent:1 pytest.Collector.parent:1 pytest.Dir.parent:1
#: pytest.Directory.parent:1 pytest.File.parent:1 pytest.Function.parent:1
#: pytest.Item.parent:1 pytest.Module.parent:1 pytest.Package.parent:1
#: pytest.Session.parent:1
msgid "The parent collector node."
msgstr "親コレクターノード。"

#: ../../../../docstring _pytest.nodes.FSCollector.session:1
#: _pytest.nodes.Node.session:1 _pytest.python.FunctionDefinition.session:1 of
#: pytest.Class.session:1 pytest.Collector.session:1 pytest.Dir.session:1
#: pytest.Directory.session:1 pytest.File.session:1 pytest.Function.session:1
#: pytest.Item.session:1 pytest.Module.session:1 pytest.Package.session:1
#: pytest.Session.session:1
msgid "The pytest session this node is part of."
msgstr "このノードが属する pytest セッション。"

#: ../../../../docstring _pytest.nodes.FSCollector.path:1
#: _pytest.nodes.Node.path:1 _pytest.python.FunctionDefinition.path:1 of
#: pytest.Class.path:1 pytest.Collector.path:1 pytest.Dir.path:1
#: pytest.Directory.path:1 pytest.File.path:1 pytest.Function.path:1
#: pytest.Item.path:1 pytest.Module.path:1 pytest.Package.path:1
#: pytest.Session.path:1
msgid "Filesystem path where this node was collected from (can be None)."
msgstr "このノードが収集されたファイルシステムパス（None の場合があります）。"

#: ../../../../docstring _pytest.nodes.Node.keywords:1 of
msgid "Keywords/markers collected from all scopes."
msgstr "すべてのスコープから収集されたキーワード/マーカー。"

#: ../../../../docstring _pytest.nodes.Node.own_markers:1 of
msgid "The marker objects belonging to this node."
msgstr "このノードに属するマーカーオブジェクト。"

#: ../../../../docstring _pytest.nodes.Node.extra_keyword_matches:1 of
msgid "Allow adding of extra keywords to use for matching."
msgstr "マッチングに使用する追加のキーワードを追加できます。"

#: ../../../../docstring _pytest.nodes.Node.stash:1 of
msgid "A place where plugins can store information on the node for their own use."
msgstr "プラグインがノードに関する情報を独自に使用するために保存できる場所。"

#: _pytest.nodes.Node.from_parent:1 of
msgid "Public constructor for Nodes."
msgstr "ノードの公開コンストラクター。"

#: _pytest.nodes.Node.from_parent:3 of
msgid "This indirection got introduced in order to enable removing the fragile logic from the node constructors."
msgstr "この間接参照は、ノードコンストラクターから脆弱なロジックを削除できるようにするために導入されました。"

#: _pytest.nodes.Node.from_parent:6 of
msgid "Subclasses can use ``super().from_parent(...)`` when overriding the construction."
msgstr "サブクラスは、コンストラクションをオーバーライドする際に ``super().from_parent(...)`` を使用できます。"

#: _pytest.nodes.Node.from_parent:9 of
msgid "The parent node of this Node."
msgstr "このノードの親ノード。"

#: _pytest.nodes.Node.ihook:1 of
msgid "fspath-sensitive hook proxy used to call pytest hooks."
msgstr "pytest フックを呼び出すために使用される fspath に敏感なフックプロキシ。"

#: _pytest.nodes.Node.warn:1 of
msgid "Issue a warning for this Node."
msgstr "このノードに対して警告を発行します。"

#: _pytest.nodes.Node.warn:3 of
msgid "Warnings will be displayed after the test session, unless explicitly suppressed."
msgstr "警告はテストセッションの後に表示されます。 明示的に抑制されない限り。"

#: _pytest.nodes.Node.warn:5 of
msgid "The warning instance to issue."
msgstr "発行する警告インスタンス。"

#: _pytest.nodes.Node.warn:8 of
msgid "If ``warning`` instance is not a subclass of Warning."
msgstr "``warning`` インスタンスが Warning のサブクラスでない場合。"

#: _pytest.nodes.Node.warn:10 of
msgid "Example usage:"
msgstr "使用例："

#: _pytest.nodes.Node.warn:17 of
msgid "Any subclass of :class:`Warning` is now accepted, rather than only :class:`PytestWarning <pytest.PytestWarning>` subclasses."
msgstr ":class:`Warning` の任意のサブクラスが受け入れられるようになりました。 以前は :class:`PytestWarning <pytest.PytestWarning>` のサブクラスのみでした。"

#: _pytest.nodes.Node.nodeid:1 of
msgid "A ::-separated string denoting its collection tree address."
msgstr "コレクションツリーアドレスを示す :: で区切られた文字列。"

#: _pytest.nodes.Node.iter_parents:1 of
msgid "Iterate over all parent collectors starting from and including self up to the root of the collection tree."
msgstr "コレクションツリーのルートまで、自己を含むすべての親コレクターを反復処理します。"

#: _pytest.nodes.Node.listchain:1 of
msgid "Return a list of all parent collectors starting from the root of the collection tree down to and including self."
msgstr "コレクションツリーのルートから自己を含むすべての親コレクターのリストを返します。"

#: _pytest.nodes.Node.add_marker:1 of
msgid "Dynamically add a marker object to the node."
msgstr "マーカーオブジェクトをノードに動的に追加します。"

#: _pytest.nodes.Node.add_marker:3 of
msgid "The marker."
msgstr "マーカー。"

#: _pytest.nodes.Node.add_marker:5 of
msgid "Whether to append the marker, or prepend it."
msgstr "マーカーを追加するか、先頭に追加するか。"

#: _pytest.nodes.Node.iter_markers:1
#: _pytest.nodes.Node.iter_markers_with_node:1 of
msgid "Iterate over all markers of the node."
msgstr "ノードのすべてのマーカーを反復処理します。"

#: _pytest.nodes.Node.iter_markers:3
#: _pytest.nodes.Node.iter_markers_with_node:3 of
msgid "If given, filter the results by the name attribute."
msgstr "指定された場合、name 属性で結果をフィルタリングします。"

#: _pytest.nodes.Node.iter_markers:4 of
msgid "An iterator of the markers of the node."
msgstr "ノードのマーカーのイテレータ。"

#: _pytest.nodes.Node.iter_markers_with_node:4 of
msgid "An iterator of (node, mark) tuples."
msgstr "(node, mark) タプルのイテレータ。"

#: _pytest.nodes.Node.get_closest_marker:1 of
msgid "Return the first marker matching the name, from closest (for example function) to farther level (for example module level)."
msgstr "名前に一致する最初のマーカーを返します。 最も近いレベル（例えば関数）から遠いレベル（例えばモジュールレベル）まで。"

#: _pytest.nodes.Node.get_closest_marker:4 of
msgid "Fallback return value if no marker was found."
msgstr "マーカーが見つからなかった場合のフォールバック戻り値。"

#: _pytest.nodes.Node.get_closest_marker:5 of
msgid "Name to filter by."
msgstr "フィルタリングする名前。"

#: _pytest.nodes.Node.listextrakeywords:1 of
msgid "Return a set of all extra keywords in self and any parents."
msgstr "自己および任意の親にあるすべての追加キーワードのセットを返します。"

#: _pytest.nodes.Node.addfinalizer:1 of
msgid "Register a function to be called without arguments when this node is finalized."
msgstr "このノードが終了するときに引数なしで呼び出される関数を登録します。"

#: _pytest.nodes.Node.addfinalizer:4 of
msgid "This method can only be called when this node is active in a setup chain, for example during self.setup()."
msgstr "このメソッドは、このノードがセットアップチェーンでアクティブな場合にのみ呼び出すことができます。 例えば self.setup() 中に。"

#: _pytest.nodes.Node.getparent:1 of
msgid "Get the closest parent node (including self) which is an instance of the given class."
msgstr "指定されたクラスのインスタンスである最も近い親ノード（自己を含む）を取得します。"

#: _pytest.nodes.Node.getparent:4 of
msgid "The node class to search for."
msgstr "検索するノードクラス。"

#: _pytest.nodes.Node.getparent:5 of
msgid "The node, if found."
msgstr "見つかった場合のノード。"

#: _pytest.nodes.Node.repr_failure:1 _pytest.python.Function.repr_failure:1 of
msgid "Return a representation of a collection or test failure."
msgstr "コレクションまたはテストの失敗の表現を返します。"

#: _pytest.nodes.Item.reportinfo:9 _pytest.nodes.Item.runtest:5
#: _pytest.nodes.Node.repr_failure:3 _pytest.python.Function.repr_failure:3 of
msgid ":ref:`non-python tests`"
msgstr ":ref:`non-python tests`"

#: _pytest.nodes.Collector.repr_failure:3 _pytest.nodes.Node.repr_failure:5
#: _pytest.python.Function.repr_failure:5 of
msgid "Exception information for the failure."
msgstr "失敗の例外情報。"

#: ../../reference/reference.rst:839
msgid "Collector"
msgstr "コレクター"

#: _pytest.nodes.Collector:1 _pytest.nodes.Item:1 of
msgid "Bases: :py:class:`~_pytest.nodes.Node`, :py:class:`~abc.ABC`"
msgstr "Bases: :py:class:`~_pytest.nodes.Node`, :py:class:`~abc.ABC`"

#: _pytest.nodes.Collector:1 of
msgid "Base class of all collectors."
msgstr "すべてのコレクターの基本クラス。"

#: _pytest.nodes.Collector:3 of
msgid "Collector create children through `collect()` and thus iteratively build the collection tree."
msgstr "コレクターは `collect()` を通じて子を作成し、コレクションツリーを反復的に構築します。"

#: _pytest.config.exceptions.UsageError:1 _pytest.main.Failed:1
#: _pytest.nodes.Collector.CollectError:1 of
msgid "Bases: :py:class:`Exception`"
msgstr "Bases: :py:class:`Exception`"

#: _pytest.nodes.Collector.CollectError:1 of
msgid "An error during collection, contains a custom message."
msgstr "コレクション中のエラー。 カスタムメッセージを含みます。"

#: _pytest.main.Dir.collect:1 _pytest.main.Session.collect:1
#: _pytest.nodes.Collector.collect:1 _pytest.python.Class.collect:1
#: _pytest.python.Module.collect:1 _pytest.python.Package.collect:1 of
msgid "Collect children (items and collectors) for this collector."
msgstr "このコレクターの子（アイテムおよびコレクター）を収集します。"

#: _pytest.nodes.Collector.repr_failure:1 of
msgid "Return a representation of a collection failure."
msgstr "コレクションの失敗の表現を返します。"

#: ../../reference/reference.rst:846
msgid "Item"
msgstr "アイテム"

#: _pytest.nodes.Item:1 of
msgid "Base class of all test invocation items."
msgstr "すべてのテスト呼び出しアイテムの基本クラス。"

#: _pytest.nodes.Item:3 of
msgid "Note that for a single function there might be multiple test invocation items."
msgstr "単一の関数に対して複数のテスト呼び出しアイテムが存在する場合があることに注意してください。"

#: ../../../../docstring of pytest.Item.user_properties:1
msgid "A list of tuples (name, value) that holds user defined properties for this test."
msgstr "このテストのユーザー定義プロパティを保持する (name, value) タプルのリスト。"

#: _pytest.nodes.Item.runtest:1 of
msgid "Run the test case for this item."
msgstr "このアイテムのテストケースを実行します。"

#: _pytest.nodes.Item.runtest:3 of
msgid "Must be implemented by subclasses."
msgstr "サブクラスによって実装される必要があります。"

#: _pytest.nodes.Item.add_report_section:1 of
msgid "Add a new report section, similar to what's done internally to add stdout and stderr captured output::"
msgstr "新しいレポートセクションを追加します。 標準出力および標準エラーキャプチャ出力を追加するために内部で行われることと同様です："

#: _pytest.nodes.Item.add_report_section:6 of
msgid "One of the possible capture states, ``\"setup\"``, ``\"call\"``, ``\"teardown\"``."
msgstr "可能なキャプチャ状態のいずれか。 ``\"setup\"``、``\"call\"``、``\"teardown\"``。"

#: _pytest.nodes.Item.add_report_section:8 of
msgid "Name of the section, can be customized at will. Pytest uses ``\"stdout\"`` and ``\"stderr\"`` internally."
msgstr "セクションの名前。 自由にカスタマイズできます。 Pytest は内部的に ``\"stdout\"`` および ``\"stderr\"`` を使用します。"

#: _pytest.nodes.Item.add_report_section:11 of
msgid "The full contents as a string."
msgstr "文字列としての完全な内容。"

#: _pytest.nodes.Item.reportinfo:1 of
msgid "Get location information for this item for test reports."
msgstr "テストレポートのためにこのアイテムの場所情報を取得します。"

#: _pytest.nodes.Item.reportinfo:3 of
msgid "Returns a tuple with three elements:"
msgstr "3 つの要素を持つタプルを返します："

#: _pytest.nodes.Item.reportinfo:5 of
msgid "The path of the test (default ``self.path``)"
msgstr "テストのパス（デフォルトは ``self.path``）"

#: _pytest.nodes.Item.reportinfo:6 of
msgid "The 0-based line number of the test (default ``None``)"
msgstr "テストの 0 ベースの行番号（デフォルトは ``None``）"

#: _pytest.nodes.Item.reportinfo:7 of
msgid "A name of the test to be shown (default ``\"\"``)"
msgstr "表示されるテストの名前（デフォルトは ``\"\"``）"

#: of pytest.Item.location:1
msgid "Returns a tuple of ``(relfspath, lineno, testname)`` for this item where ``relfspath`` is file path relative to ``config.rootpath`` and lineno is a 0-based line number."
msgstr "このアイテムの ``(relfspath, lineno, testname)`` のタプルを返します。 ここで ``relfspath`` は ``config.rootpath`` に対するファイルパスであり、lineno は 0 ベースの行番号です。"

#: ../../reference/reference.rst:853
msgid "File"
msgstr "ファイル"

#: _pytest.nodes.File:1 of
msgid "Bases: :py:class:`~_pytest.nodes.FSCollector`, :py:class:`~abc.ABC`"
msgstr "Bases: :py:class:`~_pytest.nodes.FSCollector`, :py:class:`~abc.ABC`"

#: _pytest.nodes.File:1 of
msgid "Base class for collecting tests from a file."
msgstr "ファイルからテストを収集するための基本クラス。"

#: _pytest.nodes.File:3 of
msgid ":ref:`non-python tests`."
msgstr ":ref:`non-python tests`。"

#: ../../reference/reference.rst:860
msgid "FSCollector"
msgstr "FSCollector"

#: _pytest.nodes.FSCollector:1 of
msgid "Bases: :py:class:`~_pytest.nodes.Collector`, :py:class:`~abc.ABC`"
msgstr "Bases: :py:class:`~_pytest.nodes.Collector`, :py:class:`~abc.ABC`"

#: _pytest.nodes.FSCollector:1 of
msgid "Base class for filesystem collectors."
msgstr "ファイルシステムコレクターの基本クラス。"

#: _pytest.main.Dir.from_parent:1 _pytest.nodes.FSCollector.from_parent:1
#: _pytest.python.Class.from_parent:1 _pytest.python.Function.from_parent:1 of
msgid "The public constructor."
msgstr "公開コンストラクター。"

#: ../../reference/reference.rst:867
msgid "Session"
msgstr "セッション"

#: _pytest.main.Session:1 of
msgid "Bases: :py:class:`~_pytest.nodes.Collector`"
msgstr "Bases: :py:class:`~_pytest.nodes.Collector`"

#: _pytest.main.Session:1 of
msgid "The root of the collection tree."
msgstr "コレクションツリーのルート。"

#: _pytest.main.Session:3 of
msgid "``Session`` collects the initial paths given as arguments to pytest."
msgstr "``Session`` は pytest に引数として渡された初期パスを収集します。"

#: ../../../../docstring builtins.Interrupted:1 of
msgid "Bases: :py:class:`KeyboardInterrupt`"
msgstr "Bases: :py:class:`KeyboardInterrupt`"

#: ../../../../docstring builtins.Interrupted:1 of
msgid "Signals that the test run was interrupted."
msgstr "テスト実行が中断されたことを示します。"

#: _pytest.main.Failed:1 of
msgid "Signals a stop as failed test run."
msgstr "失敗したテスト実行として停止を示します。"

#: of pytest.Session.startpath:1
msgid "The path from which pytest was invoked."
msgstr "pytest が呼び出されたパス。"

#: _pytest.main.Session.isinitpath:1 of
msgid "Is path an initial path?"
msgstr "パスは初期パスですか？"

#: _pytest.main.Session.isinitpath:3 of
msgid "An initial path is a path explicitly given to pytest on the command line."
msgstr "初期パスは、コマンドラインで pytest に明示的に渡されたパスです。"

#: _pytest.main.Session.isinitpath:6 of
msgid "If set, also return True if the path is a parent of an initial path."
msgstr "設定されている場合、パスが初期パスの親である場合も True を返します。"

#: _pytest.main.Session.isinitpath:9 of
msgid "Added the ``with_parents`` parameter."
msgstr "``with_parents`` パラメータが追加されました。"

#: _pytest.main.Session.perform_collect:1 of
msgid "Perform the collection phase for this session."
msgstr "このセッションのコレクションフェーズを実行します。"

#: _pytest.main.Session.perform_collect:3 of
msgid "This is called by the default :hook:`pytest_collection` hook implementation; see the documentation of this hook for more details. For testing purposes, it may also be called directly on a fresh ``Session``."
msgstr "これはデフォルトの :hook:`pytest_collection` フック実装によって呼び出されます。 詳細については、このフックのドキュメントを参照してください。 テスト目的で、新しい ``Session`` に対して直接呼び出すこともできます。"

#: _pytest.main.Session.perform_collect:8 of
msgid "This function normally recursively expands any collectors collected from the session to their items, and only items are returned. For testing purposes, this may be suppressed by passing ``genitems=False``, in which case the return value contains these collectors unexpanded, and ``session.items`` is empty."
msgstr "この関数は通常、セッションから収集されたコレクターを再帰的に展開してそのアイテムにし、アイテムのみを返します。 テスト目的で、``genitems=False`` を渡すことでこれを抑制できます。 この場合、戻り値にはこれらのコレクターが未展開のまま含まれ、``session.items`` は空です。"

#: ../../reference/reference.rst:874
msgid "Package"
msgstr "パッケージ"

#: _pytest.python.Package:1 of
msgid "Bases: :py:class:`~_pytest.nodes.Directory`"
msgstr "Bases: :py:class:`~_pytest.nodes.Directory`"

#: _pytest.python.Package:1 of
msgid "Collector for files and directories in a Python packages -- directories with an `__init__.py` file."
msgstr "Python パッケージ内のファイルおよびディレクトリのコレクター -- `__init__.py` ファイルを持つディレクトリ。"

#: _pytest.python.Package:6 of
msgid "Directories without an `__init__.py` file are instead collected by :class:`~pytest.Dir` by default. Both are :class:`~pytest.Directory` collectors."
msgstr " `__init__.py` ファイルを持たないディレクトリは、代わりにデフォルトで :class:`~pytest.Dir` によって収集されます。 どちらも :class:`~pytest.Directory` コレクターです。"

#: _pytest.python.Package:12 of
msgid "Now inherits from :class:`~pytest.Directory`."
msgstr "現在は :class:`~pytest.Directory` から継承しています。"

#: ../../reference/reference.rst:881
msgid "Module"
msgstr "モジュール"

#: _pytest.python.Module:1 of
msgid "Bases: :py:class:`~_pytest.nodes.File`, :py:class:`~_pytest.python.PyCollector`"
msgstr "Bases: :py:class:`~_pytest.nodes.File`, :py:class:`~_pytest.python.PyCollector`"

#: _pytest.python.Module:1 of
msgid "Collector for test classes and functions in a Python module."
msgstr "Python モジュール内のテストクラスおよび関数のコレクター。"

#: ../../reference/reference.rst:888
msgid "Class"
msgstr "クラス"

#: _pytest.python.Class:1 of
msgid "Bases: :py:class:`~_pytest.python.PyCollector`"
msgstr "Bases: :py:class:`~_pytest.python.PyCollector`"

#: _pytest.python.Class:1 of
msgid "Collector for test methods (and nested classes) in a Python class."
msgstr "Python クラス内のテストメソッド（およびネストされたクラス）のコレクター。"

#: ../../reference/reference.rst:895
msgid "Function"
msgstr "関数"

#: _pytest.python.Function:1 of
msgid "Bases: :py:class:`~_pytest.python.PyobjMixin`, :py:class:`~_pytest.nodes.Item`"
msgstr "Bases: :py:class:`~_pytest.python.PyobjMixin`, :py:class:`~_pytest.nodes.Item`"

#: _pytest.python.Function:1 of
msgid "Item responsible for setting up and executing a Python test function."
msgstr "Python テスト関数のセットアップおよび実行を担当するアイテム。"

#: _pytest.python.Function:3 of
msgid "The full function name, including any decorations like those added by parametrization (``my_func[my_param]``)."
msgstr "パラメータ化によって追加された装飾などを含む完全な関数名（``my_func[my_param]``）。"

#: _pytest.python.Function:6 of
msgid "The parent Node."
msgstr "親ノード。"

#: _pytest.python.Function:8 of
msgid "The pytest Config object."
msgstr "pytest 設定オブジェクト。"

#: _pytest.python.Function:10 of
msgid "If given, this function has been parametrized and the callspec contains meta information about the parametrization."
msgstr "指定された場合、この関数はパラメータ化されており、callspec にはパラメータ化に関するメタ情報が含まれます。"

#: _pytest.python.Function:13 of
msgid "If given, the object which will be called when the Function is invoked, otherwise the callobj will be obtained from ``parent`` using ``originalname``."
msgstr "指定された場合、関数が呼び出されたときに呼び出されるオブジェクト。 それ以外の場合、callobj は ``parent`` から ``originalname`` を使用して取得されます。"

#: _pytest.python.Function:16 of
msgid "Keywords bound to the function object for \"-k\" matching."
msgstr "関数オブジェクトにバインドされたキーワード。 \"-k\" マッチングのため。"

#: _pytest.python.Function:18 of
msgid "The pytest Session object."
msgstr "pytest セッションオブジェクト。"

#: _pytest.python.Function:20 of
msgid "Fixture information already resolved at this fixture node.."
msgstr "このフィクスチャノードで既に解決されたフィクスチャ情報。"

#: _pytest.python.Function:22 of
msgid "The attribute name to use for accessing the underlying function object. Defaults to ``name``. Set this if name is different from the original name, for example when it contains decorations like those added by parametrization (``my_func[my_param]``)."
msgstr "基礎となる関数オブジェクトにアクセスするために使用する属性名。 デフォルトは ``name`` です。 名前が元の名前と異なる場合、例えばパラメータ化によって追加された装飾が含まれる場合（``my_func[my_param]``）、これを設定します。"

#: ../../../../docstring of pytest.Function.originalname:1
msgid "Original function name, without any decorations (for example parametrization adds a ``\"[...]\"`` suffix to function names), used to access the underlying function object from ``parent`` (in case ``callobj`` is not given explicitly)."
msgstr "装飾なしの元の関数名（例えばパラメータ化は関数名に ``\"[...]\"`` サフィックスを追加します）。 ``parent`` から基礎となる関数オブジェクトにアクセスするために使用されます（``callobj`` が明示的に指定されていない場合）。"

#: of pytest.Function.function:1
msgid "Underlying python 'function' object."
msgstr "基礎となる Python の 'function' オブジェクト。"

#: of pytest.Function.instance:1
msgid "Python instance object the function is bound to."
msgstr "関数がバインドされている Python インスタンスオブジェクト。"

#: of pytest.Function.instance:3
msgid "Returns None if not a test method, e.g. for a standalone test function, a class or a module."
msgstr "テストメソッドでない場合、None を返します。 例えば、スタンドアロンのテスト関数、クラス、またはモジュールの場合。"

#: _pytest.python.Function.runtest:1
#: _pytest.python.FunctionDefinition.runtest:1 of
msgid "Execute the underlying test function."
msgstr "基礎となるテスト関数を実行します。"

#: ../../reference/reference.rst:902
msgid "FunctionDefinition"
msgstr "関数定義"

#: _pytest.python.FunctionDefinition:1 of
msgid "Bases: :py:class:`~_pytest.python.Function`"
msgstr "Bases: :py:class:`~_pytest.python.Function`"

#: _pytest.python.FunctionDefinition:1 of
msgid "This class is a stop gap solution until we evolve to have actual function definition nodes and manage to get rid of ``metafunc``."
msgstr "このクラスは、実際の関数定義ノードを持つように進化し、``metafunc`` を取り除くまでの暫定的な解決策です。"

#: ../../reference/reference.rst:910
msgid "Objects"
msgstr "オブジェクト"

#: ../../reference/reference.rst:912
msgid "Objects accessible from :ref:`fixtures <fixture>` or :ref:`hooks <hook-reference>` or importable from ``pytest``."
msgstr ":ref:`fixtures <fixture>` または :ref:`hooks <hook-reference>` からアクセス可能なオブジェクト、または ``pytest`` からインポート可能なオブジェクト。"

#: ../../reference/reference.rst:917
msgid "CallInfo"
msgstr "CallInfo"

#: _pytest.runner.CallInfo:1 of
msgid "Result/Exception info of a function invocation."
msgstr "関数呼び出しの結果/例外情報。"

#: ../../../../docstring of pytest.CallInfo.excinfo:1
msgid "The captured exception of the call, if it raised."
msgstr "呼び出し時にキャプチャされた例外（発生した場合）。"

#: ../../../../docstring of pytest.CallInfo.start:1 pytest.TestReport.start:1
msgid "The system time when the call started, in seconds since the epoch."
msgstr "呼び出しが開始されたシステム時刻（エポックからの秒数）。"

#: ../../../../docstring of pytest.CallInfo.stop:1 pytest.TestReport.stop:1
msgid "The system time when the call ended, in seconds since the epoch."
msgstr "呼び出しが終了したシステム時刻（エポックからの秒数）。"

#: ../../../../docstring of pytest.CallInfo.duration:1
msgid "The call duration, in seconds."
msgstr "呼び出しの持続時間（秒）。"

#: ../../../../docstring of pytest.CallInfo.when:1
msgid "The context of invocation: \"collect\", \"setup\", \"call\" or \"teardown\"."
msgstr "呼び出しのコンテキスト：\"collect\"、\"setup\"、\"call\"、または \"teardown\"。"

#: of pytest.CallInfo.result:1
msgid "The return value of the call, if it didn't raise."
msgstr "呼び出しの戻り値（例外が発生しなかった場合）。"

#: of pytest.CallInfo.result:3
msgid "Can only be accessed if excinfo is None."
msgstr "excinfo が None の場合にのみアクセスできます。"

#: _pytest.runner.CallInfo.from_call:1 of
msgid "Call func, wrapping the result in a CallInfo."
msgstr "関数を呼び出し、結果を CallInfo にラップします。"

#: _pytest.runner.CallInfo.from_call:3 of
msgid "The function to call. Called without arguments."
msgstr "呼び出す関数。 引数なしで呼び出されます。"

#: _pytest.runner.CallInfo.from_call:6 of
msgid "The phase in which the function is called."
msgstr "関数が呼び出されるフェーズ。"

#: _pytest.runner.CallInfo.from_call:8 of
msgid "Exception or exceptions that shall propagate if raised by the function, instead of being wrapped in the CallInfo."
msgstr "関数によって発生した場合に CallInfo にラップされずに伝播する例外または例外群。"

#: ../../reference/reference.rst:923
msgid "CollectReport"
msgstr "CollectReport"

#: _pytest.reports.CollectReport:1 _pytest.reports.TestReport:1 of
msgid "Bases: :py:class:`~_pytest.reports.BaseReport`"
msgstr "Bases: :py:class:`~_pytest.reports.BaseReport`"

#: _pytest.reports.CollectReport:1 of
msgid "Collection report object."
msgstr "コレクションレポートオブジェクト。"

#: _pytest.reports.CollectReport:3 _pytest.reports.TestReport:4 of
msgid "Reports can contain arbitrary extra attributes."
msgstr "レポートには任意の追加属性を含めることができます。"

#: ../../../../docstring of pytest.CollectReport.nodeid:1
#: pytest.TestReport.nodeid:1
msgid "Normalized collection nodeid."
msgstr "正規化されたコレクション nodeid。"

#: ../../../../docstring of pytest.CollectReport.outcome:1
#: pytest.TestReport.outcome:1
msgid "Test outcome, always one of \"passed\", \"failed\", \"skipped\"."
msgstr "テストの結果。 常に \"passed\"、\"failed\"、\"skipped\" のいずれか。"

#: ../../../../docstring of pytest.CollectReport.longrepr:1
#: pytest.TestReport.longrepr:1
msgid "None or a failure representation."
msgstr "None または失敗の表現。"

#: ../../../../docstring of pytest.CollectReport.result:1
msgid "The collected items and collection nodes."
msgstr "収集されたアイテムおよびコレクションノード。"

#: ../../../../docstring of pytest.CollectReport.sections:1
#: pytest.TestReport.sections:1
msgid "Tuples of str ``(heading, content)`` with extra information for the test report. Used by pytest to add text captured from ``stdout``, ``stderr``, and intercepted logging events. May be used by other plugins to add arbitrary information to reports."
msgstr "テストレポートの追加情報を含む ``(heading, content)`` の文字列タプル。 pytest は ``stdout``、``stderr`` からキャプチャされたテキストやインターセプトされたログイベントを追加するために使用します。 他のプラグインがレポートに任意の情報を追加するために使用することもできます。"

#: of pytest.CollectReport.caplog:1 pytest.TestReport.caplog:1
msgid "Return captured log lines, if log capturing is enabled."
msgstr "ログキャプチャが有効な場合、キャプチャされたログ行を返します。"

#: of pytest.CollectReport.capstderr:1 pytest.TestReport.capstderr:1
msgid "Return captured text from stderr, if capturing is enabled."
msgstr "キャプチャが有効な場合、stderr からキャプチャされたテキストを返します。"

#: of pytest.CollectReport.capstdout:1 pytest.TestReport.capstdout:1
msgid "Return captured text from stdout, if capturing is enabled."
msgstr "キャプチャが有効な場合、stdout からキャプチャされたテキストを返します。"

#: of pytest.CollectReport.count_towards_summary:1
#: pytest.TestReport.count_towards_summary:1
msgid "**Experimental** Whether this report should be counted towards the totals shown at the end of the test session: \"1 passed, 1 failure, etc\"."
msgstr "**実験的** このレポートがテストセッションの最後に表示される合計（\"1 passed, 1 failure\" など）にカウントされるかどうか。"

#: of pytest.CollectReport.count_towards_summary:6
#: pytest.CollectReport.head_line:12 pytest.TestReport.count_towards_summary:6
#: pytest.TestReport.head_line:12
msgid "This function is considered **experimental**, so beware that it is subject to changes even in patch releases."
msgstr "この関数は **実験的** と見なされているため、パッチリリースでも変更される可能性があることに注意してください。"

#: of pytest.CollectReport.failed:1 pytest.TestReport.failed:1
msgid "Whether the outcome is failed."
msgstr "結果が失敗したかどうか。"

#: of pytest.CollectReport.fspath:1 pytest.TestReport.fspath:1
msgid "The path portion of the reported node, as a string."
msgstr "報告されたノードのパス部分（文字列として）。"

#: of pytest.CollectReport.head_line:1 pytest.TestReport.head_line:1
msgid "**Experimental** The head line shown with longrepr output for this report, more commonly during traceback representation during failures::"
msgstr "**実験的** このレポートの longrepr 出力に表示されるヘッドライン。 通常は失敗時のトレースバック表現中に表示されます："

#: of pytest.CollectReport.head_line:8 pytest.TestReport.head_line:8
msgid "In the example above, the head_line is \"Test.foo\"."
msgstr "上記の例では、ヘッドラインは \"Test.foo\" です。"

#: of pytest.CollectReport.longreprtext:1 pytest.TestReport.longreprtext:1
msgid "Read-only property that returns the full string representation of ``longrepr``."
msgstr "``longrepr`` の完全な文字列表現を返す読み取り専用プロパティ。"

#: of pytest.CollectReport.passed:1 pytest.TestReport.passed:1
msgid "Whether the outcome is passed."
msgstr "結果が成功したかどうか。"

#: of pytest.CollectReport.skipped:1 pytest.TestReport.skipped:1
msgid "Whether the outcome is skipped."
msgstr "結果がスキップされたかどうか。"

#: ../../reference/reference.rst:931
msgid "Config"
msgstr "Config"

#: _pytest.config.Config:1 of
msgid "Access to configuration values, pluginmanager and plugin hooks."
msgstr "設定値、プラグインマネージャー、およびプラグインフックへのアクセス。"

#: _pytest.config.Config:3 of
msgid "A pytest PluginManager."
msgstr "pytest プラグインマネージャー。"

#: _pytest.config.Config:6 of
msgid "Object containing parameters regarding the :func:`pytest.main` invocation."
msgstr ":func:`pytest.main` 呼び出しに関するパラメータを含むオブジェクト。"

#: _pytest.config.Config.InvocationParams:1 of
msgid "Holds parameters passed during :func:`pytest.main`."
msgstr ":func:`pytest.main` 呼び出し中に渡されたパラメータを保持します。"

#: _pytest.config.Config.InvocationParams:3 of
msgid "The object attributes are read-only."
msgstr "オブジェクトの属性は読み取り専用です。"

#: _pytest.config.Config.InvocationParams:9 of
msgid "Note that the environment variable ``PYTEST_ADDOPTS`` and the ``addopts`` ini option are handled by pytest, not being included in the ``args`` attribute."
msgstr "環境変数 ``PYTEST_ADDOPTS`` および ``addopts`` ini オプションは pytest によって処理され、``args`` 属性には含まれないことに注意してください。"

#: _pytest.config.Config.InvocationParams:12 of
msgid "Plugins accessing ``InvocationParams`` must be aware of that."
msgstr "``InvocationParams`` にアクセスするプラグインはそれを認識している必要があります。"

#: ../../../../docstring of pytest.Config.InvocationParams.args:1
msgid "The command-line arguments as passed to :func:`pytest.main`."
msgstr ":func:`pytest.main` に渡されたコマンドライン引数。"

#: ../../../../docstring of pytest.Config.InvocationParams.plugins:1
msgid "Extra plugins, might be `None`."
msgstr "追加のプラグイン。 `None` の場合があります。"

#: ../../../../docstring of pytest.Config.InvocationParams.dir:1
msgid "The directory from which :func:`pytest.main` was invoked. :type: pathlib.Path"
msgstr ":func:`pytest.main` が呼び出されたディレクトリ。 :type: pathlib.Path"

#: _pytest.config.Config.ArgsSource:1 of
msgid "Indicates the source of the test arguments."
msgstr "テスト引数のソースを示します。"

#: ../../../../docstring of pytest.Config.ArgsSource.ARGS:1
msgid "Command line arguments."
msgstr "コマンドライン引数。"

#: ../../../../docstring of pytest.Config.ArgsSource.INVOCATION_DIR:1
msgid "Invocation directory."
msgstr "呼び出しディレクトリ。"

#: ../../../../docstring of pytest.Config.ArgsSource.TESTPATHS:1
msgid "'testpaths' configuration value."
msgstr "'testpaths' 設定値。"

#: ../../../../docstring of pytest.Config.option:1
msgid "Access to command line option as attributes."
msgstr "属性としてコマンドラインオプションにアクセスします。"

#: ../../../../docstring of pytest.Config.invocation_params
#: pytest.Config.option pytest.Config.pluginmanager pytest.Config.rootpath
#: pytest.Config.stash
msgid "type"
msgstr "type"

#: ../../../../docstring of pytest.Config.option:3
msgid "argparse.Namespace"
msgstr "argparse.Namespace"

#: ../../../../docstring of pytest.Config.invocation_params:1
msgid "The parameters with which pytest was invoked."
msgstr "pytest が呼び出されたパラメータ。"

#: ../../../../docstring of pytest.Config.invocation_params:3
msgid "InvocationParams"
msgstr "InvocationParams"

#: ../../../../docstring of pytest.Config.pluginmanager:1
msgid "The plugin manager handles plugin registration and hook invocation."
msgstr "プラグインマネージャーはプラグインの登録とフックの呼び出しを処理します。"

#: ../../../../docstring ../../reference/reference.rst:1009 of
#: pytest.Config.pluginmanager:3
msgid "PytestPluginManager"
msgstr "PytestPluginManager"

#: ../../../../docstring of pytest.Config.stash:1
msgid "A place where plugins can store information on the config for their own use."
msgstr "プラグインが独自に使用するために設定情報を保存できる場所。"

#: ../../../../docstring ../../reference/reference.rst:1037 of
#: pytest.Config.stash:4
msgid "Stash"
msgstr "Stash"

#: of pytest.Config.rootpath:1
msgid "The path to the :ref:`rootdir <rootdir>`."
msgstr ":ref:`rootdir <rootdir>` へのパス。"

#: of pytest.Config.rootpath:3
msgid "pathlib.Path"
msgstr "pathlib.Path"

#: of pytest.Config.inipath:1
msgid "The path to the :ref:`configfile <configfiles>`."
msgstr ":ref:`configfile <configfiles>` へのパス。"

#: _pytest.config.Config.add_cleanup:1 of
msgid "Add a function to be called when the config object gets out of use (usually coinciding with pytest_unconfigure)."
msgstr "設定オブジェクトが使用されなくなったときに呼び出される関数を追加します（通常は pytest_unconfigure と一致します）。"

#: _pytest.config.Config.fromdictargs:1 of
msgid "Constructor usable for subprocesses."
msgstr "サブプロセスで使用可能なコンストラクター。"

#: _pytest.config.Config.issue_config_time_warning:1 of
msgid "Issue and handle a warning during the \"configure\" stage."
msgstr "\"configure\" ステージ中に警告を発行および処理します。"

#: _pytest.config.Config.issue_config_time_warning:3 of
msgid "During ``pytest_configure`` we can't capture warnings using the ``catch_warnings_for_item`` function because it is not possible to have hook wrappers around ``pytest_configure``."
msgstr "``pytest_configure`` 中は、``catch_warnings_for_item`` 関数を使用して警告をキャプチャすることはできません。 ``pytest_configure`` の周りにフックラッパーを配置することはできないためです。"

#: _pytest.config.Config.issue_config_time_warning:6 of
msgid "This function is mainly intended for plugins that need to issue warnings during ``pytest_configure`` (or similar stages)."
msgstr "この関数は主に、``pytest_configure`` (または同様のステージ) 中に警告を発行する必要があるプラグインを対象としています。"

#: _pytest.config.Config.issue_config_time_warning:9 of
msgid "The warning instance."
msgstr "警告インスタンス。"

#: _pytest.config.Config.issue_config_time_warning:10 of
msgid "stacklevel forwarded to warnings.warn."
msgstr "warnings.warn に転送される stacklevel。"

#: _pytest.config.Config.addinivalue_line:1 of
msgid "Add a line to an ini-file option. The option must have been declared but might not yet be set in which case the line becomes the first line in its value."
msgstr "ini ファイルオプションに行を追加します。 オプションは宣言されている必要がありますが、まだ設定されていない場合は、その行が値の最初の行になります。"

#: _pytest.config.Config.getini:1 of
msgid "Return configuration value from an :ref:`ini file <configfiles>`."
msgstr ":ref:`ini ファイル <configfiles>` から設定値を返します。"

#: _pytest.config.Config.getini:3 of
msgid "If a configuration value is not defined in an :ref:`ini file <configfiles>`, then the ``default`` value provided while registering the configuration through :func:`parser.addini <pytest.Parser.addini>` will be returned. Please note that you can even provide ``None`` as a valid default value."
msgstr ""

#: _pytest.config.Config.getini:10 of
msgid "If ``default`` is not provided while registering using :func:`parser.addini <pytest.Parser.addini>`, then a default value based on the ``type`` parameter passed to :func:`parser.addini <pytest.Parser.addini>` will be returned. The default values based on ``type`` are: ``paths``, ``pathlist``, ``args`` and ``linelist`` : empty list ``[]`` ``bool`` : ``False`` ``string`` : empty string ``\"\"``"
msgstr ":func:`parser.addini <pytest.Parser.addini>` を使用して設定を登録する際に ``default`` 値が提供されていない場合、:func:`parser.addini <pytest.Parser.addini>` に渡された ``type`` パラメータに基づいてデフォルト値が返されます。 ``type`` に基づくデフォルト値は次のとおりです: ``paths``、``pathlist``、``args``、および ``linelist`` : 空のリスト ``[]`` ``bool`` : ``False`` ``string`` : 空の文字列 ``\"\"``"

#: _pytest.config.Config.getini:19 of
msgid "If neither the ``default`` nor the ``type`` parameter is passed while registering the configuration through :func:`parser.addini <pytest.Parser.addini>`, then the configuration is treated as a string and a default empty string '' is returned."
msgstr ":func:`parser.addini <pytest.Parser.addini>` を使用して設定を登録する際に ``default`` も ``type`` パラメータも渡されない場合、設定は文字列として扱われ、デフォルトの空の文字列 '' が返されます。"

#: _pytest.config.Config.getini:24 of
msgid "If the specified name hasn't been registered through a prior :func:`parser.addini <pytest.Parser.addini>` call (usually from a plugin), a ValueError is raised."
msgstr "指定された名前が以前の :func:`parser.addini <pytest.Parser.addini>` 呼び出し（通常はプラグインから）を通じて登録されていない場合、ValueError が発生します。"

#: _pytest.config.Config.getoption:1 of
msgid "Return command line option value."
msgstr "コマンドラインオプションの値を返します。"

#: _pytest.config.Config.getoption:3 of
msgid "Name of the option. You may also specify the literal ``--OPT`` option instead of the \"dest\" option name."
msgstr "オプションの名前。 リテラル ``--OPT`` オプションを指定することもできます。"

#: _pytest.config.Config.getoption:5 of
msgid "Fallback value if no option of that name is **declared** via :hook:`pytest_addoption`. Note this parameter will be ignored when the option is **declared** even if the option's value is ``None``."
msgstr "その名前のオプションが :hook:`pytest_addoption` を通じて **宣言** されていない場合のフォールバック値。 このパラメータは、オプションが **宣言** されている場合、オプションの値が ``None`` であっても無視されます。"

#: _pytest.config.Config.getoption:7 of
msgid "If ``True``, raise :func:`pytest.skip` if option is undeclared or has a ``None`` value. Note that even if ``True``, if a default was specified it will be returned instead of a skip."
msgstr "``True`` の場合、オプションが宣言されていないか、値が ``None`` の場合に :func:`pytest.skip` を発生させます。 ``True`` であっても、デフォルトが指定されている場合はスキップの代わりにその値が返されます。"

#: _pytest.config.Config.getvalue:1 of
msgid "Deprecated, use getoption() instead."
msgstr "非推奨、代わりに getoption() を使用してください。"

#: _pytest.config.Config.getvalueorskip:1 of
msgid "Deprecated, use getoption(skip=True) instead."
msgstr "非推奨、代わりに getoption(skip=True) を使用してください。"

#: ../../../../docstring of pytest.Config.VERBOSITY_ASSERTIONS:1
msgid "Verbosity type for failed assertions (see :confval:`verbosity_assertions`)."
msgstr "失敗したアサーションの詳細度タイプ（:confval:`verbosity_assertions` を参照）。"

#: ../../../../docstring of pytest.Config.VERBOSITY_TEST_CASES:1
msgid "Verbosity type for test case execution (see :confval:`verbosity_test_cases`)."
msgstr "テストケース実行の詳細度タイプ（:confval:`verbosity_test_cases` を参照）。"

#: _pytest.config.Config.get_verbosity:1 of
msgid "Retrieve the verbosity level for a fine-grained verbosity type."
msgstr "詳細度タイプの詳細度レベルを取得します。"

#: _pytest.config.Config.get_verbosity:3 of
msgid "Verbosity type to get level for. If a level is configured for the given type, that value will be returned. If the given type is not a known verbosity type, the global verbosity level will be returned. If the given type is None (default), the global verbosity level will be returned."
msgstr "詳細度レベルを取得するための詳細度タイプ。 指定されたタイプに対してレベルが設定されている場合、その値が返されます。 指定されたタイプが既知の詳細度タイプでない場合、グローバル詳細度レベルが返されます。 指定されたタイプが None（デフォルト）の場合、グローバル詳細度レベルが返されます。"

#: _pytest.config.Config.get_verbosity:9 of
msgid "To configure a level for a fine-grained verbosity type, the configuration file should have a setting for the configuration name and a numeric value for the verbosity level. A special value of \"auto\" can be used to explicitly use the global verbosity level."
msgstr "詳細度タイプのレベルを設定するには、設定ファイルに設定名と詳細度レベルの数値を設定する必要があります。 特別な値 \"auto\" を使用して、グローバル詳細度レベルを明示的に使用することができます。"

#: ../../reference/reference.rst:937
msgid "Dir"
msgstr "Dir"

#: _pytest.main.Dir:1 of
msgid "Collector of files in a file system directory."
msgstr "ファイルシステムディレクトリ内のファイルのコレクター。"

#: _pytest.main.Dir:7 of
msgid "Python directories with an `__init__.py` file are instead collected by :class:`~pytest.Package` by default. Both are :class:`~pytest.Directory` collectors."
msgstr "Python ディレクトリに `__init__.py` ファイルがある場合、代わりにデフォルトで :class:`~pytest.Package` によって収集されます。 どちらも :class:`~pytest.Directory` コレクターです。"

#: _pytest.main.Dir.from_parent:3 of
msgid "The parent collector of this Dir."
msgstr "この Dir の親コレクター。"

#: _pytest.main.Dir.from_parent:4 of
msgid "The directory's path."
msgstr "ディレクトリのパス。"

#: ../../reference/reference.rst:943
msgid "Directory"
msgstr "ディレクトリ"

#: _pytest.nodes.Directory:1 of
msgid "Base class for collecting files from a directory."
msgstr "ディレクトリからファイルを収集するための基本クラス。"

#: _pytest.nodes.Directory:3 of
msgid "A basic directory collector does the following: goes over the files and sub-directories in the directory and creates collectors for them by calling the hooks :hook:`pytest_collect_directory` and :hook:`pytest_collect_file`, after checking that they are not ignored using :hook:`pytest_ignore_collect`."
msgstr "基本的なディレクトリコレクターは次のことを行います: ディレクトリ内のファイルおよびサブディレクトリを調べ、:hook:`pytest_collect_directory` および :hook:`pytest_collect_file` フックを呼び出してそれらのコレクターを作成します。 ただし、:hook:`pytest_ignore_collect` を使用して無視されていないことを確認します。"

#: _pytest.nodes.Directory:9 of
msgid "The default directory collectors are :class:`~pytest.Dir` and :class:`~pytest.Package`."
msgstr "デフォルトのディレクトリコレクターは :class:`~pytest.Dir` および :class:`~pytest.Package` です。"

#: _pytest.nodes.Directory:14 of
msgid ":ref:`custom directory collectors`."
msgstr ":ref:`custom directory collectors`。"

#: ../../reference/reference.rst:949
msgid "ExceptionInfo"
msgstr "ExceptionInfo"

#: _pytest._code.code.ExceptionInfo:1 of
msgid "Wraps sys.exc_info() objects and offers help for navigating the traceback."
msgstr "sys.exc_info() オブジェクトをラップし、トレースバックのナビゲートを支援します。"

#: _pytest._code.code.ExceptionInfo.from_exception:1 of
msgid "Return an ExceptionInfo for an existing exception."
msgstr "既存の例外に対する ExceptionInfo を返します。"

#: _pytest._code.code.ExceptionInfo.from_exception:3 of
msgid "The exception must have a non-``None`` ``__traceback__`` attribute, otherwise this function fails with an assertion error. This means that the exception must have been raised, or added a traceback with the :py:meth:`~BaseException.with_traceback()` method."
msgstr "例外は非 ``None`` の ``__traceback__`` 属性を持っている必要があります。 そうでない場合、この関数はアサーションエラーで失敗します。 これは、例外が発生したか、:py:meth:`~BaseException.with_traceback()` メソッドでトレースバックが追加されたことを意味します。"

#: _pytest._code.code.ExceptionInfo.from_current:7
#: _pytest._code.code.ExceptionInfo.from_exception:8 of
msgid "A text string helping to determine if we should strip ``AssertionError`` from the output. Defaults to the exception message/``__str__()``."
msgstr ""

#: _pytest._code.code.ExceptionInfo.from_exc_info:1 of
msgid "Like :func:`from_exception`, but using old-style exc_info tuple."
msgstr ""

#: _pytest._code.code.ExceptionInfo.from_current:1 of
msgid "Return an ExceptionInfo matching the current traceback."
msgstr "現在のトレースバックに一致する ExceptionInfo を返します。"

#: _pytest._code.code.ExceptionInfo.from_current:5 of
msgid "Experimental API"
msgstr "実験的 API"

#: _pytest._code.code.ExceptionInfo.for_later:1 of
msgid "Return an unfilled ExceptionInfo."
msgstr "未入力の ExceptionInfo を返します。"

#: _pytest._code.code.ExceptionInfo.fill_unfilled:1 of
msgid "Fill an unfilled ExceptionInfo created with ``for_later()``."
msgstr "``for_later()`` で作成された未入力の ExceptionInfo を入力します。"

#: of pytest.ExceptionInfo.type:1
msgid "The exception class."
msgstr "例外クラス。"

#: of pytest.ExceptionInfo.value:1
msgid "The exception value."
msgstr "例外値。"

#: of pytest.ExceptionInfo.tb:1
msgid "The exception raw traceback."
msgstr "例外の生のトレースバック。"

#: of pytest.ExceptionInfo.typename:1
msgid "The type name of the exception."
msgstr "例外の型名。"

#: of pytest.ExceptionInfo.traceback:1
msgid "The traceback."
msgstr "トレースバック。"

#: _pytest._code.code.ExceptionInfo.exconly:1 of
msgid "Return the exception as a string."
msgstr "例外を文字列として返します。"

#: _pytest._code.code.ExceptionInfo.exconly:3 of
msgid "When 'tryshort' resolves to True, and the exception is an AssertionError, only the actual exception part of the exception representation is returned (so 'AssertionError: ' is removed from the beginning)."
msgstr "'tryshort' が True に解決され、例外が AssertionError の場合、例外表現の実際の例外部分のみが返されます（したがって、'AssertionError: ' は先頭から削除されます）。"

#: _pytest._code.code.ExceptionInfo.errisinstance:1 of
msgid "Return True if the exception is an instance of exc."
msgstr "例外が exc のインスタンスである場合は True を返します。"

#: _pytest._code.code.ExceptionInfo.errisinstance:3 of
msgid "Consider using ``isinstance(excinfo.value, exc)`` instead."
msgstr "代わりに ``isinstance(excinfo.value, exc)`` を使用することを検討してください。"

#: _pytest._code.code.ExceptionInfo.getrepr:1 of
msgid "Return str()able representation of this exception info."
msgstr "この例外情報の str() 可能な表現を返します。"

#: _pytest._code.code.ExceptionInfo.getrepr:3 of
msgid "Show locals per traceback entry. Ignored if ``style==\"native\"``."
msgstr "トレースバックエントリごとにローカルを表示します。 ``style==\"native\"`` の場合は無視されます。"

#: _pytest._code.code.ExceptionInfo.getrepr:7 of
msgid "long|short|line|no|native|value traceback style."
msgstr "long|short|line|no|native|value トレースバックスタイル。"

#: _pytest._code.code.ExceptionInfo.getrepr:10 of
msgid "If paths should be changed to absolute or left unchanged."
msgstr "パスを絶対パスに変更するか、そのままにするか。"

#: _pytest._code.code.ExceptionInfo.getrepr:13 of
msgid "A filter for traceback entries.  * If false, don't hide any entries. * If true, hide internal entries and entries that contain a local   variable ``__tracebackhide__ = True``. * If a callable, delegates the filtering to the callable.  Ignored if ``style`` is ``\"native\"``."
msgstr "トレースバックエントリのフィルタ。 * false の場合、エントリを非表示にしません。 * true の場合、内部エントリおよびローカル変数 ``__tracebackhide__ = True`` を含むエントリを非表示にします。 * callable の場合、フィルタリングを callable に委任します。 ``style`` が ``\"native\"`` の場合は無視されます。"

#: _pytest._code.code.ExceptionInfo.getrepr:14 of
msgid "A filter for traceback entries."
msgstr "トレースバックエントリのフィルタ。"

#: _pytest._code.code.ExceptionInfo.getrepr:16 of
msgid "If false, don't hide any entries."
msgstr "false の場合、エントリを非表示にしません。"

#: _pytest._code.code.ExceptionInfo.getrepr:17 of
msgid "If true, hide internal entries and entries that contain a local variable ``__tracebackhide__ = True``."
msgstr "true の場合、内部エントリおよびローカル変数 ``__tracebackhide__ = True`` を含むエントリを非表示にします。"

#: _pytest._code.code.ExceptionInfo.getrepr:19 of
msgid "If a callable, delegates the filtering to the callable."
msgstr "callable の場合、フィルタリングを callable に委任します。"

#: _pytest._code.code.ExceptionInfo.getrepr:21 of
msgid "Ignored if ``style`` is ``\"native\"``."
msgstr "``style`` が ``\"native\"`` の場合は無視されます。"

#: _pytest._code.code.ExceptionInfo.getrepr:23 of
msgid "Show fixtures (\"funcargs\" for legacy purposes) per traceback entry."
msgstr "トレースバックエントリごとにフィクスチャ（レガシー目的の \"funcargs\"）を表示します。"

#: _pytest._code.code.ExceptionInfo.getrepr:26 of
msgid "With ``showlocals==True``, make sure locals can be safely represented as strings."
msgstr "``showlocals==True`` の場合、ローカルが安全に文字列として表現できることを確認します。"

#: _pytest._code.code.ExceptionInfo.getrepr:29 of
msgid "With ``showargs==True``, make sure args can be safely represented as strings."
msgstr "``showargs==True`` の場合、引数が安全に文字列として表現できることを確認します。"

#: _pytest._code.code.ExceptionInfo.getrepr:32 of
msgid "If chained exceptions in Python 3 should be shown."
msgstr "Python 3 で連鎖した例外を表示するかどうか。"

#: _pytest._code.code.ExceptionInfo.getrepr:37 of
msgid "Added the ``chain`` parameter."
msgstr "``chain`` パラメータが追加されました。"

#: _pytest._code.code.ExceptionInfo.match:1 of
msgid "Check whether the regular expression `regexp` matches the string representation of the exception using :func:`python:re.search`."
msgstr "正規表現 `regexp` が例外の文字列表現に一致するかどうかを :func:`python:re.search` を使用して確認します。"

#: _pytest._code.code.ExceptionInfo.match:4 of
msgid "If it matches `True` is returned, otherwise an `AssertionError` is raised."
msgstr "一致する場合は `True` が返され、一致しない場合は `AssertionError` が発生します。"

#: _pytest._code.code.ExceptionInfo.group_contains:1 of
msgid "Check whether a captured exception group contains a matching exception."
msgstr "キャプチャされた例外グループが一致する例外を含むかどうかを確認します。"

#: _pytest._code.code.ExceptionInfo.group_contains:3 of
msgid "The expected exception type, or a tuple if one of multiple possible exception types are expected."
msgstr "予期される例外タイプ、または複数の可能な例外タイプのいずれかが予期される場合のタプル。"

#: _pytest._code.code.ExceptionInfo.group_contains:7 of
msgid "If specified, a string containing a regular expression, or a regular expression object, that is tested against the string representation of the exception and its `PEP-678 <https://peps.python.org/pep-0678/>` `__notes__` using :func:`re.search`.  To match a literal string that may contain :ref:`special characters <re-syntax>`, the pattern can first be escaped with :func:`re.escape`."
msgstr "指定されている場合、正規表現を含む文字列、または正規表現オブジェクト。 例外の文字列表現およびその `PEP-678 <https://peps.python.org/pep-0678/>` `__notes__` に対して :func:`re.search` を使用してテストされます。 :ref:`特殊文字 <re-syntax>` を含む可能性のあるリテラル文字列に一致させるには、パターンを最初に :func:`re.escape` でエスケープできます。"

#: _pytest._code.code.ExceptionInfo.group_contains:8 of
msgid "If specified, a string containing a regular expression, or a regular expression object, that is tested against the string representation of the exception and its `PEP-678 <https://peps.python.org/pep-0678/>` `__notes__` using :func:`re.search`."
msgstr "指定されている場合、正規表現を含む文字列、または正規表現オブジェクト。 例外の文字列表現およびその `PEP-678 <https://peps.python.org/pep-0678/>` `__notes__` に対して :func:`re.search` を使用してテストされます。"

#: _pytest._code.code.ExceptionInfo.group_contains:16 of
msgid "If `None`, will search for a matching exception at any nesting depth. If >= 1, will only match an exception if it's at the specified depth (depth = 1 being the exceptions contained within the topmost exception group)."
msgstr "None の場合、一致する例外を任意のネスティング深度で検索します。 >= 1 の場合、指定された深度で例外が一致する場合にのみ一致します（深度 = 1 は最上位の例外グループに含まれる例外）。"

#: ../../reference/reference.rst:956
msgid "ExitCode"
msgstr "ExitCode"

#: _pytest.config.ExitCode:1 of
msgid "Encodes the valid exit codes by pytest."
msgstr "pytest によってエンコードされた有効な終了コード。"

#: _pytest.config.ExitCode:3 of
msgid "Currently users and plugins may supply other exit codes as well."
msgstr "現在、ユーザーおよびプラグインは他の終了コードも提供する場合があります。"

#: ../../../../docstring of pytest.ExitCode.OK:1
msgid "Tests passed."
msgstr "テストが成功しました。"

#: ../../../../docstring of pytest.ExitCode.TESTS_FAILED:1
msgid "Tests failed."
msgstr "テストが失敗しました。"

#: ../../../../docstring of pytest.ExitCode.INTERRUPTED:1
msgid "pytest was interrupted."
msgstr "pytest が中断されました。"

#: ../../../../docstring of pytest.ExitCode.INTERNAL_ERROR:1
msgid "An internal error got in the way."
msgstr "内部エラーが発生しました。"

#: ../../../../docstring of pytest.ExitCode.USAGE_ERROR:1
msgid "pytest was misused."
msgstr "pytest が誤用されました。"

#: ../../../../docstring of pytest.ExitCode.NO_TESTS_COLLECTED:1
msgid "pytest couldn't find tests."
msgstr "pytest がテストを見つけられませんでした。"

#: ../../reference/reference.rst:963
msgid "FixtureDef"
msgstr "FixtureDef"

#: _pytest.fixtures.FixtureDef:1 of
msgid "Bases: :py:class:`~typing.Generic`\\ [:py:obj:`~_pytest.fixtures.FixtureValue`]"
msgstr "Bases: :py:class:`~typing.Generic`\\ [:py:obj:`~_pytest.fixtures.FixtureValue`]"

#: _pytest.fixtures.FixtureDef:1 of
msgid "A container for a fixture definition."
msgstr "フィクスチャ定義のコンテナ。"

#: _pytest.fixtures.FixtureDef:3 of
msgid "Note: At this time, only explicitly documented fields and methods are considered public stable API."
msgstr "注：現時点では、明示的に文書化されたフィールドおよびメソッドのみが公開安定 API と見なされます。"

#: _pytest.fixtures.FixtureDef.execute:1 of
msgid "Return the value of this fixture, executing it if not cached."
msgstr "キャッシュされていない場合、このフィクスチャの値を返し、実行します。"

#: ../../reference/reference.rst:970
msgid "MarkDecorator"
msgstr "MarkDecorator"

#: _pytest.mark.structures.MarkDecorator:1 of
msgid "A decorator for applying a mark on test functions and classes."
msgstr "テスト関数およびクラスにマークを適用するためのデコレーター。"

#: _pytest.mark.structures.MarkDecorator:3 of
msgid "``MarkDecorators`` are created with ``pytest.mark``::"
msgstr "``MarkDecorators`` は ``pytest.mark`` で作成されます："

#: _pytest.mark.structures.MarkDecorator:8 of
msgid "and can then be applied as decorators to test functions::"
msgstr "その後、テスト関数にデコレーターとして適用できます："

#: _pytest.mark.structures.MarkDecorator:14 of
msgid "When a ``MarkDecorator`` is called, it does the following:"
msgstr "``MarkDecorator`` が呼び出されると、次のことが行われます："

#: _pytest.mark.structures.MarkDecorator:16 of
msgid "If called with a single class as its only positional argument and no additional keyword arguments, it attaches the mark to the class so it gets applied automatically to all test cases found in that class."
msgstr "単一のクラスを唯一の位置引数として追加のキーワード引数なしで呼び出された場合、マークをクラスにアタッチし、そのクラス内で見つかったすべてのテストケースに自動的に適用されるようにします。"

#: _pytest.mark.structures.MarkDecorator:20 of
msgid "If called with a single function as its only positional argument and no additional keyword arguments, it attaches the mark to the function, containing all the arguments already stored internally in the ``MarkDecorator``."
msgstr "単一の関数を唯一の位置引数として追加のキーワード引数なしで呼び出された場合、マークを関数にアタッチし、``MarkDecorator`` に内部的に格納されているすべての引数を含みます。"

#: _pytest.mark.structures.MarkDecorator:25 of
msgid "When called in any other case, it returns a new ``MarkDecorator`` instance with the original ``MarkDecorator``'s content updated with the arguments passed to this call."
msgstr "他のいずれかの場合に呼び出された場合、元の ``MarkDecorator`` の内容をこの呼び出しに渡された引数で更新した新しい ``MarkDecorator`` インスタンスを返します。"

#: _pytest.mark.structures.MarkDecorator:29 of
msgid "Note: The rules above prevent a ``MarkDecorator`` from storing only a single function or class reference as its positional argument with no additional keyword or positional arguments. You can work around this by using `with_args()`."
msgstr "注：上記のルールにより、``MarkDecorator`` が追加のキーワード引数や位置引数なしで唯一の位置引数として単一の関数またはクラス参照のみを格納することはできません。 これを回避するには、`with_args()` を使用できます。"

#: of pytest.MarkDecorator.name:1
msgid "Alias for mark.name."
msgstr "mark.name のエイリアス。"

#: of pytest.MarkDecorator.args:1
msgid "Alias for mark.args."
msgstr "mark.args のエイリアス。"

#: of pytest.MarkDecorator.kwargs:1
msgid "Alias for mark.kwargs."
msgstr "mark.kwargs のエイリアス。"

#: _pytest.mark.structures.MarkDecorator.with_args:1 of
msgid "Return a MarkDecorator with extra arguments added."
msgstr "追加の引数を追加して MarkDecorator を返します。"

#: _pytest.mark.structures.MarkDecorator.with_args:3 of
msgid "Unlike calling the MarkDecorator, with_args() can be used even if the sole argument is a callable/class."
msgstr "MarkDecorator を呼び出すのとは異なり、with_args() は唯一の引数が callable/クラスであっても使用できます。"

#: ../../reference/reference.rst:977
msgid "MarkGenerator"
msgstr "MarkGenerator"

#: _pytest.mark.structures.MarkGenerator:1 of
msgid "Factory for :class:`MarkDecorator` objects - exposed as a ``pytest.mark`` singleton instance."
msgstr ":class:`MarkDecorator` オブジェクトのファクトリ - ``pytest.mark`` シングルトンインスタンスとして公開されます。"

#: _pytest.mark.structures.MarkGenerator:13 of
msgid "applies a 'slowtest' :class:`Mark` on ``test_function``."
msgstr "'slowtest' :class:`Mark` を ``test_function`` に適用します。"

#: ../../reference/reference.rst:984
msgid "Mark"
msgstr "Mark"

#: _pytest.mark.structures.Mark:1 of
msgid "A pytest mark."
msgstr "pytest マーク。"

#: ../../../../docstring of pytest.Mark.name:1
msgid "Name of the mark."
msgstr "マークの名前。"

#: ../../../../docstring of pytest.Mark.args:1
msgid "Positional arguments of the mark decorator."
msgstr "マークデコレーターの位置引数。"

#: ../../../../docstring of pytest.Mark.kwargs:1
msgid "Keyword arguments of the mark decorator."
msgstr "マークデコレーターのキーワード引数。"

#: _pytest.mark.structures.Mark.combined_with:1 of
msgid "Return a new Mark which is a combination of this Mark and another Mark."
msgstr "この Mark と別の Mark の組み合わせである新しい Mark を返します。"

#: _pytest.mark.structures.Mark.combined_with:4 of
msgid "Combines by appending args and merging kwargs."
msgstr "引数を追加し、キーワード引数をマージすることで組み合わせます。"

#: _pytest.mark.structures.Mark.combined_with:6 of
msgid "The mark to combine with."
msgstr "組み合わせるマーク。"

#: ../../reference/reference.rst:991
msgid "Metafunc"
msgstr "Metafunc"

#: _pytest.python.Metafunc:1 of
msgid "Objects passed to the :hook:`pytest_generate_tests` hook."
msgstr ":hook:`pytest_generate_tests` フックに渡されるオブジェクト。"

#: _pytest.python.Metafunc:3 of
msgid "They help to inspect a test function and to generate tests according to test configuration or values specified in the class or module where a test function is defined."
msgstr "テスト関数を検査し、テスト関数が定義されているクラスまたはモジュールで指定されたテスト構成または値に従ってテストを生成するのに役立ちます。"

#: ../../../../docstring of pytest.Metafunc.definition:1
msgid "Access to the underlying :class:`_pytest.python.FunctionDefinition`."
msgstr "基礎となる :class:`_pytest.python.FunctionDefinition` へのアクセス。"

#: ../../../../docstring of pytest.Metafunc.config:1
msgid "Access to the :class:`pytest.Config` object for the test session."
msgstr "テストセッションの :class:`pytest.Config` オブジェクトへのアクセス。"

#: ../../../../docstring of pytest.Metafunc.module:1
msgid "The module object where the test function is defined in."
msgstr "テスト関数が定義されているモジュールオブジェクト。"

#: ../../../../docstring of pytest.Metafunc.function:1
msgid "Underlying Python test function."
msgstr "基礎となる Python テスト関数。"

#: ../../../../docstring of pytest.Metafunc.fixturenames:1
msgid "Set of fixture names required by the test function."
msgstr "テスト関数が必要とするフィクスチャ名のセット。"

#: ../../../../docstring of pytest.Metafunc.cls:1
msgid "Class object where the test function is defined in or ``None``."
msgstr "テスト関数が定義されているクラスオブジェクト、または ``None``。"

#: _pytest.python.Metafunc.parametrize:1 of
msgid "Add new invocations to the underlying test function using the list of argvalues for the given argnames. Parametrization is performed during the collection phase. If you need to setup expensive resources see about setting indirect to do it rather than at test setup time."
msgstr "指定された argnames に対して argvalues のリストを使用して基になるテスト関数に新しい呼び出しを追加します。 パラメータ化は収集フェーズ中に実行されます。 高価なリソースをセットアップする必要がある場合は、テストのセットアップ時ではなく、それを行うために indirect を設定することについて調べてください。"

#: _pytest.python.Metafunc.parametrize:6 of
msgid "Can be called multiple times per test function (but only on different argument names), in which case each call parametrizes all previous parametrizations, e.g."
msgstr "テスト関数ごとに複数回呼び出すことができます (ただし、異なる引数名のみ) 、この場合、各呼び出しはすべての前のパラメータ化をパラメータ化します。 例："

#: _pytest.python.Metafunc.parametrize:16 of
msgid "A comma-separated string denoting one or more argument names, or a list/tuple of argument strings."
msgstr "1 つ以上の引数名を示すカンマ区切りの文字列、または引数文字列のリスト/タプル。"

#: _pytest.python.Metafunc.parametrize:20 of
msgid "The list of argvalues determines how often a test is invoked with different argument values.  If only one argname was specified argvalues is a list of values. If N argnames were specified, argvalues must be a list of N-tuples, where each tuple-element specifies a value for its respective argname."
msgstr "argvalues のリストは、テストが異なる引数値で呼び出される回数を決定します。 1 つの argname のみが指定された場合、argvalues は値のリストです。  N 個の argnames が指定された場合、argvalues は N-タプルのリストでなければなりません。 各タプル要素は、それぞれの argname の値を指定します。"

#: _pytest.python.Metafunc.parametrize:21 of
msgid "The list of argvalues determines how often a test is invoked with different argument values."
msgstr "argvalues のリストは、テストが異なる引数値で呼び出される回数を決定します。"

#: _pytest.python.Metafunc.parametrize:24 of
msgid "If only one argname was specified argvalues is a list of values. If N argnames were specified, argvalues must be a list of N-tuples, where each tuple-element specifies a value for its respective argname."
msgstr "1 つの argname のみが指定された場合、argvalues は値のリストです。 N 個の argnames が指定された場合、argvalues は N-タプルのリストでなければなりません。 各タプル要素は、それぞれの argname の値を指定します。"

#: _pytest.python.Metafunc.parametrize:29 of
msgid "A list of arguments' names (subset of argnames) or a boolean. If True the list contains all names from the argnames. Each argvalue corresponding to an argname in this list will be passed as request.param to its respective argname fixture function so that it can perform more expensive setups during the setup phase of a test rather than at collection time."
msgstr "引数名のリスト (argnames の部分集合) またはブール値。 True の場合、リストには argnames のすべての名前が含まれます。 このリスト内の argname に対応する各 argvalue は、それぞれの argname フィクスチャ関数に request.param として渡されるため、テストのセットアップフェーズではなく収集時により高価なセットアップを行うことができます。"

#: _pytest.python.Metafunc.parametrize:37 of
msgid "Sequence of (or generator for) ids for ``argvalues``, or a callable to return part of the id for each argvalue.  With sequences (and generators like ``itertools.count()``) the returned ids should be of type ``string``, ``int``, ``float``, ``bool``, or ``None``. They are mapped to the corresponding index in ``argvalues``. ``None`` means to use the auto-generated id.  If it is a callable it will be called for each entry in ``argvalues``, and the return value is used as part of the auto-generated id for the whole set (where parts are joined with dashes (\"-\")). This is useful to provide more specific ids for certain items, e.g. dates.  Returning ``None`` will use an auto-generated id.  If no ids are provided they will be generated automatically from the argvalues."
msgstr "``argvalues`` の id のシーケンス (またはジェネレータ) または各 argvalue の id の一部を返すための呼び出し可能オブジェクト。 シーケンス (および ``itertools.count()`` のようなジェネレータ) の場合、返される id は ``string``、``int``、``float``、``bool``、または ``None`` の型である必要があります。 これらは ``argvalues`` の対応するインデックスにマップされます。 ``None`` は自動生成された id を使用することを意味します。 呼び出し可能オブジェクトの場合、``argvalues`` の各エントリに対して呼び出され、返された値は、セット全体の自動生成された id の一部として使用されます (部分はダッシュ (\"-\") で結合されます) 。 これは、特定のアイテムに対してより具体的な id を提供するために便利です。 たとえば、日付。 ``None`` を返すと、自動生成された id が使用されます。 id が提供されていない場合、argvalues から自動的に生成されます。"

#: _pytest.python.Metafunc.parametrize:38 of
msgid "Sequence of (or generator for) ids for ``argvalues``, or a callable to return part of the id for each argvalue."
msgstr "``argvalues`` の id のシーケンス (またはジェネレータ) または各 argvalue の id の一部を返すための呼び出し可能オブジェクト。"

#: _pytest.python.Metafunc.parametrize:41 of
msgid "With sequences (and generators like ``itertools.count()``) the returned ids should be of type ``string``, ``int``, ``float``, ``bool``, or ``None``. They are mapped to the corresponding index in ``argvalues``. ``None`` means to use the auto-generated id."
msgstr "シーケンス (および ``itertools.count()`` のようなジェネレータ) の場合、返される id は ``string``、``int``、``float``、``bool``、または ``None`` の型である必要があります。 これらは ``argvalues`` の対応するインデックスにマップされます。 ``None`` は自動生成された id を使用することを意味します。"

#: _pytest.python.Metafunc.parametrize:47 of
msgid "If it is a callable it will be called for each entry in ``argvalues``, and the return value is used as part of the auto-generated id for the whole set (where parts are joined with dashes (\"-\")). This is useful to provide more specific ids for certain items, e.g. dates.  Returning ``None`` will use an auto-generated id."
msgstr "呼び出し可能オブジェクトの場合、``argvalues`` の各エントリに対して呼び出され、返された値は、セット全体の自動生成された id の一部として使用されます (部分はダッシュ (\"-\") で結合されます) 。 これは、特定のアイテムに対してより具体的な id を提供するために便利です。 たとえば、日付。 ``None`` を返すと、自動生成された id が使用されます。"

#: _pytest.python.Metafunc.parametrize:54 of
msgid "If no ids are provided they will be generated automatically from the argvalues."
msgstr "id が提供されていない場合、argvalues から自動的に生成されます。"

#: _pytest.python.Metafunc.parametrize:57 of
msgid "If specified it denotes the scope of the parameters. The scope is used for grouping tests by parameter instances. It will also override any fixture-function defined scope, allowing to set a dynamic scope using test context or configuration."
msgstr "指定されている場合、パラメータのスコープを示します。 スコープは、パラメータインスタンスごとにテストをグループ化するために使用されます。 これは、フィクスチャ関数で定義されたスコープを上書きし、テストコンテキストや構成を使用して動的スコープを設定することができます。"

#: ../../reference/reference.rst:997
msgid "Parser"
msgstr "パーサー"

#: _pytest.config.argparsing.Parser:1 of
msgid "Parser for command line arguments and ini-file values."
msgstr "コマンドライン引数および ini ファイル値のパーサー。"

#: ../../reference/reference.rst
msgid "Variables"
msgstr "変数"

#: _pytest.config.argparsing.Parser:3 of
msgid "Dict of generic param -> value to display in case there's an error processing the command line arguments."
msgstr "コマンドライン引数の処理中にエラーが発生した場合に表示する汎用パラメータ -> 値の辞書。"

#: _pytest.config.argparsing.Parser.getgroup:1 of
msgid "Get (or create) a named option Group."
msgstr "名前付きオプショングループを取得（または作成）します。"

#: _pytest.config.argparsing.Parser.getgroup:3 of
msgid "Name of the option group."
msgstr "オプショングループの名前。"

#: _pytest.config.argparsing.Parser.getgroup:4 of
msgid "Long description for --help output."
msgstr "--help 出力のための長い説明。"

#: _pytest.config.argparsing.Parser.getgroup:5 of
msgid "Name of another group, used for ordering --help output."
msgstr "--help 出力の順序付けに使用される別のグループの名前。"

#: _pytest.config.argparsing.Parser.getgroup:6 of
msgid "The option group."
msgstr "オプショングループ。"

#: _pytest.config.argparsing.Parser.getgroup:8 of
msgid "The returned group object has an ``addoption`` method with the same signature as :func:`parser.addoption <pytest.Parser.addoption>` but will be shown in the respective group in the output of ``pytest --help``."
msgstr "返されるグループオブジェクトには、:func:`parser.addoption <pytest.Parser.addoption>` と同じシグネチャを持つ ``addoption`` メソッドがありますが、``pytest --help`` の出力でそれぞれのグループに表示されます。"

#: _pytest.config.argparsing.Parser.addoption:1 of
msgid "Register a command line option."
msgstr "コマンドラインオプションを登録します。"

#: _pytest.config.argparsing.OptionGroup.addoption:8
#: _pytest.config.argparsing.Parser.addoption:3 of
msgid "Option names, can be short or long options."
msgstr "オプション名。 短いオプションまたは長いオプションが使用できます。"

#: _pytest.config.argparsing.OptionGroup.addoption:10
#: _pytest.config.argparsing.Parser.addoption:5 of
msgid "Same attributes as the argparse library's :meth:`add_argument() <argparse.ArgumentParser.add_argument>` function accepts."
msgstr "argparse ライブラリの :meth:`add_argument() <argparse.ArgumentParser.add_argument>` 関数が受け入れるのと同じ属性。"

#: _pytest.config.argparsing.Parser.addoption:9 of
msgid "After command line parsing, options are available on the pytest config object via ``config.option.NAME`` where ``NAME`` is usually set by passing a ``dest`` attribute, for example ``addoption(\"--long\", dest=\"NAME\", ...)``."
msgstr "コマンドライン解析後、オプションは ``config.option.NAME`` を介して pytest 設定オブジェクトで利用可能です。 ここで ``NAME`` は通常、``dest`` 属性を渡すことで設定されます。 例えば ``addoption(\"--long\", dest=\"NAME\", ...)``。"

#: _pytest.config.argparsing.Parser.parse_known_args:1 of
msgid "Parse the known arguments at this point."
msgstr "既知の引数をこの時点で解析します。"

#: _pytest.config.argparsing.Parser.parse_known_args:3 of
msgid "An argparse namespace object."
msgstr "argparse 名前空間オブジェクト。"

#: _pytest.config.argparsing.Parser.parse_known_and_unknown_args:1 of
msgid "Parse the known arguments at this point, and also return the remaining unknown arguments."
msgstr "既知の引数をこの時点で解析し、残りの未知の引数も返します。"

#: _pytest.config.argparsing.Parser.parse_known_and_unknown_args:4 of
msgid "A tuple containing an argparse namespace object for the known arguments, and a list of the unknown arguments."
msgstr "既知の引数の argparse 名前空間オブジェクトと、未知の引数のリストを含むタプル。"

#: _pytest.config.argparsing.Parser.addini:1 of
msgid "Register an ini-file option."
msgstr "ini ファイルオプションを登録します。"

#: _pytest.config.argparsing.Parser.addini:3 of
msgid "Name of the ini-variable."
msgstr "ini 変数の名前。"

#: _pytest.config.argparsing.Parser.addini:5 of
msgid "Type of the variable. Can be:      * ``string``: a string     * ``bool``: a boolean     * ``args``: a list of strings, separated as in a shell     * ``linelist``: a list of strings, separated by line breaks     * ``paths``: a list of :class:`pathlib.Path`, separated as in a shell     * ``pathlist``: a list of ``py.path``, separated as in a shell  For ``paths`` and ``pathlist`` types, they are considered relative to the ini-file. In case the execution is happening without an ini-file defined, they will be considered relative to the current working directory (for example with ``--override-ini``).  .. versionadded:: 7.0     The ``paths`` variable type.  .. versionadded:: 8.1     Use the current working directory to resolve ``paths`` and ``pathlist`` in the absence of an ini-file.  Defaults to ``string`` if ``None`` or not passed."
msgstr "変数のタイプ。 次のいずれかです：* ``string``：文字列* ``bool``：ブール値* ``args``：シェルのように区切られた文字列のリスト* ``linelist``：改行で区切られた文字列のリスト* ``paths``：シェルのように区切られた :class:`pathlib.Path` のリスト* ``pathlist``：シェルのように区切られた ``py.path`` のリスト``paths`` および ``pathlist`` タイプの場合、ini ファイルに対して相対的に考慮されます。 ini ファイルが定義されていない場合、現在の作業ディレクトリに対して相対的に考慮されます（例えば ``--override-ini`` を使用する場合）。 .. versionadded:: 7.0``paths`` 変数タイプ。 .. versionadded:: 8.1ini ファイルがない場合に ``paths`` および ``pathlist`` を解決するために現在の作業ディレクトリを使用します。 ``None`` または渡されない場合、デフォルトは ``string`` です。"

#: _pytest.config.argparsing.Parser.addini:6 of
msgid "Type of the variable. Can be:"
msgstr "変数のタイプ。 次のいずれかです："

#: _pytest.config.argparsing.Parser.addini:8 of
msgid "``string``: a string"
msgstr "``string``：文字列"

#: _pytest.config.argparsing.Parser.addini:9 of
msgid "``bool``: a boolean"
msgstr "``bool``：ブール値"

#: _pytest.config.argparsing.Parser.addini:10 of
msgid "``args``: a list of strings, separated as in a shell"
msgstr "``args``：シェルのように区切られた文字列のリスト"

#: _pytest.config.argparsing.Parser.addini:11 of
msgid "``linelist``: a list of strings, separated by line breaks"
msgstr "``linelist``：改行で区切られた文字列のリスト"

#: _pytest.config.argparsing.Parser.addini:12 of
msgid "``paths``: a list of :class:`pathlib.Path`, separated as in a shell"
msgstr "``paths``：シェルのように区切られた :class:`pathlib.Path` のリスト"

#: _pytest.config.argparsing.Parser.addini:13 of
msgid "``pathlist``: a list of ``py.path``, separated as in a shell"
msgstr "``pathlist``：シェルのように区切られた ``py.path`` のリスト"

#: _pytest.config.argparsing.Parser.addini:15 of
msgid "For ``paths`` and ``pathlist`` types, they are considered relative to the ini-file. In case the execution is happening without an ini-file defined, they will be considered relative to the current working directory (for example with ``--override-ini``)."
msgstr "``paths`` および ``pathlist`` タイプの場合、ini ファイルに対して相対的に考慮されます。 ini ファイルが定義されていない場合、現在の作業ディレクトリに対して相対的に考慮されます（例えば ``--override-ini`` を使用する場合）。"

#: _pytest.config.argparsing.Parser.addini:19 of
msgid "The ``paths`` variable type."
msgstr "``paths`` 変数タイプ。"

#: _pytest.config.argparsing.Parser.addini:22 of
msgid "Use the current working directory to resolve ``paths`` and ``pathlist`` in the absence of an ini-file."
msgstr "ini ファイルがない場合に ``paths`` および ``pathlist`` を解決するために現在の作業ディレクトリを使用します。"

#: _pytest.config.argparsing.Parser.addini:25 of
msgid "Defaults to ``string`` if ``None`` or not passed."
msgstr "``None`` または渡されない場合、デフォルトは ``string`` です。"

#: _pytest.config.argparsing.Parser.addini:26 of
msgid "Default value if no ini-file option exists but is queried."
msgstr "ini ファイルオプションが存在しないがクエリされた場合のデフォルト値。"

#: _pytest.config.argparsing.Parser.addini:29 of
msgid "The value of ini-variables can be retrieved via a call to :py:func:`config.getini(name) <pytest.Config.getini>`."
msgstr "ini 変数の値は :py:func:`config.getini(name) <pytest.Config.getini>` を呼び出すことで取得できます。"

#: ../../reference/reference.rst:1003
msgid "OptionGroup"
msgstr "OptionGroup"

#: _pytest.config.argparsing.OptionGroup:1 of
msgid "A group of options shown in its own section."
msgstr "独自のセクションに表示されるオプショングループ。"

#: _pytest.config.argparsing.OptionGroup.addoption:1 of
msgid "Add an option to this group."
msgstr "このグループにオプションを追加します。"

#: _pytest.config.argparsing.OptionGroup.addoption:3 of
msgid "If a shortened version of a long option is specified, it will be suppressed in the help. ``addoption('--twowords', '--two-words')`` results in help showing ``--two-words`` only, but ``--twowords`` gets accepted **and** the automatic destination is in ``args.twowords``."
msgstr "長いオプションの短縮版が指定されている場合、ヘルプには表示されません。 ``addoption('--twowords', '--two-words')`` はヘルプに ``--two-words`` のみを表示しますが、``--twowords`` も受け入れられ、自動的な宛先は ``args.twowords`` になります。"

#: _pytest.config.PytestPluginManager:1 of
msgid "Bases: :py:class:`~pluggy._manager.PluginManager`"
msgstr "Bases: :py:class:`~pluggy._manager.PluginManager`"

#: _pytest.config.PytestPluginManager:1 of
msgid "A :py:class:`pluggy.PluginManager <pluggy.PluginManager>` with additional pytest-specific functionality:"
msgstr ":py:class:`pluggy.PluginManager <pluggy.PluginManager>` で、pytest 固有の追加機能があります："

#: _pytest.config.PytestPluginManager:4 of
msgid "Loading plugins from the command line, ``PYTEST_PLUGINS`` env variable and ``pytest_plugins`` global variables found in plugins being loaded."
msgstr "コマンドライン、``PYTEST_PLUGINS`` 環境変数、および読み込まれるプラグインに見つかる ``pytest_plugins`` グローバル変数からプラグインを読み込みます。"

#: _pytest.config.PytestPluginManager:6 of
msgid "``conftest.py`` loading during start-up."
msgstr "起動時の ``conftest.py`` の読み込み。"

#: _pytest.config.PytestPluginManager.register:1 of
msgid "Register a plugin and return its name."
msgstr "プラグインを登録し、その名前を返します。"

#: _pytest.config.PytestPluginManager.register:3 of
msgid "The name under which to register the plugin. If not specified, a name is generated using :func:`get_canonical_name`."
msgstr "プラグインを登録する名前。 指定されていない場合、:func:`get_canonical_name` を使用して名前が生成されます。"

#: _pytest.config.PytestPluginManager.register:7 of
msgid "The plugin name. If the name is blocked from registering, returns ``None``."
msgstr "プラグイン名。 名前が登録をブロックされている場合、``None`` を返します。"

#: _pytest.config.PytestPluginManager.register:11 of
msgid "If the plugin is already registered, raises a :exc:`ValueError`."
msgstr "プラグインが既に登録されている場合、:exc:`ValueError` を発生させます。"

#: _pytest.config.PytestPluginManager.hasplugin:1 of
#: pluggy._manager.PluginManager.has_plugin:1
msgid "Return whether a plugin with the given name is registered."
msgstr "指定された名前のプラグインが登録されているかどうかを返します。"

#: _pytest.config.PytestPluginManager.import_plugin:1 of
msgid "Import a plugin with ``modname``."
msgstr "``modname`` でプラグインをインポートします。"

#: _pytest.config.PytestPluginManager.import_plugin:3 of
msgid "If ``consider_entry_points`` is True, entry point names are also considered to find a plugin."
msgstr "``consider_entry_points`` が True の場合、エントリーポイント名もプラグインを見つけるために考慮されます。"

#: of pluggy._manager.PluginManager.add_hookcall_monitoring:1
msgid "Add before/after tracing functions for all hooks."
msgstr "すべてのフックに対して前後のトレース関数を追加します。"

#: of pluggy._manager.PluginManager.add_hookcall_monitoring:3
msgid "Returns an undo function which, when called, removes the added tracers."
msgstr "呼び出されると、追加されたトレーサーを削除する元に戻す関数を返します。"

#: of pluggy._manager.PluginManager.add_hookcall_monitoring:5
msgid "``before(hook_name, hook_impls, kwargs)`` will be called ahead of all hook calls and receive a hookcaller instance, a list of HookImpl instances and the keyword arguments for the hook call."
msgstr "``before(hook_name, hook_impls, kwargs)`` はすべてのフック呼び出しの前に呼び出され、フックコーラーインスタンス、HookImpl インスタンスのリスト、およびフック呼び出しのキーワード引数を受け取ります。"

#: of pluggy._manager.PluginManager.add_hookcall_monitoring:9
msgid "``after(outcome, hook_name, hook_impls, kwargs)`` receives the same arguments as ``before`` but also a :class:`~pluggy.Result` object which represents the result of the overall hook call."
msgstr "``after(outcome, hook_name, hook_impls, kwargs)`` は ``before`` と同じ引数を受け取りますが、フック呼び出し全体の結果を表す :class:`~pluggy.Result` オブジェクトも受け取ります。"

#: of pluggy._manager.PluginManager.add_hookspecs:1
msgid "Add new hook specifications defined in the given ``module_or_class``."
msgstr "指定された ``module_or_class`` に定義された新しいフック仕様を追加します。"

#: of pluggy._manager.PluginManager.add_hookspecs:3
msgid "Functions are recognized as hook specifications if they have been decorated with a matching :class:`HookspecMarker`."
msgstr "関数は、対応する :class:`HookspecMarker` でデコレートされている場合にフック仕様として認識されます。"

#: of pluggy._manager.PluginManager.check_pending:1
msgid "Verify that all hooks which have not been verified against a hook specification are optional, otherwise raise :exc:`PluginValidationError`."
msgstr "フック仕様に対して検証されていないすべてのフックがオプションであることを確認します。 そうでない場合は :exc:`PluginValidationError` を発生させます。"

#: of pluggy._manager.PluginManager.enable_tracing:1
msgid "Enable tracing of hook calls."
msgstr "フック呼び出しのトレースを有効にします。"

#: of pluggy._manager.PluginManager.enable_tracing:3
msgid "Returns an undo function which, when called, removes the added tracing."
msgstr "呼び出されると、追加されたトレースを削除する元に戻す関数を返します。"

#: of pluggy._manager.PluginManager.get_canonical_name:1
msgid "Return a canonical name for a plugin object."
msgstr "プラグインオブジェクトの正規名を返します。"

#: of pluggy._manager.PluginManager.get_canonical_name:3
msgid "Note that a plugin may be registered under a different name specified by the caller of :meth:`register(plugin, name) <register>`. To obtain the name of a registered plugin use :meth:`get_name(plugin) <get_name>` instead."
msgstr "プラグインは :meth:`register(plugin, name) <register>` の呼び出し元によって指定された別の名前で登録される場合があることに注意してください。 登録されたプラグインの名前を取得するには、代わりに :meth:`get_name(plugin) <get_name>` を使用してください。"

#: of pluggy._manager.PluginManager.get_hookcallers:1
msgid "Get all hook callers for the specified plugin."
msgstr "指定されたプラグインのすべてのフックコーラーを取得します。"

#: of pluggy._manager.PluginManager.get_hookcallers:3
msgid "The hook callers, or ``None`` if ``plugin`` is not registered in this plugin manager."
msgstr "フックコーラー、または ``plugin`` がこのプラグインマネージャーに登録されていない場合は ``None``。"

#: of pluggy._manager.PluginManager.get_name:1
msgid "Return the name the plugin is registered under, or ``None`` if is isn't."
msgstr "プラグインが登録されている名前を返します。 登録されていない場合は ``None``。"

#: of pluggy._manager.PluginManager.get_plugin:1
msgid "Return the plugin registered under the given name, if any."
msgstr "指定された名前で登録されているプラグインを返します（存在する場合）。"

#: of pluggy._manager.PluginManager.get_plugins:1
msgid "Return a set of all registered plugin objects."
msgstr "登録されているすべてのプラグインオブジェクトのセットを返します。"

#: of pluggy._manager.PluginManager.is_blocked:1
msgid "Return whether the given plugin name is blocked."
msgstr "指定されたプラグイン名がブロックされているかどうかを返します。"

#: of pluggy._manager.PluginManager.is_registered:1
msgid "Return whether the plugin is already registered."
msgstr "プラグインが既に登録されているかどうかを返します。"

#: of pluggy._manager.PluginManager.list_name_plugin:1
msgid "Return a list of (name, plugin) pairs for all registered plugins."
msgstr "すべての登録されたプラグインの (name, plugin) ペアのリストを返します。"

#: of pluggy._manager.PluginManager.list_plugin_distinfo:1
msgid "Return a list of (plugin, distinfo) pairs for all setuptools-registered plugins."
msgstr "すべての setuptools に登録されたプラグインの (plugin, distinfo) ペアのリストを返します。"

#: of pluggy._manager.PluginManager.load_setuptools_entrypoints:1
msgid "Load modules from querying the specified setuptools ``group``."
msgstr "指定された setuptools ``group`` をクエリしてモジュールをロードします。"

#: of pluggy._manager.PluginManager.load_setuptools_entrypoints:3
msgid "Entry point group to load plugins."
msgstr "プラグインをロードするエントリーポイントグループ。"

#: of pluggy._manager.PluginManager.load_setuptools_entrypoints:5
msgid "If given, loads only plugins with the given ``name``."
msgstr "指定された場合、指定された ``name`` のプラグインのみをロードします。"

#: of pluggy._manager.PluginManager.load_setuptools_entrypoints:8
msgid "The number of plugins loaded by this call."
msgstr "この呼び出しによってロードされたプラグインの数。"

#: of pluggy._manager.PluginManager.set_blocked:1
msgid "Block registrations of the given name, unregister if already registered."
msgstr "指定された名前の登録をブロックし、既に登録されている場合は登録を解除します。"

#: of pluggy._manager.PluginManager.subset_hook_caller:1
msgid "Return a proxy :class:`~pluggy.HookCaller` instance for the named method which manages calls to all registered plugins except the ones from remove_plugins."
msgstr "名前付きメソッドのプロキシ :class:`~pluggy.HookCaller` インスタンスを返します。 このインスタンスは、remove_plugins からのものを除くすべての登録されたプラグインへの呼び出しを管理します。"

#: of pluggy._manager.PluginManager.unblock:1
msgid "Unblocks a name."
msgstr "名前のブロックを解除します。"

#: of pluggy._manager.PluginManager.unblock:3
msgid "Returns whether the name was actually blocked."
msgstr "名前が実際にブロックされていたかどうかを返します。"

#: of pluggy._manager.PluginManager.unregister:1
msgid "Unregister a plugin and all of its hook implementations."
msgstr "プラグインとそのすべてのフック実装の登録を解除します。"

#: of pluggy._manager.PluginManager.unregister:3
msgid "The plugin can be specified either by the plugin object or the plugin name. If both are specified, they must agree."
msgstr "プラグインはプラグインオブジェクトまたはプラグイン名のいずれかで指定できます。 両方が指定されている場合、それらは一致している必要があります。"

#: of pluggy._manager.PluginManager.unregister:6
msgid "Returns the unregistered plugin, or ``None`` if not found."
msgstr "登録解除されたプラグインを返します。 見つからない場合は ``None``。"

#: ../../../../docstring of pytest.PytestPluginManager.project_name:1
msgid "The project name."
msgstr "プロジェクト名。"

#: ../../../../docstring of pytest.PytestPluginManager.hook:1
msgid "The \"hook relay\", used to call a hook on all registered plugins. See :ref:`calling`."
msgstr "フックリレー。 すべての登録されたプラグインでフックを呼び出すために使用されます。 詳細は :ref:`calling` を参照してください。"

#: ../../../../docstring of pytest.PytestPluginManager.trace:1
msgid "The tracing entry point. See :ref:`tracing`."
msgstr "トレースエントリーポイント。 詳細は :ref:`tracing` を参照してください。"

#: ../../reference/reference.rst:1018
msgid "TestReport"
msgstr "TestReport"

#: _pytest.reports.TestReport:1 of
msgid "Basic test report object (also used for setup and teardown calls if they fail)."
msgstr "基本的なテストレポートオブジェクト（セットアップおよびティアダウン呼び出しが失敗した場合にも使用されます）。"

#: ../../../../docstring of pytest.TestReport.location:1
msgid "A (filesystempath, lineno, domaininfo) tuple indicating the actual location of a test item - it might be different from the collected one e.g. if a method is inherited from a different module. The filesystempath may be relative to ``config.rootdir``. The line number is 0-based."
msgstr "テストアイテムの実際の場所を示す (filesystempath, lineno, domaininfo) タプル。 メソッドが異なるモジュールから継承されている場合など、収集された場所と異なる場合があります。 filesystempath は ``config.rootdir`` に対して相対的である場合があります。 行番号は 0 ベースです。"

#: ../../../../docstring of pytest.TestReport.keywords:1
msgid "A name -> value dictionary containing all keywords and markers associated with a test invocation."
msgstr "テスト呼び出しに関連付けられたすべてのキーワードおよびマーカーを含む名前 -> 値の辞書。"

#: ../../../../docstring of pytest.TestReport.when:1
msgid "One of 'setup', 'call', 'teardown' to indicate runtest phase."
msgstr "runtest フェーズを示す 'setup'、'call'、'teardown' のいずれか。"

#: ../../../../docstring of pytest.TestReport.user_properties:1
msgid "User properties is a list of tuples (name, value) that holds user defined properties of the test."
msgstr "ユーザープロパティは、テストのユーザー定義プロパティを保持する (name, value) タプルのリストです。"

#: ../../../../docstring of pytest.TestReport.duration:1
msgid "Time it took to run just the test."
msgstr "テストの実行にかかった時間。"

#: _pytest.reports.TestReport.from_item_and_call:1 of
msgid "Create and fill a TestReport with standard item and call info."
msgstr "標準のアイテムおよび呼び出し情報で TestReport を作成して埋めます。"

#: _pytest.reports.TestReport.from_item_and_call:4 of
msgid "The call info."
msgstr "呼び出し情報。"

#: ../../reference/reference.rst:1026
msgid "TestShortLogReport"
msgstr "TestShortLogReport"

#: _pytest.terminal.TestShortLogReport:1 of
#, python-brace-format
msgid "Used to store the test status result category, shortletter and verbose word. For example ``\"rerun\", \"R\", (\"RERUN\", {\"yellow\": True})``."
msgstr "テストステータス結果カテゴリ、短い文字、および詳細な単語を格納するために使用されます。 例えば ``\"rerun\", \"R\", (\"RERUN\", {\"yellow\": True})``。"

#: _pytest.terminal.TestShortLogReport:4 of
msgid "The class of result, for example ``“passed”``, ``“skipped”``, ``“error”``, or the empty string."
msgstr "結果のクラス。 例えば ``“passed”``、``“skipped”``、``“error”``、または空文字列。"

#: _pytest.terminal.TestShortLogReport:7 of
msgid "The short letter shown as testing progresses, for example ``\".\"``, ``\"s\"``, ``\"E\"``, or the empty string."
msgstr "テストの進行中に表示される短い文字。 例えば ``\".\"``、``\"s\"``、``\"E\"``、または空文字列。"

#: _pytest.terminal.TestShortLogReport:10 of
msgid "Verbose word is shown as testing progresses in verbose mode, for example ``\"PASSED\"``, ``\"SKIPPED\"``, ``\"ERROR\"``, or the empty string."
msgstr "詳細モードでテストの進行中に表示される詳細な単語。 例えば ``\"PASSED\"``、``\"SKIPPED\"``、``\"ERROR\"``、または空文字列。"

#: ../../../../docstring of pytest.TestShortLogReport.category:1
msgid "Alias for field number 0"
msgstr "フィールド番号 0 のエイリアス"

#: ../../../../docstring of pytest.TestShortLogReport.letter:1
msgid "Alias for field number 1"
msgstr "フィールド番号 1 のエイリアス"

#: ../../../../docstring of pytest.TestShortLogReport.word:1
msgid "Alias for field number 2"
msgstr "フィールド番号 2 のエイリアス"

#: ../../reference/reference.rst:1032
msgid "Result"
msgstr "Result"

#: ../../reference/reference.rst:1034
msgid "Result object used within :ref:`hook wrappers <hookwrapper>`, see :py:class:`Result in the pluggy documentation <pluggy.Result>` for more information."
msgstr ":ref:`hook wrappers <hookwrapper>` 内で使用される結果オブジェクト。 詳細は :py:class:`Result in the pluggy documentation <pluggy.Result>` を参照してください。"

#: _pytest.stash.Stash:1 of
msgid "``Stash`` is a type-safe heterogeneous mutable mapping that allows keys and value types to be defined separately from where it (the ``Stash``) is created."
msgstr "``Stash`` は型安全な異種可変マッピングであり、キーと値のタイプを ``Stash`` が作成される場所とは別に定義できます。"

#: _pytest.stash.Stash:5 of
msgid "Usually you will be given an object which has a ``Stash``, for example :class:`~pytest.Config` or a :class:`~_pytest.nodes.Node`:"
msgstr "通常、``Stash`` を持つオブジェクトが与えられます。 例えば :class:`~pytest.Config` または :class:`~_pytest.nodes.Node`："

#: _pytest.stash.Stash:12 of
msgid "If a module or plugin wants to store data in this ``Stash``, it creates :class:`StashKey`\\s for its keys (at the module level):"
msgstr "モジュールまたはプラグインがこの ``Stash`` にデータを保存したい場合、キーのために :class:`StashKey`\\s を作成します（モジュールレベルで）："

#: _pytest.stash.Stash:21 of
msgid "To store information:"
msgstr "情報を保存するには："

#: _pytest.stash.Stash:29 of
msgid "To retrieve the information:"
msgstr "情報を取得するには："

#: _pytest.stash.Stash.__setitem__:1 of
msgid "Set a value for key."
msgstr "キーの値を設定します。"

#: _pytest.stash.Stash.__getitem__:1 of
msgid "Get the value for key."
msgstr "キーの値を取得します。"

#: _pytest.stash.Stash.__delitem__:3 _pytest.stash.Stash.__getitem__:3 of
msgid "Raises ``KeyError`` if the key wasn't set before."
msgstr "キーが以前に設定されていなかった場合、``KeyError`` を発生させます。"

#: _pytest.stash.Stash.get:1 of
msgid "Get the value for key, or return default if the key wasn't set before."
msgstr "キーの値を取得します。 キーが以前に設定されていなかった場合、デフォルトを返します。"

#: _pytest.stash.Stash.setdefault:1 of
msgid "Return the value of key if already set, otherwise set the value of key to default and return default."
msgstr "既に設定されている場合はキーの値を返し、そうでない場合はキーの値をデフォルトに設定してデフォルトを返します。"

#: _pytest.stash.Stash.__delitem__:1 of
msgid "Delete the value for key."
msgstr "キーの値を削除します。"

#: _pytest.stash.Stash.__contains__:1 of
msgid "Return whether key was set."
msgstr "キーが設定されているかどうかを返します。"

#: _pytest.stash.Stash.__len__:1 of
msgid "Return how many items exist in the stash."
msgstr "スタッシュに存在するアイテムの数を返します。"

#: _pytest.stash.StashKey:1 of
msgid "Bases: :py:class:`~typing.Generic`\\ [:py:obj:`~_pytest.stash.T`]"
msgstr "Bases: :py:class:`~typing.Generic`\\ [:py:obj:`~_pytest.stash.T`]"

#: _pytest.stash.StashKey:1 of
msgid "``StashKey`` is an object used as a key to a :class:`Stash`."
msgstr "``StashKey`` は :class:`Stash` のキーとして使用されるオブジェクトです。"

#: _pytest.stash.StashKey:3 of
msgid "A ``StashKey`` is associated with the type ``T`` of the value of the key."
msgstr "``StashKey`` はキーの値のタイプ ``T`` に関連付けられています。"

#: _pytest.stash.StashKey:5 of
msgid "A ``StashKey`` is unique and cannot conflict with another key."
msgstr "``StashKey`` は一意であり、他のキーと競合することはありません。"

#: ../../reference/reference.rst:1049
msgid "Global Variables"
msgstr "グローバル変数"

#: ../../reference/reference.rst:1051
msgid "pytest treats some global variables in a special manner when defined in a test module or ``conftest.py`` files."
msgstr "pytest は、テストモジュールや ``conftest.py`` ファイルで定義された一部のグローバル変数を特別に扱います。"

#: ../../reference/reference.rst:1057 ../../reference/reference.rst:1069
msgid "**Tutorial**: :ref:`customizing-test-collection`"
msgstr "**チュートリアル**： :ref:`customizing-test-collection`"

#: ../../reference/reference.rst:1059
msgid "Can be declared in *conftest.py files* to exclude test directories or modules. Needs to be a list of paths (``str``, :class:`pathlib.Path` or any :class:`os.PathLike`)."
msgstr "*conftest.py ファイル* に宣言してテストディレクトリやモジュールを除外できます。 パスのリスト（``str``、:class:`pathlib.Path` または任意の :class:`os.PathLike`）である必要があります。"

#: ../../reference/reference.rst:1071
msgid "Can be declared in *conftest.py files* to exclude test directories or modules with Unix shell-style wildcards. Needs to be ``list[str]`` where ``str`` can contain glob patterns."
msgstr "*conftest.py ファイル* に宣言して Unix シェルスタイルのワイルドカードを使用してテストディレクトリやモジュールを除外できます。 ``str`` にグロブパターンを含むことができる ``list[str]`` である必要があります。"

#: ../../reference/reference.rst:1082
msgid "**Tutorial**: :ref:`available installable plugins`"
msgstr "**チュートリアル**： :ref:`available installable plugins`"

#: ../../reference/reference.rst:1084
msgid "Can be declared at the **global** level in *test modules* and *conftest.py files* to register additional plugins. Can be either a ``str`` or ``Sequence[str]``."
msgstr "*テストモジュール* および *conftest.py ファイル* の **グローバル** レベルで宣言して追加のプラグインを登録できます。 ``str`` または ``Sequence[str]`` のいずれかです。"

#: ../../reference/reference.rst:1098
msgid "**Tutorial**: :ref:`scoped-marking`"
msgstr "**チュートリアル**： :ref:`scoped-marking`"

#: ../../reference/reference.rst:1100
msgid "Can be declared at the **global** level in *test modules* to apply one or more :ref:`marks <marks ref>` to all test functions and methods. Can be either a single mark or a list of marks (applied in left-to-right order)."
msgstr "*テストモジュール* の **グローバル** レベルで宣言して、すべてのテスト関数およびメソッドに 1 つ以上の :ref:`marks <marks ref>` を適用できます。 単一のマークまたはマークのリスト（左から右の順に適用）である場合があります。"

#: ../../reference/reference.rst:1118
msgid "Environment Variables"
msgstr "環境変数"

#: ../../reference/reference.rst:1120
msgid "Environment variables that can be used to change pytest's behavior."
msgstr "pytest の動作を変更するために使用できる環境変数。"

#: ../../reference/reference.rst:1124
msgid "When set (regardless of value), pytest acknowledges that is running in a CI process. Alternative to ``BUILD_NUMBER`` variable. See also :ref:`ci-pipelines`."
msgstr "設定されている場合（値に関係なく）、pytest は CI プロセスで実行されていることを認識します。 ``BUILD_NUMBER`` 変数の代替です。 詳細は :ref:`ci-pipelines` を参照してください。"

#: ../../reference/reference.rst:1128
msgid "When set (regardless of value), pytest acknowledges that is running in a CI process. Alternative to CI variable. See also :ref:`ci-pipelines`."
msgstr "設定されている場合（値に関係なく）、pytest は CI プロセスで実行されていることを認識します。 CI 変数の代替です。 詳細は :ref:`ci-pipelines` を参照してください。"

#: ../../reference/reference.rst:1132
msgid "This contains a command-line (parsed by the py:mod:`shlex` module) that will be **prepended** to the command line given by the user, see :ref:`adding default options` for more information."
msgstr "これには、ユーザーが指定したコマンドラインに **先頭に追加** されるコマンドライン（py:mod:`shlex` モジュールによって解析されます）が含まれます。 詳細は :ref:`adding default options` を参照してください。"

#: ../../reference/reference.rst:1137
msgid "This environment variable is defined at the start of the pytest session and is undefined afterwards. It contains the value of ``pytest.__version__``, and among other things can be used to easily check if a code is running from within a pytest run."
msgstr "この環境変数は pytest セッションの開始時に定義され、その後は未定義になります。 ``pytest.__version__`` の値を含み、他のこととともに、コードが pytest 実行中に実行されているかどうかを簡単に確認するために使用できます。"

#: ../../reference/reference.rst:1142
msgid "This is not meant to be set by users, but is set by pytest internally with the name of the current test so other processes can inspect it, see :ref:`pytest current test env` for more information."
msgstr "これはユーザーによって設定されることを意図しているのではなく、pytest が内部的に現在のテストの名前で設定します。 他のプロセスがそれを検査できるようにします。 詳細は :ref:`pytest current test env` を参照してください。"

#: ../../reference/reference.rst:1147
msgid "When set, pytest will print tracing and debug information."
msgstr "設定されている場合、pytest はトレースおよびデバッグ情報を出力します。"

#: ../../reference/reference.rst:1151
msgid "Root for temporary directories produced by fixtures like :fixture:`tmp_path` as discussed in :ref:`temporary directory location and retention`."
msgstr ":fixture:`tmp_path` のようなフィクスチャによって生成される一時ディレクトリのルート。 詳細は :ref:`temporary directory location and retention` を参照してください。"

#: ../../reference/reference.rst:1156
msgid "When set, disables plugin auto-loading through :std:doc:`entry point packaging metadata <packaging:guides/creating-and-discovering-plugins>`. Only explicitly specified plugins will be loaded."
msgstr "設定されている場合、:std:doc:`entry point packaging metadata <packaging:guides/creating-and-discovering-plugins>` を通じたプラグインの自動読み込みを無効にします。 明示的に指定されたプラグインのみが読み込まれます。"

#: ../../reference/reference.rst:1162
msgid "Contains comma-separated list of modules that should be loaded as plugins:"
msgstr "プラグインとして読み込むべきモジュールのカンマ区切りリストを含みます："

#: ../../reference/reference.rst:1170
msgid "Sets a `pygment style <https://pygments.org/docs/styles/>`_ to use for the code output."
msgstr "コード出力に使用する `pygment style <https://pygments.org/docs/styles/>`_ を設定します。"

#: ../../reference/reference.rst:1174
msgid "Sets the :envvar:`PYTEST_THEME` to be either *dark* or *light*."
msgstr ":envvar:`PYTEST_THEME` を *dark* または *light* に設定します。"

#: ../../reference/reference.rst:1178
msgid "When set to ``1``, pytest will use color in terminal output. When set to ``0``, pytest will not use color. ``PY_COLORS`` takes precedence over ``NO_COLOR`` and ``FORCE_COLOR``."
msgstr "``1`` に設定すると、pytest はターミナル出力に色を使用します。 ``0`` に設定すると、pytest は色を使用しません。 ``PY_COLORS`` は ``NO_COLOR`` および ``FORCE_COLOR`` より優先されます。"

#: ../../reference/reference.rst:1184
msgid "When set to a non-empty string (regardless of value), pytest will not use color in terminal output. ``PY_COLORS`` takes precedence over ``NO_COLOR``, which takes precedence over ``FORCE_COLOR``. See `no-color.org <https://no-color.org/>`__ for other libraries supporting this community standard."
msgstr "空でない文字列に設定されている場合（値に関係なく）、pytest はターミナル出力に色を使用しません。 ``PY_COLORS`` は ``NO_COLOR`` より優先され、``FORCE_COLOR`` より優先されます。 詳細は `no-color.org <https://no-color.org/>`__ を参照してください。 このコミュニティ標準をサポートする他のライブラリについても説明しています。"

#: ../../reference/reference.rst:1190
msgid "When set to a non-empty string (regardless of value), pytest will use color in terminal output. ``PY_COLORS`` and ``NO_COLOR`` take precedence over ``FORCE_COLOR``."
msgstr "空でない文字列に設定されている場合（値に関係なく）、pytest はターミナル出力に色を使用します。 ``PY_COLORS`` および ``NO_COLOR`` は ``FORCE_COLOR`` より優先されます。"

#: ../../reference/reference.rst:1194
msgid "Exceptions"
msgstr "例外"

#: _pytest.config.exceptions.UsageError:1 of
msgid "Error in pytest usage or invocation."
msgstr "pytest の使用または呼び出しに関するエラー。"

#: _pytest.fixtures.FixtureLookupError:1 of
msgid "Bases: :py:class:`LookupError`"
msgstr "Bases: :py:class:`LookupError`"

#: _pytest.fixtures.FixtureLookupError:1 of
msgid "Could not return a requested fixture (missing or invalid)."
msgstr "要求されたフィクスチャを返すことができませんでした（存在しないか無効です）。"

#: ../../reference/reference.rst:1205
msgid "Warnings"
msgstr "警告"

#: ../../reference/reference.rst:1207
msgid "Custom warnings generated in some situations such as improper usage or deprecated features."
msgstr "不適切な使用や非推奨の機能などの状況で生成されるカスタム警告。"

#: of pytest.PytestWarning:1
msgid "Bases: :py:class:`UserWarning`"
msgstr "Bases: :py:class:`UserWarning`"

#: of pytest.PytestWarning:1
msgid "Base class for all warnings emitted by pytest."
msgstr "pytest によって発行されるすべての警告の基本クラス。"

#: of pytest.PytestAssertRewriteWarning:1 pytest.PytestCacheWarning:1
#: pytest.PytestCollectionWarning:1 pytest.PytestConfigWarning:1
#: pytest.PytestReturnNotNoneWarning:1
#: pytest.PytestUnhandledThreadExceptionWarning:1
#: pytest.PytestUnknownMarkWarning:1 pytest.PytestUnraisableExceptionWarning:1
msgid "Bases: :py:class:`~pytest.PytestWarning`"
msgstr "Bases: :py:class:`~pytest.PytestWarning`"

#: of pytest.PytestAssertRewriteWarning:1
msgid "Warning emitted by the pytest assert rewrite module."
msgstr "pytest アサートリライトモジュールによって発行される警告。"

#: of pytest.PytestCacheWarning:1
msgid "Warning emitted by the cache plugin in various situations."
msgstr "さまざまな状況でキャッシュプラグインによって発行される警告。"

#: of pytest.PytestCollectionWarning:1
msgid "Warning emitted when pytest is not able to collect a file or symbol in a module."
msgstr "pytest がファイルまたはモジュール内のシンボルを収集できない場合に発行される警告。"

#: of pytest.PytestConfigWarning:1
msgid "Warning emitted for configuration issues."
msgstr "設定の問題に対して発行される警告。"

#: of pytest.PytestDeprecationWarning:1
msgid "Bases: :py:class:`~pytest.PytestWarning`, :py:class:`DeprecationWarning`"
msgstr "Bases: :py:class:`~pytest.PytestWarning`, :py:class:`DeprecationWarning`"

#: of pytest.PytestDeprecationWarning:1
msgid "Warning class for features that will be removed in a future version."
msgstr "将来のバージョンで削除される機能の警告クラス。"

#: of pytest.PytestExperimentalApiWarning:1
msgid "Bases: :py:class:`~pytest.PytestWarning`, :py:class:`FutureWarning`"
msgstr "Bases: :py:class:`~pytest.PytestWarning`, :py:class:`FutureWarning`"

#: of pytest.PytestExperimentalApiWarning:1
msgid "Warning category used to denote experiments in pytest."
msgstr "pytest の実験を示すために使用される警告カテゴリ。"

#: of pytest.PytestExperimentalApiWarning:3
msgid "Use sparingly as the API might change or even be removed completely in a future version."
msgstr "API は将来のバージョンで変更されたり、完全に削除されたりする可能性があるため、慎重に使用してください。"

#: of pytest.PytestReturnNotNoneWarning:1
msgid "Warning emitted when a test function is returning value other than None."
msgstr "テスト関数が None 以外の値を返しているときに発行される警告。"

#: of pytest.PytestRemovedIn9Warning:1
msgid "Bases: :py:class:`~pytest.PytestDeprecationWarning`"
msgstr "Bases: :py:class:`~pytest.PytestDeprecationWarning`"

#: of pytest.PytestRemovedIn9Warning:1
msgid "Warning class for features that will be removed in pytest 9."
msgstr "pytest 9 で削除される機能の警告クラス。"

#: of pytest.PytestUnhandledCoroutineWarning:1
msgid "Bases: :py:class:`~pytest.PytestReturnNotNoneWarning`"
msgstr "Bases: :py:class:`~pytest.PytestReturnNotNoneWarning`"

#: of pytest.PytestUnhandledCoroutineWarning:1
msgid "Warning emitted for an unhandled coroutine."
msgstr "未処理のコルーチンに対して発行される警告。"

#: of pytest.PytestUnhandledCoroutineWarning:3
msgid "A coroutine was encountered when collecting test functions, but was not handled by any async-aware plugin. Coroutine test functions are not natively supported."
msgstr "テスト関数を収集する際にコルーチンが見つかりましたが、非同期対応プラグインによって処理されませんでした。 コルーチンテスト関数はネイティブにはサポートされていません。"

#: of pytest.PytestUnknownMarkWarning:1
msgid "Warning emitted on use of unknown markers."
msgstr "未知のマーカーの使用時に発行される警告。"

#: of pytest.PytestUnknownMarkWarning:3
msgid "See :ref:`mark` for details."
msgstr "詳細は :ref:`mark` を参照してください。"

#: of pytest.PytestUnraisableExceptionWarning:1
msgid "An unraisable exception was reported."
msgstr "報告された未発生の例外。"

#: of pytest.PytestUnraisableExceptionWarning:3
msgid "Unraisable exceptions are exceptions raised in :meth:`__del__ <object.__del__>` implementations and similar situations when the exception cannot be raised as normal."
msgstr "未発生の例外は、:meth:`__del__ <object.__del__>` 実装や、例外を通常の方法で発生させることができない状況で発生する例外です。"

#: of pytest.PytestUnhandledThreadExceptionWarning:1
msgid "An unhandled exception occurred in a :class:`~threading.Thread`."
msgstr " :class:`~threading.Thread` で未処理の例外が発生しました。"

#: of pytest.PytestUnhandledThreadExceptionWarning:3
msgid "Such exceptions don't propagate normally."
msgstr "このような例外は通常の方法では伝播しません。"

#: ../../reference/reference.rst:1249
msgid "Consult the :ref:`internal-warnings` section in the documentation for more information."
msgstr "詳細については、ドキュメントの :ref:`internal-warnings` セクションを参照してください。"

#: ../../reference/reference.rst:1255
msgid "Configuration Options"
msgstr "設定オプション"

#: ../../reference/reference.rst:1257
msgid "Here is a list of builtin configuration options that may be written in a ``pytest.ini`` (or ``.pytest.ini``), ``pyproject.toml``, ``tox.ini``, or ``setup.cfg`` file, usually located at the root of your repository."
msgstr "ここに、通常リポジトリのルートに配置される ``pytest.ini`` (または ``.pytest.ini``)、``pyproject.toml``、``tox.ini``、``setup.cfg`` ファイルに記述できる組み込みの設定オプションのリストがあります。"

#: ../../reference/reference.rst:1260
msgid "To see each file format in details, see :ref:`config file formats`."
msgstr "各ファイル形式の詳細については、:ref:`config file formats` を参照してください。"

#: ../../reference/reference.rst:1263
msgid "Usage of ``setup.cfg`` is not recommended except for very simple use cases. ``.cfg`` files use a different parser than ``pytest.ini`` and ``tox.ini`` which might cause hard to track down problems. When possible, it is recommended to use the latter files, or ``pyproject.toml``, to hold your pytest configuration."
msgstr "非常に単純な使用例を除いて、``setup.cfg`` の使用は推奨されません。 ``.cfg`` ファイルは ``pytest.ini`` や ``tox.ini`` とは異なるパーサーを使用するため、問題の追跡が困難になる可能性があります。 可能であれば、後者のファイルや ``pyproject.toml`` を使用して pytest の設定を保持することをお勧めします。"

#: ../../reference/reference.rst:1268
msgid "Configuration options may be overwritten in the command-line by using ``-o/--override-ini``, which can also be passed multiple times. The expected format is ``name=value``. For example::"
msgstr "設定オプションは、コマンドラインで ``-o/--override-ini`` を使用して上書きすることができ、複数回渡すこともできます。 期待される形式は ``name=value`` です。 例えば::"

#: ../../reference/reference.rst:1276
msgid "Add the specified ``OPTS`` to the set of command line arguments as if they had been specified by the user. Example: if you have this ini file content:"
msgstr "指定された ``OPTS`` をコマンドライン引数のセットに追加します。 ユーザーが指定したかのように。 例: この ini ファイルの内容がある場合:"

#: ../../reference/reference.rst:1285
msgid "issuing ``pytest test_hello.py`` actually means:"
msgstr "``pytest test_hello.py`` を発行することは実際には次の意味です:"

#: ../../reference/reference.rst:1291
msgid "Default is to add no options."
msgstr "デフォルトではオプションを追加しません。"

#: ../../reference/reference.rst:1296
msgid "Sets the directory where the cache plugin's content is stored. Default directory is ``.pytest_cache`` which is created in :ref:`rootdir <rootdir>`. Directory may be relative or absolute path. If setting relative path, then directory is created relative to :ref:`rootdir <rootdir>`. Additionally, a path may contain environment variables, that will be expanded. For more information about cache plugin please refer to :ref:`cache_provider`."
msgstr "キャッシュプラグインの内容が保存されるディレクトリを設定します。 デフォルトのディレクトリは :ref:`rootdir <rootdir>` に作成される ``.pytest_cache`` です。 ディレクトリは相対パスまたは絶対パスで指定できます。 相対パスを設定する場合、ディレクトリは :ref:`rootdir <rootdir>` に対して相対的に作成されます。 さらに、パスには環境変数を含めることができ、展開されます。 キャッシュプラグインの詳細については、:ref:`cache_provider` を参照してください。"

#: ../../reference/reference.rst:1305
msgid "Controls if pytest should attempt to identify `namespace packages <https://packaging.python.org/en/latest/guides/packaging-namespace-packages>`__ when collecting Python modules. Default is ``False``."
msgstr "Python モジュールを収集する際に pytest が `namespace packages <https://packaging.python.org/en/latest/guides/packaging-namespace-packages>`__ を識別しようとするかどうかを制御します。 デフォルトは ``False`` です。"

#: ../../reference/reference.rst:1308
msgid "Set to ``True`` if the package you are testing is part of a namespace package."
msgstr "テストしているパッケージがネームスペースパッケージの一部である場合は ``True`` に設定します。"

#: ../../reference/reference.rst:1310
msgid "Only `native namespace packages <https://packaging.python.org/en/latest/guides/packaging-namespace-packages/#native-namespace-packages>`__ are supported, with no plans to support `legacy namespace packages <https://packaging.python.org/en/latest/guides/packaging-namespace-packages/#legacy-namespace-packages>`__."
msgstr "サポートされているのは `native namespace packages <https://packaging.python.org/en/latest/guides/packaging-namespace-packages/#native-namespace-packages>`__ のみであり、`legacy namespace packages <https://packaging.python.org/en/latest/guides/packaging-namespace-packages/#legacy-namespace-packages>`__ をサポートする予定はありません。"

#: ../../reference/reference.rst:1317
msgid "Sets the console output style while running tests:"
msgstr "テスト実行中のコンソール出力スタイルを設定します:"

#: ../../reference/reference.rst:1319
msgid "``classic``: classic pytest output."
msgstr "``classic``: クラシックな pytest 出力。"

#: ../../reference/reference.rst:1320
msgid "``progress``: like classic pytest output, but with a progress indicator."
msgstr "``progress``: クラシックな pytest 出力に似ていますが、進行状況インジケーターが追加されています。"

#: ../../reference/reference.rst:1321
msgid "``progress-even-when-capture-no``: allows the use of the progress indicator even when ``capture=no``."
msgstr "``progress-even-when-capture-no``: ``capture=no`` の場合でも進行状況インジケーターの使用を許可します。"

#: ../../reference/reference.rst:1322
msgid "``count``: like progress, but shows progress as the number of tests completed instead of a percent."
msgstr "``count``: 進行状況に似ていますが、パーセントではなく完了したテストの数として進行状況を表示します。"

#: ../../reference/reference.rst:1324
msgid "The default is ``progress``, but you can fallback to ``classic`` if you prefer or the new mode is causing unexpected problems:"
msgstr "デフォルトは ``progress`` ですが、好みに応じて、または新しいモードが予期しない問題を引き起こしている場合は ``classic`` に戻すことができます:"

#: ../../reference/reference.rst:1338
msgid "Default encoding to use to decode text files with docstrings. :ref:`See how pytest handles doctests <doctest>`."
msgstr "ドックストリングを含むテキストファイルをデコードするために使用するデフォルトのエンコーディング。 :ref:`See how pytest handles doctests <doctest>` を参照してください。"

#: ../../reference/reference.rst:1344
msgid "One or more doctest flag names from the standard ``doctest`` module. :ref:`See how pytest handles doctests <doctest>`."
msgstr "標準の ``doctest`` モジュールからの 1 つ以上のドックテストフラグ名。 :ref:`See how pytest handles doctests <doctest>` を参照してください。"

#: ../../reference/reference.rst:1352
msgid "Allows to pick the action for empty parametersets in parameterization"
msgstr "パラメータ化で空のパラメータセットに対するアクションを選択できます"

#: ../../reference/reference.rst:1354
msgid "``skip`` skips tests with an empty parameterset (default)"
msgstr "``skip`` は空のパラメータセットを持つテストをスキップします (デフォルト)"

#: ../../reference/reference.rst:1355
msgid "``xfail`` marks tests with an empty parameterset as xfail(run=False)"
msgstr "``xfail`` は空のパラメータセットを持つテストを xfail(run=False) としてマークします"

#: ../../reference/reference.rst:1356
msgid "``fail_at_collect`` raises an exception if parametrize collects an empty parameter set"
msgstr "``fail_at_collect`` は、パラメータ化が空のパラメータセットを収集した場合に例外を発生させます"

#: ../../reference/reference.rst:1366
msgid "The default value of this option is planned to change to ``xfail`` in future releases as this is considered less error prone, see :issue:`3155` for more details."
msgstr "このオプションのデフォルト値は、将来のリリースで ``xfail`` に変更される予定です。 これはエラーが発生しにくいと考えられるためです。 詳細については :issue:`3155` を参照してください。"

#: ../../reference/reference.rst:1372
msgid "Dumps the tracebacks of all threads if a test takes longer than ``X`` seconds to run (including fixture setup and teardown). Implemented using the :func:`faulthandler.dump_traceback_later` function, so all caveats there apply."
msgstr "テストの実行に ``X`` 秒以上かかる場合 (フィクスチャのセットアップとティアダウンを含む)、すべてのスレッドのトレースバックをダンプします。 :func:`faulthandler.dump_traceback_later` 関数を使用して実装されているため、そこにあるすべての注意事項が適用されます。"

#: ../../reference/reference.rst:1382
msgid "For more information please refer to :ref:`faulthandler`."
msgstr "詳細については :ref:`faulthandler` を参照してください。"

#: ../../reference/reference.rst:1388
msgid "Sets a list of filters and actions that should be taken for matched warnings. By default all warnings emitted during the test session will be displayed in a summary at the end of the test session."
msgstr "一致する警告に対して実行されるフィルターとアクションのリストを設定します。 デフォルトでは、テストセッション中に発生したすべての警告がテストセッションの最後に要約として表示されます。"

#: ../../reference/reference.rst:1400
msgid "This tells pytest to ignore deprecation warnings and turn all other warnings into errors. For more information please refer to :ref:`warnings`."
msgstr "これは pytest に非推奨警告を無視し、他のすべての警告をエラーに変えるように指示します。 詳細については :ref:`warnings` を参照してください。"

#: ../../reference/reference.rst:1408
msgid "Configures how durations are recorded into the JUnit XML report:"
msgstr "JUnit XML レポートに期間が記録される方法を設定します:"

#: ../../reference/reference.rst:1410
msgid "``total`` (the default): duration times reported include setup, call, and teardown times."
msgstr "``total`` (デフォルト): 報告される期間にはセットアップ、呼び出し、およびティアダウンの時間が含まれます。"

#: ../../reference/reference.rst:1411
msgid "``call``: duration times reported include only call times, excluding setup and teardown."
msgstr "``call``: 報告される期間にはセットアップとティアダウンを除く呼び出し時間のみが含まれます。"

#: ../../reference/reference.rst:1422
msgid "Default changed to ``xunit2``."
msgstr "デフォルトが ``xunit2`` に変更されました。"

#: ../../reference/reference.rst:1425
msgid "Configures the format of the generated JUnit XML file. The possible options are:"
msgstr "生成された JUnit XML ファイルの形式を設定します。 可能なオプションは次のとおりです:"

#: ../../reference/reference.rst:1427
msgid "``xunit1`` (or ``legacy``): produces old style output, compatible with the xunit 1.0 format."
msgstr "``xunit1`` (または ``legacy``): xunit 1.0 形式と互換性のある古いスタイルの出力を生成します。"

#: ../../reference/reference.rst:1428
msgid "``xunit2``: produces `xunit 2.0 style output <https://github.com/jenkinsci/xunit-plugin/blob/xunit-2.3.2/src/main/resources/org/jenkinsci/plugins/xunit/types/model/xsd/junit-10.xsd>`__, which should be more compatible with latest Jenkins versions.  **This is the default**."
msgstr "``xunit2``: `xunit 2.0 スタイルの出力 <https://github.com/jenkinsci/xunit-plugin/blob/xunit-2.3.2/src/main/resources/org/jenkinsci/plugins/xunit/types/model/xsd/junit-10.xsd>`__ を生成します。 これは最新の Jenkins バージョンとより互換性があるはずです。 **これがデフォルトです**。"

#: ../../reference/reference.rst:1439
msgid "``log``, ``all``, ``out-err`` options added."
msgstr "``log``、``all``、``out-err`` オプションが追加されました。"

#: ../../reference/reference.rst:1442
msgid "Configures if captured output should be written to the JUnit XML file. Valid values are:"
msgstr "キャプチャされた出力を JUnit XML ファイルに書き込むかどうかを設定します。 有効な値は次のとおりです:"

#: ../../reference/reference.rst:1444
msgid "``log``: write only ``logging`` captured output."
msgstr "``log``: ``logging`` キャプチャされた出力のみを書き込みます。"

#: ../../reference/reference.rst:1445
msgid "``system-out``: write captured ``stdout`` contents."
msgstr "``system-out``: キャプチャされた ``stdout`` の内容を書き込みます。"

#: ../../reference/reference.rst:1446
msgid "``system-err``: write captured ``stderr`` contents."
msgstr "``system-err``: キャプチャされた ``stderr`` の内容を書き込みます。"

#: ../../reference/reference.rst:1447
msgid "``out-err``: write both captured ``stdout`` and ``stderr`` contents."
msgstr "``out-err``: キャプチャされた ``stdout`` と ``stderr`` の両方の内容を書き込みます。"

#: ../../reference/reference.rst:1448
msgid "``all``: write captured ``logging``, ``stdout`` and ``stderr`` contents."
msgstr "``all``: キャプチャされた ``logging``、``stdout``、``stderr`` の内容を書き込みます。"

#: ../../reference/reference.rst:1449
msgid "``no`` (the default): no captured output is written."
msgstr "``no`` (デフォルト): キャプチャされた出力は書き込まれません。"

#: ../../reference/reference.rst:1461
msgid "If ``junit_logging != \"no\"``, configures if the captured output should be written to the JUnit XML file for **passing** tests. Default is ``True``."
msgstr "``junit_logging != \"no\"`` の場合、**成功した** テストのキャプチャされた出力を JUnit XML ファイルに書き込むかどうかを設定します。 デフォルトは ``True`` です。"

#: ../../reference/reference.rst:1472
msgid "To set the name of the root test suite xml item, you can configure the ``junit_suite_name`` option in your config file:"
msgstr "ルートテストスイート xml アイテムの名前を設定するには、設定ファイルで ``junit_suite_name`` オプションを設定できます:"

#: ../../reference/reference.rst:1481
msgid "Allow selective auto-indentation of multiline log messages."
msgstr "複数行のログメッセージの選択的な自動インデントを許可します。"

#: ../../reference/reference.rst:1483
msgid "Supports command line option ``--log-auto-indent [value]`` and config option ``log_auto_indent = [value]`` to set the auto-indentation behavior for all logging."
msgstr "すべてのログの自動インデント動作を設定するためのコマンドラインオプション ``--log-auto-indent [value]`` および設定オプション ``log_auto_indent = [value]`` をサポートします。"

#: ../../reference/reference.rst:1487
msgid "``[value]`` can be:"
msgstr "``[value]`` は次の値にすることができます:"

#: ../../reference/reference.rst:1488
msgid "True or \"On\" - Dynamically auto-indent multiline log messages"
msgstr "True または \"On\" - 複数行のログメッセージを動的に自動インデントします。"

#: ../../reference/reference.rst:1489
msgid "False or \"Off\" or 0 - Do not auto-indent multiline log messages (the default behavior)"
msgstr "False または \"Off\" または 0 - 複数行のログメッセージを自動インデントしない (デフォルトの動作)"

#: ../../reference/reference.rst:1490
msgid "[positive integer] - auto-indent multiline log messages by [value] spaces"
msgstr "[正の整数] - 複数行のログメッセージを [value] スペースで自動インデント"

#: ../../reference/reference.rst:1497
#, python-brace-format
msgid "Supports passing kwarg ``extra={\"auto_indent\": [value]}`` to calls to ``logging.log()`` to specify auto-indentation behavior for a specific entry in the log. ``extra`` kwarg overrides the value specified on the command line or in the config."
msgstr "ログに特定のエントリの自動インデント動作を指定するために ``logging.log()`` への呼び出しに kwarg ``extra={\"auto_indent\": [value]}`` を渡すことをサポートします。 ``extra`` kwarg はコマンドラインまたは設定で指定された値を上書きします。"

#: ../../reference/reference.rst:1504
msgid "Enable log display during test run (also known as :ref:`\"live logging\" <live_logs>`). The default is ``False``."
msgstr "テスト実行中にログ表示を有効にします (:ref:`\"live logging\" <live_logs>` とも呼ばれます)。 デフォルトは ``False`` です。"

#: ../../reference/reference.rst:1516
msgid "Sets a :py:func:`time.strftime`-compatible string that will be used when formatting dates for live logging."
msgstr "ライブロギングの日付をフォーマットする際に使用される :py:func:`time.strftime` 互換の文字列を設定します。"

#: ../../reference/reference.rst:1523 ../../reference/reference.rst:1536
#: ../../reference/reference.rst:1551
msgid "For more information, see :ref:`live_logs`."
msgstr "詳細については、:ref:`live_logs` を参照してください。"

#: ../../reference/reference.rst:1529
msgid "Sets a :py:mod:`logging`-compatible string used to format live logging messages."
msgstr "ライブロギングメッセージをフォーマットするために使用される :py:mod:`logging` 互換の文字列を設定します。"

#: ../../reference/reference.rst:1543
msgid "Sets the minimum log message level that should be captured for live logging. The integer value or the names of the levels can be used."
msgstr "ライブロギングのためにキャプチャされる最小のログメッセージレベルを設定します。 整数値またはレベルの名前を使用できます。"

#: ../../reference/reference.rst:1558
msgid "Sets a :py:func:`time.strftime`-compatible string that will be used when formatting dates for logging capture."
msgstr "ログキャプチャの日付をフォーマットする際に使用される :py:func:`time.strftime` 互換の文字列を設定します。"

#: ../../reference/reference.rst:1565 ../../reference/reference.rst:1580
#: ../../reference/reference.rst:1594 ../../reference/reference.rst:1607
#: ../../reference/reference.rst:1621 ../../reference/reference.rst:1635
#: ../../reference/reference.rst:1650
msgid "For more information, see :ref:`logging`."
msgstr "詳細については、:ref:`logging` を参照してください。"

#: ../../reference/reference.rst:1572
msgid "Sets a file name relative to the current working directory where log messages should be written to, in addition to the other logging facilities that are active."
msgstr "現在の作業ディレクトリに対して相対的なファイル名を設定し、ログメッセージを他のアクティブなロギング機能に加えてそのファイルに書き込みます。"

#: ../../reference/reference.rst:1587
msgid "Sets a :py:func:`time.strftime`-compatible string that will be used when formatting dates for the logging file."
msgstr "ログファイルの日付をフォーマットする際に使用される :py:func:`time.strftime` 互換の文字列を設定します。"

#: ../../reference/reference.rst:1600
msgid "Sets a :py:mod:`logging`-compatible string used to format logging messages redirected to the logging file."
msgstr "ログファイルにリダイレクトされたログメッセージをフォーマットするために使用される :py:mod:`logging` 互換の文字列を設定します。"

#: ../../reference/reference.rst:1613
msgid "Sets the minimum log message level that should be captured for the logging file. The integer value or the names of the levels can be used."
msgstr "ログファイルにキャプチャされる最小のログメッセージレベルを設定します。 整数値またはレベルの名前を使用できます。"

#: ../../reference/reference.rst:1628
msgid "Sets a :py:mod:`logging`-compatible string used to format captured logging messages."
msgstr "キャプチャされたログメッセージをフォーマットするために使用される :py:mod:`logging` 互換の文字列を設定します。"

#: ../../reference/reference.rst:1642
msgid "Sets the minimum log message level that should be captured for logging capture. The integer value or the names of the levels can be used."
msgstr "ログキャプチャにキャプチャされる最小のログメッセージレベルを設定します。 整数値またはレベルの名前を使用できます。"

#: ../../reference/reference.rst:1655
msgid "When the ``--strict-markers`` or ``--strict`` command-line arguments are used, only known markers - defined in code by core pytest or some plugin - are allowed."
msgstr "``--strict-markers`` または ``--strict`` コマンドライン引数が使用されている場合、コア pytest またはプラグインによってコードで定義された既知のマーカーのみが許可されます。"

#: ../../reference/reference.rst:1658
msgid "You can list additional markers in this setting to add them to the whitelist, in which case you probably want to add ``--strict-markers`` to ``addopts`` to avoid future regressions:"
msgstr "この設定で追加のマーカーをリストすることで、それらをホワイトリストに追加できます。 この場合、将来のリグレッションを避けるために ``--strict-markers`` を ``addopts`` に追加することをお勧めします:"

#: ../../reference/reference.rst:1671
msgid "The use of ``--strict-markers`` is highly preferred. ``--strict`` was kept for backward compatibility only and may be confusing for others as it only applies to markers and not to other options."
msgstr "``--strict-markers`` の使用が強く推奨されます。 ``--strict`` は後方互換性のために保持されており、他のオプションには適用されず、マーカーにのみ適用されるため、他の人にとって混乱を招く可能性があります。"

#: ../../reference/reference.rst:1677
msgid "Specifies a minimal pytest version required for running tests."
msgstr "テストを実行するために必要な最小の pytest バージョンを指定します。"

#: ../../reference/reference.rst:1688
msgid "Set the directory basename patterns to avoid when recursing for test discovery.  The individual (fnmatch-style) patterns are applied to the basename of a directory to decide if to recurse into it. Pattern matching characters::"
msgstr "テスト検出のために再帰する際に避けるべきディレクトリのベース名パターンを設定します。 個々の (fnmatch スタイル) パターンは、再帰するかどうかを決定するためにディレクトリのベース名に適用されます。 パターンマッチング文字::"

#: ../../reference/reference.rst:1698
#, python-brace-format
msgid "Default patterns are ``'*.egg'``, ``'.*'``, ``'_darcs'``, ``'build'``, ``'CVS'``, ``'dist'``, ``'node_modules'``, ``'venv'``, ``'{arch}'``. Setting a ``norecursedirs`` replaces the default.  Here is an example of how to avoid certain directories:"
msgstr "デフォルトのパターンは ``'*.egg'``, ``'.*'``, ``'_darcs'``, ``'build'``, ``'CVS'``, ``'dist'``, ``'node_modules'``, ``'venv'``, ``'{arch}'`` です。 ``norecursedirs`` を設定するとデフォルトが置き換えられます。 ここに特定のディレクトリを避ける方法の例を示します:"

#: ../../reference/reference.rst:1708
msgid "This would tell ``pytest`` to not look into typical subversion or sphinx-build directories or into any ``tmp`` prefixed directory."
msgstr "これは ``pytest`` に典型的なサブバージョンまたは sphinx-build ディレクトリや ``tmp`` プレフィックスのディレクトリを見ないように指示します。"

#: ../../reference/reference.rst:1711
msgid "Additionally, ``pytest`` will attempt to intelligently identify and ignore a virtualenv.  Any directory deemed to be the root of a virtual environment will not be considered during test collection unless ``--collect-in-virtualenv`` is given.  Note also that ``norecursedirs`` takes precedence over ``--collect-in-virtualenv``; e.g. if you intend to run tests in a virtualenv with a base directory that matches ``'.*'`` you *must* override ``norecursedirs`` in addition to using the ``--collect-in-virtualenv`` flag."
msgstr "さらに、``pytest`` は仮想環境のルートと見なされるディレクトリを自動的に識別して無視しようとします。 仮想環境のルートと見なされるディレクトリは、``--collect-in-virtualenv`` が指定されない限り、テスト収集中に考慮されません。 また、``norecursedirs`` は ``--collect-in-virtualenv`` よりも優先されます。 例えば、ベースディレクトリが ``'.*'`` に一致する仮想環境でテストを実行する場合、``--collect-in-virtualenv`` フラグを使用するだけでなく、``norecursedirs`` を上書きする必要があります。"

#: ../../reference/reference.rst:1723
msgid "One or more name prefixes or glob-style patterns determining which classes are considered for test collection. Search for multiple glob patterns by adding a space between patterns. By default, pytest will consider any class prefixed with ``Test`` as a test collection.  Here is an example of how to collect tests from classes that end in ``Suite``:"
msgstr "テスト収集のために考慮されるクラスを決定するための 1 つ以上の名前プレフィックスまたはグロブスタイルのパターン。 パターン間にスペースを追加することで複数のグロブパターンを検索します。 デフォルトでは、pytest は ``Test`` で始まるクラスをテスト収集として考慮します。 ここに ``Suite`` で終わるクラスからテストを収集する方法の例を示します:"

#: ../../reference/reference.rst:1734
msgid "Note that ``unittest.TestCase`` derived classes are always collected regardless of this option, as ``unittest``'s own collection framework is used to collect those tests."
msgstr "``unittest.TestCase`` から派生したクラスは、このオプションに関係なく常に収集されます。 これは ``unittest`` の独自の収集フレームワークを使用してこれらのテストを収集するためです。"

#: ../../reference/reference.rst:1741
msgid "One or more Glob-style file patterns determining which python files are considered as test modules. Search for multiple glob patterns by adding a space between patterns:"
msgstr "テストモジュールとして考慮される Python ファイルを決定するための 1 つ以上のグロブスタイルのファイルパターン。 パターン間にスペースを追加することで複数のグロブパターンを検索します:"

#: ../../reference/reference.rst:1750
msgid "Or one per line:"
msgstr "または 1 行ごと:"

#: ../../reference/reference.rst:1760
msgid "By default, files matching ``test_*.py`` and ``*_test.py`` will be considered test modules."
msgstr "デフォルトでは、``test_*.py`` および ``*_test.py`` に一致するファイルがテストモジュールとして考慮されます。"

#: ../../reference/reference.rst:1766
msgid "One or more name prefixes or glob-patterns determining which test functions and methods are considered tests. Search for multiple glob patterns by adding a space between patterns. By default, pytest will consider any function prefixed with ``test`` as a test.  Here is an example of how to collect test functions and methods that end in ``_test``:"
msgstr "テスト関数およびメソッドとして考慮されるテスト関数およびメソッドを決定するための 1 つ以上の名前プレフィックスまたはグロブパターン。 パターン間にスペースを追加することで複数のグロブパターンを検索します。 デフォルトでは、pytest は ``test`` で始まる関数をテストとして考慮します。 ここに ``_test`` で終わるテスト関数およびメソッドを収集する方法の例を示します:"

#: ../../reference/reference.rst:1777
msgid "Note that this has no effect on methods that live on a ``unittest.TestCase`` derived class, as ``unittest``'s own collection framework is used to collect those tests."
msgstr "これは ``unittest.TestCase`` から派生したクラスのメソッドには影響しません。 これは ``unittest`` の独自の収集フレームワークを使用してこれらのテストを収集するためです。"

#: ../../reference/reference.rst:1781
msgid "See :ref:`change naming conventions` for more detailed examples."
msgstr "詳細な例については、:ref:`change naming conventions` を参照してください。"

#: ../../reference/reference.rst:1786
msgid "Sets list of directories that should be added to the python search path. Directories will be added to the head of :data:`sys.path`. Similar to the :envvar:`PYTHONPATH` environment variable, the directories will be included in where Python will look for imported modules. Paths are relative to the :ref:`rootdir <rootdir>` directory. Directories remain in path for the duration of the test session."
msgstr "Python の検索パスに追加するディレクトリのリストを設定します。 ディレクトリは :data:`sys.path` の先頭に追加されます。 :envvar:`PYTHONPATH` 環境変数と同様に、ディレクトリは Python がインポートされたモジュールを探す場所に含まれます。 パスは :ref:`rootdir <rootdir>` ディレクトリに対して相対的です。 ディレクトリはテストセッションの期間中パスに残ります。"

#: ../../reference/reference.rst:1800
msgid "``pythonpath`` does not affect some imports that happen very early, most notably plugins loaded using the ``-p`` command line option."
msgstr "``pythonpath`` は、特に ``-p`` コマンドラインオプションを使用してロードされるプラグインなど、非常に早い段階で発生する一部のインポートには影響しません。"

#: ../../reference/reference.rst:1806
msgid "A space separated list of plugins that must be present for pytest to run. Plugins can be listed with or without version specifiers directly following their name. Whitespace between different version specifiers is not allowed. If any one of the plugins is not found, emit an error."
msgstr "pytest を実行するために存在しなければならないプラグインのスペース区切りリスト。 プラグインはバージョン指定子を名前の直後に付けてリストすることができます。 異なるバージョン指定子間に空白は許可されません。 プラグインのいずれかが見つからない場合、エラーを発生させます。"

#: ../../reference/reference.rst:1819
msgid "Sets list of directories that should be searched for tests when no specific directories, files or test ids are given in the command line when executing pytest from the :ref:`rootdir <rootdir>` directory. File system paths may use shell-style wildcards, including the recursive ``**`` pattern."
msgstr "pytest を :ref:`rootdir <rootdir>` ディレクトリから実行する際に、コマンドラインで特定のディレクトリ、ファイル、またはテスト ID が指定されていない場合にテストを検索するディレクトリのリストを設定します。 ファイルシステムパスはシェルスタイルのワイルドカードを使用できます。 再帰的な ``**`` パターンを含みます。"

#: ../../reference/reference.rst:1825
msgid "Useful when all project tests are in a known location to speed up test collection and to avoid picking up undesired tests by accident."
msgstr "プロジェクトのすべてのテストが既知の場所にある場合、テスト収集を高速化し、誤って不要なテストを拾うのを避けるために便利です。"

#: ../../reference/reference.rst:1833
msgid "This configuration means that executing:"
msgstr "この構成は、次のコマンドを実行することを意味します:"

#: ../../reference/reference.rst:1839
msgid "has the same practical effects as executing:"
msgstr "次のコマンドを実行するのと同じ実際の効果があります:"

#: ../../reference/reference.rst:1850
msgid "How many sessions should we keep the `tmp_path` directories, according to `tmp_path_retention_policy`."
msgstr "`tmp_path_retention_policy` に従って `tmp_path` ディレクトリをいくつのセッション保持するか。"

#: ../../reference/reference.rst:1858
msgid "Default: ``3``"
msgstr "デフォルト: ``3``"

#: ../../reference/reference.rst:1865
msgid "Controls which directories created by the `tmp_path` fixture are kept around, based on test outcome."
msgstr "`tmp_path` フィクスチャによって作成されたディレクトリをテスト結果に基づいて保持するかどうかを制御します。"

#: ../../reference/reference.rst:1868
msgid "`all`: retains directories for all tests, regardless of the outcome."
msgstr "`all`: テスト結果に関係なく、すべてのテストのディレクトリを保持します。"

#: ../../reference/reference.rst:1869
msgid "`failed`: retains directories only for tests with outcome `error` or `failed`."
msgstr "`failed`: 結果が `error` または `failed` のテストのみディレクトリを保持します。"

#: ../../reference/reference.rst:1870
msgid "`none`: directories are always removed after each test ends, regardless of the outcome."
msgstr "`none`: 結果に関係なく、各テスト終了後にディレクトリは常に削除されます。"

#: ../../reference/reference.rst:1877
msgid "Default: ``all``"
msgstr "デフォルト: ``all``"

#: ../../reference/reference.rst:1882
msgid "List of fixtures that will be applied to all test functions; this is semantically the same to apply the ``@pytest.mark.usefixtures`` marker to all test functions."
msgstr "すべてのテスト関数に適用されるフィクスチャのリスト。 これは、すべてのテスト関数に ``@pytest.mark.usefixtures`` マーカーを適用するのと同じ意味です。"

#: ../../reference/reference.rst:1895
msgid "Set a verbosity level specifically for assertion related output, overriding the application wide level."
msgstr "アサーション関連の出力に対して特定の詳細レベルを設定し、アプリケーション全体のレベルを上書きします。"

#: ../../reference/reference.rst:1902 ../../reference/reference.rst:1915
msgid "Defaults to application wide verbosity level (via the ``-v`` command-line option). A special value of \"auto\" can be used to explicitly use the global verbosity level."
msgstr "デフォルトはアプリケーション全体の詳細レベル (``-v`` コマンドラインオプションを介して) です。 特別な値 ``auto`` を使用して、グローバルな詳細レベルを明示的に使用することができます。"

#: ../../reference/reference.rst:1908
msgid "Set a verbosity level specifically for test case execution related output, overriding the application wide level."
msgstr "テストケース実行関連の出力に対して特定の詳細レベルを設定し、アプリケーション全体のレベルを上書きします。"

#: ../../reference/reference.rst:1921
msgid "If set to ``True``, tests marked with ``@pytest.mark.xfail`` that actually succeed will by default fail the test suite. For more information, see :ref:`xfail strict tutorial`."
msgstr "``True`` に設定すると、実際に成功した ``@pytest.mark.xfail`` でマークされたテストはデフォルトでテストスイートに失敗します。 詳細については、:ref:`xfail strict tutorial` を参照してください。"

#: ../../reference/reference.rst:1935
msgid "Command-line Flags"
msgstr "コマンドラインフラグ"

#: ../../reference/reference.rst:1937
msgid "All the command-line flags can be obtained by running ``pytest --help``::"
msgstr "すべてのコマンドラインフラグは ``pytest --help`` を実行することで取得できます::"

