# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, holger krekel and pytest-dev team
# This file is distributed under the same license as the pytest package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pytest 0.1.dev16209\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-05 00:52+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../reference/reference.rst:6
msgid "API Reference"
msgstr ""

#: ../../reference/reference.rst:8
msgid "This page contains the full reference to pytest's API."
msgstr ""

#: ../../reference/reference.rst:12
msgid "Constants"
msgstr ""

#: ../../reference/reference.rst:15
msgid "pytest.__version__"
msgstr ""

#: ../../reference/reference.rst:17
msgid "The current pytest version, as a string::"
msgstr ""

#: ../../reference/reference.rst:27
msgid "pytest.version_tuple"
msgstr ""

#: ../../reference/reference.rst:31
msgid "The current pytest version, as a tuple::"
msgstr ""

#: ../../reference/reference.rst:37
msgid "For pre-releases, the last component will be a string with the prerelease version::"
msgstr ""

#: ../../reference/reference.rst:45
msgid "Functions"
msgstr ""

#: ../../reference/reference.rst:48
msgid "pytest.approx"
msgstr ""

#: _pytest.python_api.approx:1 of
msgid "Assert that two numbers (or two ordered sequences of numbers) are equal to each other within some tolerance."
msgstr ""

#: _pytest.python_api.approx:4 of
msgid "Due to the :doc:`python:tutorial/floatingpoint`, numbers that we would intuitively expect to be equal are not always so::"
msgstr ""

#: _pytest.python_api.approx:10 of
msgid "This problem is commonly encountered when writing tests, e.g. when making sure that floating-point values are what you expect them to be.  One way to deal with this problem is to assert that two floating-point numbers are equal to within some appropriate tolerance::"
msgstr ""

#: _pytest.python_api.approx:18 of
msgid "However, comparisons like this are tedious to write and difficult to understand.  Furthermore, absolute comparisons like the one above are usually discouraged because there's no tolerance that works well for all situations.  ``1e-6`` is good for numbers around ``1``, but too small for very big numbers and too big for very small ones.  It's better to express the tolerance as a fraction of the expected value, but relative comparisons like that are even more difficult to write correctly and concisely."
msgstr ""

#: _pytest.python_api.approx:26 of
msgid "The ``approx`` class performs floating-point comparisons using a syntax that's as intuitive as possible::"
msgstr ""

#: _pytest.python_api.approx:33 of
msgid "The same syntax also works for ordered sequences of numbers::"
msgstr ""

#: _pytest.python_api.approx:38 of
msgid "``numpy`` arrays::"
msgstr ""

#: _pytest.python_api.approx:44 of
msgid "And for a ``numpy`` array against a scalar::"
msgstr ""

#: _pytest.python_api.approx:50 of
msgid "Only ordered sequences are supported, because ``approx`` needs to infer the relative position of the sequences without ambiguity. This means ``sets`` and other unordered sequences are not supported."
msgstr ""

#: _pytest.python_api.approx:54 of
msgid "Finally, dictionary *values* can also be compared::"
msgstr ""

#: _pytest.python_api.approx:59 of
msgid "The comparison will be true if both mappings have the same keys and their respective values match the expected tolerances."
msgstr ""

#: _pytest.python_api.approx:62 of
msgid "**Tolerances**"
msgstr ""

#: _pytest.python_api.approx:64 of
msgid "By default, ``approx`` considers numbers within a relative tolerance of ``1e-6`` (i.e. one part in a million) of its expected value to be equal. This treatment would lead to surprising results if the expected value was ``0.0``, because nothing but ``0.0`` itself is relatively close to ``0.0``. To handle this case less surprisingly, ``approx`` also considers numbers within an absolute tolerance of ``1e-12`` of its expected value to be equal.  Infinity and NaN are special cases.  Infinity is only considered equal to itself, regardless of the relative tolerance.  NaN is not considered equal to anything by default, but you can make it be equal to itself by setting the ``nan_ok`` argument to True.  (This is meant to facilitate comparing arrays that use NaN to mean \"no data\".)"
msgstr ""

#: _pytest.python_api.approx:76 of
msgid "Both the relative and absolute tolerances can be changed by passing arguments to the ``approx`` constructor::"
msgstr ""

#: _pytest.python_api.approx:86 of
msgid "If you specify ``abs`` but not ``rel``, the comparison will not consider the relative tolerance at all.  In other words, two numbers that are within the default relative tolerance of ``1e-6`` will still be considered unequal if they exceed the specified absolute tolerance.  If you specify both ``abs`` and ``rel``, the numbers will be considered equal if either tolerance is met::"
msgstr ""

#: _pytest.python_api.approx:100 of
msgid "You can also use ``approx`` to compare nonnumeric types, or dicts and sequences containing nonnumeric types, in which case it falls back to strict equality. This can be useful for comparing dicts and sequences that can contain optional values::"
msgstr ""

#: _pytest.python_api.approx:112 of
msgid "If you're thinking about using ``approx``, then you might want to know how it compares to other good ways of comparing floating-point numbers.  All of these algorithms are based on relative and absolute tolerances and should agree for the most part, but they do have meaningful differences:"
msgstr ""

#: _pytest.python_api.approx:117 of
msgid "``math.isclose(a, b, rel_tol=1e-9, abs_tol=0.0)``:  True if the relative tolerance is met w.r.t. either ``a`` or ``b`` or if the absolute tolerance is met.  Because the relative tolerance is calculated w.r.t. both ``a`` and ``b``, this test is symmetric (i.e.  neither ``a`` nor ``b`` is a \"reference value\").  You have to specify an absolute tolerance if you want to compare to ``0.0`` because there is no tolerance by default.  More information: :py:func:`math.isclose`."
msgstr ""

#: _pytest.python_api.approx:125 of
msgid "``numpy.isclose(a, b, rtol=1e-5, atol=1e-8)``: True if the difference between ``a`` and ``b`` is less that the sum of the relative tolerance w.r.t. ``b`` and the absolute tolerance.  Because the relative tolerance is only calculated w.r.t. ``b``, this test is asymmetric and you can think of ``b`` as the reference value.  Support for comparing sequences is provided by :py:func:`numpy.allclose`.  More information: :std:doc:`numpy:reference/generated/numpy.isclose`."
msgstr ""

#: _pytest.python_api.approx:133 of
msgid "``unittest.TestCase.assertAlmostEqual(a, b)``: True if ``a`` and ``b`` are within an absolute tolerance of ``1e-7``.  No relative tolerance is considered , so this function is not appropriate for very large or very small numbers.  Also, it's only available in subclasses of ``unittest.TestCase`` and it's ugly because it doesn't follow PEP8.  More information: :py:meth:`unittest.TestCase.assertAlmostEqual`."
msgstr ""

#: _pytest.python_api.approx:140 of
msgid "``a == pytest.approx(b, rel=1e-6, abs=1e-12)``: True if the relative tolerance is met w.r.t. ``b`` or if the absolute tolerance is met. Because the relative tolerance is only calculated w.r.t. ``b``, this test is asymmetric and you can think of ``b`` as the reference value.  In the special case that you explicitly specify an absolute tolerance but not a relative tolerance, only the absolute tolerance is considered."
msgstr ""

#: _pytest.python_api.approx:149 of
msgid "``approx`` can handle numpy arrays, but we recommend the specialised test helpers in :std:doc:`numpy:reference/routines.testing` if you need support for comparisons, NaNs, or ULP-based tolerances."
msgstr ""

#: _pytest.python_api.approx:153 of
msgid "To match strings using regex, you can use `Matches <https://github.com/asottile/re-assert#re_assertmatchespattern-str-args-kwargs>`_ from the `re_assert package <https://github.com/asottile/re-assert>`_."
msgstr ""

#: _pytest.python_api.approx:162 of
msgid "In order to avoid inconsistent behavior, :py:exc:`TypeError` is raised for ``>``, ``>=``, ``<`` and ``<=`` comparisons. The example below illustrates the problem::"
msgstr ""

#: _pytest.python_api.approx:169 of
msgid "In the second example one expects ``approx(0.1).__le__(0.1 + 1e-10)`` to be called. But instead, ``approx(0.1).__lt__(0.1 + 1e-10)`` is used to comparison. This is because the call hierarchy of rich comparisons follows a fixed behavior. More information: :py:meth:`object.__ge__`"
msgstr ""

#: _pytest.python_api.approx:174 of
msgid "``approx`` raises ``TypeError`` when it encounters a dict value or sequence element of nonnumeric type."
msgstr ""

#: _pytest.python_api.approx:178 of
msgid "``approx`` falls back to strict equality for nonnumeric types instead of raising ``TypeError``."
msgstr ""

#: ../../reference/reference.rst:53
msgid "pytest.fail"
msgstr ""

#: ../../reference/reference.rst:55
msgid "**Tutorial**: :ref:`skipping`"
msgstr ""

#: _pytest.outcomes.fail:1 of
msgid "Explicitly fail an executing test with the given message."
msgstr ""

#: ../../reference/reference.rst _pytest.config.PytestPluginManager.register
#: _pytest.config.argparsing.Parser.addini
#: _pytest.config.argparsing.Parser.addoption
#: _pytest.config.argparsing.Parser.getgroup of
msgid "Parameters"
msgstr ""

#: _pytest.outcomes.fail:3 of
msgid "The message to show the user as reason for the failure."
msgstr ""

#: _pytest.outcomes.fail:6 of
msgid "If False, msg represents the full failure information and no python traceback will be reported."
msgstr ""

#: ../../reference/reference.rst
msgid "Raises"
msgstr ""

#: _pytest.outcomes.exit:10 _pytest.outcomes.fail:10 _pytest.outcomes.skip:18
#: _pytest.outcomes.xfail:16 of
msgid "The exception that is raised."
msgstr ""

#: ../../reference/reference.rst:61
msgid "The exception raised by :func:`pytest.fail`."
msgstr ""

#: ../../reference/reference.rst:64
msgid "pytest.skip"
msgstr ""

#: _pytest.outcomes.skip:1 of
msgid "Skip an executing test with the given message."
msgstr ""

#: _pytest.outcomes.skip:3 of
msgid "This function should be called only during testing (setup, call or teardown) or during collection by using the ``allow_module_level`` flag.  This function can be called in doctests as well."
msgstr ""

#: _pytest.outcomes.skip:7 of
msgid "The message to show the user as reason for the skip."
msgstr ""

#: _pytest.outcomes.skip:10 of
msgid "Allows this function to be called at module level. Raising the skip exception at module level will stop the execution of the module and prevent the collection of all tests in the module, even those defined before the `skip` call.  Defaults to False."
msgstr ""

#: _pytest.outcomes.skip:11 of
msgid "Allows this function to be called at module level. Raising the skip exception at module level will stop the execution of the module and prevent the collection of all tests in the module, even those defined before the `skip` call."
msgstr ""

#: _pytest.outcomes.skip:16 of
msgid "Defaults to False."
msgstr ""

#: _pytest.outcomes.skip:22 of
msgid "It is better to use the :ref:`pytest.mark.skipif ref` marker when possible to declare a test to be skipped under certain conditions like mismatching platforms or dependencies. Similarly, use the ``# doctest: +SKIP`` directive (see :py:data:`doctest.SKIP`) to skip a doctest statically."
msgstr ""

#: ../../reference/reference.rst:70
msgid "The exception raised by :func:`pytest.skip`."
msgstr ""

#: ../../reference/reference.rst:75
msgid "pytest.importorskip"
msgstr ""

#: _pytest.outcomes.importorskip:1 of
msgid "Import and return the requested module ``modname``, or skip the current test if the module cannot be imported."
msgstr ""

#: _pytest.outcomes.importorskip:4 of
msgid "The name of the module to import."
msgstr ""

#: _pytest.outcomes.importorskip:6 of
msgid "If given, the imported module's ``__version__`` attribute must be at least this minimal version, otherwise the test is still skipped."
msgstr ""

#: _pytest.outcomes.importorskip:9 of
msgid "If given, this reason is shown as the message when the module cannot be imported."
msgstr ""

#: _pytest.outcomes.importorskip:12 of
msgid "The exception that should be captured in order to skip modules. Must be :py:class:`ImportError` or a subclass.  If the module can be imported but raises :class:`ImportError`, pytest will issue a warning to the user, as often users expect the module not to be found (which would raise :class:`ModuleNotFoundError` instead).  This warning can be suppressed by passing ``exc_type=ImportError`` explicitly.  See :ref:`import-or-skip-import-error` for details."
msgstr ""

#: _pytest.outcomes.importorskip:13 of
msgid "The exception that should be captured in order to skip modules. Must be :py:class:`ImportError` or a subclass."
msgstr ""

#: _pytest.outcomes.importorskip:16 of
msgid "If the module can be imported but raises :class:`ImportError`, pytest will issue a warning to the user, as often users expect the module not to be found (which would raise :class:`ModuleNotFoundError` instead)."
msgstr ""

#: _pytest.outcomes.importorskip:20 of
msgid "This warning can be suppressed by passing ``exc_type=ImportError`` explicitly."
msgstr ""

#: _pytest.outcomes.importorskip:22 of
msgid "See :ref:`import-or-skip-import-error` for details."
msgstr ""

#: ../../reference/reference.rst _pytest.config.PytestPluginManager.register
#: _pytest.config.argparsing.Parser.getgroup of
msgid "Returns"
msgstr ""

#: _pytest.outcomes.importorskip:25 of
msgid "The imported module. This should be assigned to its canonical name."
msgstr ""

#: _pytest.outcomes.importorskip:28 of
msgid "If the module cannot be imported."
msgstr ""

#: ../../reference/reference.rst _pytest.config.PytestPluginManager.register
#: _pytest.config.argparsing.Parser.getgroup of
msgid "Return type"
msgstr ""

#: _pytest.fixtures.pytestconfig:4 _pytest.junitxml.record_property:9
#: _pytest.mark.structures.MarkGenerator:4 _pytest.outcomes.importorskip:31 of
msgid "Example::"
msgstr ""

#: _pytest.outcomes.importorskip:37 of
msgid "The ``exc_type`` parameter."
msgstr ""

#: ../../reference/reference.rst:80
msgid "pytest.xfail"
msgstr ""

#: _pytest.outcomes.xfail:1 of
msgid "Imperatively xfail an executing test or setup function with the given reason."
msgstr ""

#: _pytest.outcomes.xfail:3 of
msgid "This function should be called only during testing (setup, call or teardown)."
msgstr ""

#: _pytest.outcomes.xfail:5 of
msgid "No other code is executed after using ``xfail()`` (it is implemented internally by raising an exception)."
msgstr ""

#: _pytest.outcomes.xfail:8 of
msgid "The message to show the user as reason for the xfail."
msgstr ""

#: _pytest.outcomes.xfail:12 of
msgid "It is better to use the :ref:`pytest.mark.xfail ref` marker when possible to declare a test to be xfailed under certain conditions like known bugs or missing features."
msgstr ""

#: ../../reference/reference.rst:86
msgid "The exception raised by :func:`pytest.xfail`."
msgstr ""

#: ../../reference/reference.rst:89
msgid "pytest.exit"
msgstr ""

#: _pytest.outcomes.exit:1 of
msgid "Exit testing process."
msgstr ""

#: _pytest.outcomes.exit:3 of
msgid "The message to show as the reason for exiting pytest.  reason has a default value only because `msg` is deprecated."
msgstr ""

#: _pytest.outcomes.exit:7 of
msgid "Return code to be used when exiting pytest. None means the same as ``0`` (no error), same as :func:`sys.exit`."
msgstr ""

#: ../../reference/reference.rst:95
msgid "The exception raised by :func:`pytest.exit`."
msgstr ""

#: ../../reference/reference.rst:98
msgid "pytest.main"
msgstr ""

#: ../../reference/reference.rst:100
msgid "**Tutorial**: :ref:`pytest.main-usage`"
msgstr ""

#: _pytest.config.main:1 of
msgid "Perform an in-process test run."
msgstr ""

#: _pytest.config.main:3 of
msgid "List of command line arguments. If `None` or not given, defaults to reading arguments directly from the process command line (:data:`sys.argv`)."
msgstr ""

#: _pytest.config.main:6 of
msgid "List of plugin objects to be auto-registered during initialization."
msgstr ""

#: _pytest.config.main:8 of
msgid "An exit code."
msgstr ""

#: ../../reference/reference.rst:105
msgid "pytest.param"
msgstr ""

#: _pytest.mark.param:1 of
msgid "Specify a parameter in `pytest.mark.parametrize`_ calls or :ref:`parametrized fixtures <fixture-parametrize-marks>`."
msgstr ""

#: _pytest.mark.param:16 of
msgid "Variable args of the values of the parameter set, in order."
msgstr ""

#: _pytest.mark.param:17 of
msgid "A single mark or a list of marks to be applied to this parameter set."
msgstr ""

#: _pytest.mark.param:18 of
msgid "The id to attribute to this parameter set."
msgstr ""

#: ../../reference/reference.rst:110
msgid "pytest.raises"
msgstr ""

#: ../../reference/reference.rst:112
msgid "**Tutorial**: :ref:`assertraises`"
msgstr ""

#: _pytest.python_api.raises:1 of
msgid "Assert that a code block/function call raises an exception type, or one of its subclasses."
msgstr ""

#: _pytest.python_api.raises:3 of
msgid "The expected exception type, or a tuple if one of multiple possible exception types are expected. Note that subclasses of the passed exceptions will also match."
msgstr ""

#: _pytest.python_api.raises:8 of
msgid "If specified, a string containing a regular expression, or a regular expression object, that is tested against the string representation of the exception and its :pep:`678` `__notes__` using :func:`re.search`.  To match a literal string that may contain :ref:`special characters <re-syntax>`, the pattern can first be escaped with :func:`re.escape`.  (This is only used when ``pytest.raises`` is used as a context manager, and passed through to the function otherwise. When using ``pytest.raises`` as a function, you can use: ``pytest.raises(Exc, func, match=\"passed on\").match(\"my pattern\")``.)"
msgstr ""

#: _pytest.python_api.raises:9 of
msgid "If specified, a string containing a regular expression, or a regular expression object, that is tested against the string representation of the exception and its :pep:`678` `__notes__` using :func:`re.search`."
msgstr ""

#: _pytest._code.code.ExceptionInfo.group_contains:13
#: _pytest.python_api.raises:14 of
msgid "To match a literal string that may contain :ref:`special characters <re-syntax>`, the pattern can first be escaped with :func:`re.escape`."
msgstr ""

#: _pytest.python_api.raises:17 of
msgid "(This is only used when ``pytest.raises`` is used as a context manager, and passed through to the function otherwise. When using ``pytest.raises`` as a function, you can use: ``pytest.raises(Exc, func, match=\"passed on\").match(\"my pattern\")``.)"
msgstr ""

#: _pytest.python_api.raises:22 of
msgid "Use ``pytest.raises`` as a context manager, which will capture the exception of the given type, or any of its subclasses::"
msgstr ""

#: _pytest.python_api.raises:29 of
msgid "If the code block does not raise the expected exception (:class:`ZeroDivisionError` in the example above), or no exception at all, the check will fail instead."
msgstr ""

#: _pytest.python_api.raises:32 of
msgid "You can also use the keyword argument ``match`` to assert that the exception matches a text or regex::"
msgstr ""

#: _pytest.python_api.raises:41 of
msgid "The ``match`` argument searches the formatted exception string, which includes any `PEP-678 <https://peps.python.org/pep-0678/>`__ ``__notes__``:"
msgstr ""

#: _pytest.python_api.raises:49 of
msgid "The context manager produces an :class:`ExceptionInfo` object which can be used to inspect the details of the captured exception::"
msgstr ""

#: _pytest.python_api.raises:59 of
msgid "Given that ``pytest.raises`` matches subclasses, be wary of using it to match :class:`Exception` like this::"
msgstr ""

#: _pytest.python_api.raises:64 of
msgid "Because :class:`Exception` is the base class of almost all exceptions, it is easy for this to hide real bugs, where the user wrote this expecting a specific exception, but some other exception is being raised due to a bug introduced during a refactoring."
msgstr ""

#: _pytest.python_api.raises:68 of
msgid "Avoid using ``pytest.raises`` to catch :class:`Exception` unless certain that you really want to catch **any** exception raised."
msgstr ""

#: _pytest.python_api.raises:73 of
msgid "When using ``pytest.raises`` as a context manager, it's worthwhile to note that normal context manager rules apply and that the exception raised *must* be the final line in the scope of the context manager. Lines of code after that, within the scope of the context manager will not be executed. For example::"
msgstr ""

#: _pytest.python_api.raises:85 of
msgid "Instead, the following approach must be taken (note the difference in scope)::"
msgstr ""

#: _pytest.python_api.raises:94 _pytest.recwarn.warns:33 of
msgid "**Using with** ``pytest.mark.parametrize``"
msgstr ""

#: _pytest.python_api.raises:96 of
msgid "When using :ref:`pytest.mark.parametrize ref` it is possible to parametrize tests such that some runs raise an exception and others do not."
msgstr ""

#: _pytest.python_api.raises:100 of
msgid "See :ref:`parametrizing_conditional_raising` for an example."
msgstr ""

#: _pytest.python_api.raises:104 of
msgid ":ref:`assertraises` for more examples and detailed discussion."
msgstr ""

#: _pytest.python_api.raises:106 of
msgid "**Legacy form**"
msgstr ""

#: _pytest.python_api.raises:108 of
msgid "It is possible to specify a callable by passing a to-be-called lambda::"
msgstr ""

#: _pytest.python_api.raises:113 of
msgid "or you can specify an arbitrary callable with arguments::"
msgstr ""

#: _pytest.python_api.raises:122 of
msgid "The form above is fully supported but discouraged for new code because the context manager form is regarded as more readable and less error-prone."
msgstr ""

#: _pytest.python_api.raises:126 of
msgid "Similar to caught exception objects in Python, explicitly clearing local references to returned ``ExceptionInfo`` objects can help the Python interpreter speed up its garbage collection."
msgstr ""

#: _pytest.python_api.raises:130 of
msgid "Clearing those references breaks a reference cycle (``ExceptionInfo`` --> caught exception --> frame stack raising the exception --> current frame stack --> local variables --> ``ExceptionInfo``) which makes Python keep all objects referenced from that cycle (including all local variables in the current frame) alive until the next cyclic garbage collection run. More detailed information can be found in the official Python documentation for :ref:`the try statement <python:try>`."
msgstr ""

#: ../../reference/reference.rst:118
msgid "pytest.deprecated_call"
msgstr ""

#: ../../reference/reference.rst:120
msgid "**Tutorial**: :ref:`ensuring_function_triggers`"
msgstr ""

#: _pytest.recwarn.deprecated_call:1 of
msgid "Assert that code produces a ``DeprecationWarning`` or ``PendingDeprecationWarning`` or ``FutureWarning``."
msgstr ""

#: _pytest.recwarn.deprecated_call:3 _pytest.recwarn.warns:11 of
msgid "This function can be used as a context manager::"
msgstr ""

#: _pytest.recwarn.deprecated_call:14 of
msgid "It can also be used by passing a function and ``*args`` and ``**kwargs``, in which case it will ensure calling ``func(*args, **kwargs)`` produces one of the warnings types above. The return value is the return value of the function."
msgstr ""

#: _pytest.recwarn.deprecated_call:18 of
msgid "In the context manager form you may use the keyword argument ``match`` to assert that the warning matches a text or regex."
msgstr ""

#: _pytest.recwarn.deprecated_call:21 of
msgid "The context manager produces a list of :class:`warnings.WarningMessage` objects, one for each warning raised."
msgstr ""

#: ../../reference/reference.rst:126
msgid "pytest.register_assert_rewrite"
msgstr ""

#: ../../reference/reference.rst:128
msgid "**Tutorial**: :ref:`assertion-rewriting`"
msgstr ""

#: _pytest.assertion.register_assert_rewrite:1 of
msgid "Register one or more module names to be rewritten on import."
msgstr ""

#: _pytest.assertion.register_assert_rewrite:3 of
msgid "This function will make sure that this module or all modules inside the package will get their assert statements rewritten. Thus you should make sure to call this before the module is actually imported, usually in your __init__.py if you are a plugin using a package."
msgstr ""

#: _pytest.assertion.register_assert_rewrite:9 of
msgid "The module names to register."
msgstr ""

#: ../../reference/reference.rst:133
msgid "pytest.warns"
msgstr ""

#: ../../reference/reference.rst:135
msgid "**Tutorial**: :ref:`assertwarnings`"
msgstr ""

#: _pytest.recwarn.warns:1 of
msgid "Assert that code raises a particular class of warning."
msgstr ""

#: _pytest.recwarn.warns:3 of
msgid "Specifically, the parameter ``expected_warning`` can be a warning class or tuple of warning classes, and the code inside the ``with`` block must issue at least one warning of that class or classes."
msgstr ""

#: _pytest.recwarn.warns:7 of
msgid "This helper produces a list of :class:`warnings.WarningMessage` objects, one for each warning emitted (regardless of whether it is an ``expected_warning`` or not). Since pytest 8.0, unmatched warnings are also re-emitted when the context closes."
msgstr ""

#: _pytest.recwarn.warns:17 of
msgid "In the context manager form you may use the keyword argument ``match`` to assert that the warning matches a text or regex::"
msgstr ""

#: _pytest.recwarn.warns:35 of
msgid "When using :ref:`pytest.mark.parametrize ref` it is possible to parametrize tests such that some runs raise a warning and others do not."
msgstr ""

#: _pytest.recwarn.warns:38 of
msgid "This could be achieved in the same way as with exceptions, see :ref:`parametrizing_conditional_raising` for an example."
msgstr ""

#: ../../reference/reference.rst:141
msgid "pytest.freeze_includes"
msgstr ""

#: ../../reference/reference.rst:143
msgid "**Tutorial**: :ref:`freezing-pytest`"
msgstr ""

#: _pytest.freeze_support.freeze_includes:1 of
msgid "Return a list of module names used by pytest that should be included by cx_freeze."
msgstr ""

#: ../../reference/reference.rst:150
msgid "Marks"
msgstr ""

#: ../../reference/reference.rst:152
msgid "Marks can be used to apply metadata to *test functions* (but not fixtures), which can then be accessed by fixtures or plugins."
msgstr ""

#: ../../reference/reference.rst:161
msgid "pytest.mark.filterwarnings"
msgstr ""

#: ../../reference/reference.rst:163
msgid "**Tutorial**: :ref:`filterwarnings`"
msgstr ""

#: ../../reference/reference.rst:165
msgid "Add warning filters to marked test items."
msgstr ""

#: ../../reference/reference.rst:169
msgid "A *warning specification string*, which is composed of contents of the tuple ``(action, message, category, module, lineno)`` as specified in :ref:`python:warning-filter` section of the Python documentation, separated by ``\":\"``. Optional fields can be omitted. Module names passed for filtering are not regex-escaped.  For example:  .. code-block:: python      @pytest.mark.filterwarnings(\"ignore:.*usage will be deprecated.*:DeprecationWarning\")     def test_foo(): ..."
msgstr ""

#: ../../reference/reference.rst:170
msgid "A *warning specification string*, which is composed of contents of the tuple ``(action, message, category, module, lineno)`` as specified in :ref:`python:warning-filter` section of the Python documentation, separated by ``\":\"``. Optional fields can be omitted. Module names passed for filtering are not regex-escaped."
msgstr ""

#: ../../reference/reference.rst:175 ../../reference/reference.rst:287
#: _pytest.monkeypatch.MonkeyPatch.setattr:3 of
msgid "For example:"
msgstr ""

#: ../../reference/reference.rst:186
msgid "pytest.mark.parametrize"
msgstr ""

#: ../../reference/reference.rst:188
msgid "**Tutorial**: :ref:`parametrize`"
msgstr ""

#: ../../reference/reference.rst:190
msgid "This mark has the same signature as :py:meth:`pytest.Metafunc.parametrize`; see there."
msgstr ""

#: ../../reference/reference.rst:196
msgid "pytest.mark.skip"
msgstr ""

#: ../../reference/reference.rst:198
msgid "**Tutorial**: :ref:`skip`"
msgstr ""

#: ../../reference/reference.rst:200
msgid "Unconditionally skip a test function."
msgstr ""

#: ../../reference/reference.rst:204 ../../reference/reference.rst:220
msgid "Reason why the test function is being skipped."
msgstr ""

#: ../../reference/reference.rst:210
msgid "pytest.mark.skipif"
msgstr ""

#: ../../reference/reference.rst:212
msgid "**Tutorial**: :ref:`skipif`"
msgstr ""

#: ../../reference/reference.rst:214
msgid "Skip a test function if a condition is ``True``."
msgstr ""

#: ../../reference/reference.rst:219
msgid "``True/False`` if the condition should be skipped or a :ref:`condition string <string conditions>`."
msgstr ""

#: ../../reference/reference.rst:226
msgid "pytest.mark.usefixtures"
msgstr ""

#: ../../reference/reference.rst:228
msgid "**Tutorial**: :ref:`usefixtures`"
msgstr ""

#: ../../reference/reference.rst:230
msgid "Mark a test function as using the given fixture names."
msgstr ""

#: ../../reference/reference.rst:234
msgid "The names of the fixture to use, as strings."
msgstr ""

#: ../../reference/reference.rst:238
msgid "When using `usefixtures` in hooks, it can only load fixtures when applied to a test function before test setup (for example in the `pytest_collection_modifyitems` hook)."
msgstr ""

#: ../../reference/reference.rst:241
msgid "Also note that this mark has no effect when applied to **fixtures**."
msgstr ""

#: ../../reference/reference.rst:248
msgid "pytest.mark.xfail"
msgstr ""

#: ../../reference/reference.rst:250
msgid "**Tutorial**: :ref:`xfail`"
msgstr ""

#: ../../reference/reference.rst:252
msgid "Marks a test function as *expected to fail*."
msgstr ""

#: ../../reference/reference.rst:256
msgid "Condition for marking the test function as xfail (``True/False`` or a :ref:`condition string <string conditions>`). If a ``bool``, you also have to specify ``reason`` (see :ref:`condition string <string conditions>`)."
msgstr ""

#: ../../reference/reference.rst:260
msgid "Reason why the test function is marked as xfail."
msgstr ""

#: ../../reference/reference.rst:262
msgid "Exception class (or tuple of classes) expected to be raised by the test function; other exceptions will fail the test. Note that subclasses of the classes passed will also result in a match (similar to how the ``except`` statement works)."
msgstr ""

#: ../../reference/reference.rst:267
msgid "Whether the test function should actually be executed. If ``False``, the function will always xfail and will not be executed (useful if a function is segfaulting)."
msgstr ""

#: ../../reference/reference.rst:270
msgid "* If ``False`` the function will be shown in the terminal output as ``xfailed`` if it fails   and as ``xpass`` if it passes. In both cases this will not cause the test suite to fail as a whole. This   is particularly useful to mark *flaky* tests (tests that fail at random) to be tackled later. * If ``True``, the function will be shown in the terminal output as ``xfailed`` if it fails, but if it   unexpectedly passes then it will **fail** the test suite. This is particularly useful to mark functions   that are always failing and there should be a clear indication if they unexpectedly start to pass (for example   a new release of a library fixes a known bug).  Defaults to :confval:`xfail_strict`, which is ``False`` by default."
msgstr ""

#: ../../reference/reference.rst:271
msgid "If ``False`` the function will be shown in the terminal output as ``xfailed`` if it fails and as ``xpass`` if it passes. In both cases this will not cause the test suite to fail as a whole. This is particularly useful to mark *flaky* tests (tests that fail at random) to be tackled later."
msgstr ""

#: ../../reference/reference.rst:274
msgid "If ``True``, the function will be shown in the terminal output as ``xfailed`` if it fails, but if it unexpectedly passes then it will **fail** the test suite. This is particularly useful to mark functions that are always failing and there should be a clear indication if they unexpectedly start to pass (for example a new release of a library fixes a known bug)."
msgstr ""

#: ../../reference/reference.rst:279
msgid "Defaults to :confval:`xfail_strict`, which is ``False`` by default."
msgstr ""

#: ../../reference/reference.rst:283
msgid "Custom marks"
msgstr ""

#: ../../reference/reference.rst:285
msgid "Marks are created dynamically using the factory object ``pytest.mark`` and applied as a decorator."
msgstr ""

#: ../../reference/reference.rst:294
msgid "Will create and attach a :class:`Mark <pytest.Mark>` object to the collected :class:`Item <pytest.Item>`, which can then be accessed by fixtures or hooks with :meth:`Node.iter_markers <_pytest.nodes.Node.iter_markers>`. The ``mark`` object will have the following attributes:"
msgstr ""

#: ../../reference/reference.rst:303
msgid "Example for using multiple custom markers:"
msgstr ""

#: ../../reference/reference.rst:311
msgid "When :meth:`Node.iter_markers <_pytest.nodes.Node.iter_markers>` or :meth:`Node.iter_markers_with_node <_pytest.nodes.Node.iter_markers_with_node>` is used with multiple markers, the marker closest to the function will be iterated over first. The above example will result in ``@pytest.mark.slow`` followed by ``@pytest.mark.timeout(...)``."
msgstr ""

#: ../../reference/reference.rst:316
msgid "Fixtures"
msgstr ""

#: ../../reference/reference.rst:318
msgid "**Tutorial**: :ref:`fixture`"
msgstr ""

#: ../../reference/reference.rst:320
msgid "Fixtures are requested by test functions or other fixtures by declaring them as argument names."
msgstr ""

#: ../../reference/reference.rst:323
msgid "Example of a test requiring a fixture:"
msgstr ""

#: ../../reference/reference.rst:333
msgid "Example of a fixture requiring another fixture:"
msgstr ""

#: ../../reference/reference.rst:342
msgid "For more details, consult the full :ref:`fixtures docs <fixture>`."
msgstr ""

#: ../../reference/reference.rst:348
msgid "@pytest.fixture"
msgstr ""

#: _pytest.fixtures.fixture:1 of
msgid "Decorator to mark a fixture factory function."
msgstr ""

#: _pytest.fixtures.fixture:3 of
msgid "This decorator can be used, with or without parameters, to define a fixture function."
msgstr ""

#: _pytest.fixtures.fixture:6 of
msgid "The name of the fixture function can later be referenced to cause its invocation ahead of running tests: test modules or classes can use the ``pytest.mark.usefixtures(fixturename)`` marker."
msgstr ""

#: _pytest.fixtures.fixture:10 of
msgid "Test functions can directly use fixture names as input arguments in which case the fixture instance returned from the fixture function will be injected."
msgstr ""

#: _pytest.fixtures.fixture:14 of
msgid "Fixtures can provide their values to test functions using ``return`` or ``yield`` statements. When using ``yield`` the code block after the ``yield`` statement is executed as teardown code regardless of the test outcome, and must yield exactly once."
msgstr ""

#: _pytest.fixtures.fixture:19 of
msgid "The scope for which this fixture is shared; one of ``\"function\"`` (default), ``\"class\"``, ``\"module\"``, ``\"package\"`` or ``\"session\"``.  This parameter may also be a callable which receives ``(fixture_name, config)`` as parameters, and must return a ``str`` with one of the values mentioned above.  See :ref:`dynamic scope` in the docs for more information."
msgstr ""

#: _pytest.fixtures.fixture:20 of
msgid "The scope for which this fixture is shared; one of ``\"function\"`` (default), ``\"class\"``, ``\"module\"``, ``\"package\"`` or ``\"session\"``."
msgstr ""

#: _pytest.fixtures.fixture:23 of
msgid "This parameter may also be a callable which receives ``(fixture_name, config)`` as parameters, and must return a ``str`` with one of the values mentioned above."
msgstr ""

#: _pytest.fixtures.fixture:26 of
msgid "See :ref:`dynamic scope` in the docs for more information."
msgstr ""

#: _pytest.fixtures.fixture:28 of
msgid "An optional list of parameters which will cause multiple invocations of the fixture function and all of the tests using it. The current parameter is available in ``request.param``."
msgstr ""

#: _pytest.fixtures.fixture:33 of
msgid "If True, the fixture func is activated for all tests that can see it. If False (the default), an explicit reference is needed to activate the fixture."
msgstr ""

#: _pytest.fixtures.fixture:38 of
msgid "Sequence of ids each corresponding to the params so that they are part of the test id. If no ids are provided they will be generated automatically from the params."
msgstr ""

#: _pytest.fixtures.fixture:43 of
msgid "The name of the fixture. This defaults to the name of the decorated function. If a fixture is used in the same module in which it is defined, the function name of the fixture will be shadowed by the function arg that requests the fixture; one way to resolve this is to name the decorated function ``fixture_<fixturename>`` and then use ``@pytest.fixture(name='<fixturename>')``."
msgstr ""

#: ../../reference/reference.rst:357
msgid "capfd"
msgstr ""

#: ../../reference/reference.rst:359 ../../reference/reference.rst:370
#: ../../reference/reference.rst:397 ../../reference/reference.rst:410
msgid "**Tutorial**: :ref:`captures`"
msgstr ""

#: _pytest.capture.capfd:1 of
msgid "Enable text capturing of writes to file descriptors ``1`` and ``2``."
msgstr ""

#: _pytest.capture.capfd:3 of
msgid "The captured output is made available via ``capfd.readouterr()`` method calls, which return a ``(out, err)`` namedtuple. ``out`` and ``err`` will be ``text`` objects."
msgstr ""

#: _pytest.capture.capfd:7 _pytest.capture.capsys:7 of
msgid "Returns an instance of :class:`CaptureFixture[str] <pytest.CaptureFixture>`."
msgstr ""

#: _pytest.capture.capfd:9 _pytest.capture.capfdbinary:9
#: _pytest.capture.capsys:9 _pytest.capture.capsysbinary:9
#: _pytest.config.Config.get_verbosity:14
#: _pytest.monkeypatch.MonkeyPatch.context:4 of
msgid "Example:"
msgstr ""

#: ../../reference/reference.rst:368
msgid "capfdbinary"
msgstr ""

#: _pytest.capture.capfdbinary:1 of
msgid "Enable bytes capturing of writes to file descriptors ``1`` and ``2``."
msgstr ""

#: _pytest.capture.capfdbinary:3 of
msgid "The captured output is made available via ``capfd.readouterr()`` method calls, which return a ``(out, err)`` namedtuple. ``out`` and ``err`` will be ``byte`` objects."
msgstr ""

#: _pytest.capture.capfdbinary:7 _pytest.capture.capsysbinary:7 of
msgid "Returns an instance of :class:`CaptureFixture[bytes] <pytest.CaptureFixture>`."
msgstr ""

#: ../../reference/reference.rst:379
msgid "caplog"
msgstr ""

#: ../../reference/reference.rst:381
msgid "**Tutorial**: :ref:`logging`"
msgstr ""

#: _pytest.logging.caplog:1 of
msgid "Access and control log capturing."
msgstr ""

#: _pytest.logging.caplog:3 of
msgid "Captured logs are available through the following properties/methods::"
msgstr ""

#: ../../reference/reference.rst:386
msgid "Returns a :class:`pytest.LogCaptureFixture` instance."
msgstr ""

#: _pytest.logging.LogCaptureFixture:1 of
msgid "Provides access and control of log capturing."
msgstr ""

#: of pytest.LogCaptureFixture.handler:1
msgid "Get the logging handler used by the fixture."
msgstr ""

#: _pytest.logging.LogCaptureFixture.get_records:1 of
msgid "Get the logging records for one of the possible test phases."
msgstr ""

#: _pytest.logging.LogCaptureFixture.get_records:3 of
msgid "Which test phase to obtain the records from. Valid values are: \"setup\", \"call\" and \"teardown\"."
msgstr ""

#: _pytest.logging.LogCaptureFixture.get_records:7 of
msgid "The list of captured records at the given stage."
msgstr ""

#: of pytest.LogCaptureFixture.text:1
msgid "The formatted log text."
msgstr ""

#: of pytest.LogCaptureFixture.records:1
msgid "The list of log records."
msgstr ""

#: of pytest.LogCaptureFixture.record_tuples:1
msgid "A list of a stripped down version of log records intended for use in assertion comparison."
msgstr ""

#: of pytest.LogCaptureFixture.record_tuples:4
msgid "The format of the tuple is:"
msgstr ""

#: of pytest.LogCaptureFixture.record_tuples:6
msgid "(logger_name, log_level, message)"
msgstr ""

#: of pytest.LogCaptureFixture.messages:1
msgid "A list of format-interpolated log messages."
msgstr ""

#: of pytest.LogCaptureFixture.messages:3
msgid "Unlike 'records', which contains the format string and parameters for interpolation, log messages in this list are all interpolated."
msgstr ""

#: of pytest.LogCaptureFixture.messages:6
msgid "Unlike 'text', which contains the output from the handler, log messages in this list are unadorned with levels, timestamps, etc, making exact comparisons more reliable."
msgstr ""

#: of pytest.LogCaptureFixture.messages:10
msgid "Note that traceback or stack info (from :func:`logging.exception` or the `exc_info` or `stack_info` arguments to the logging functions) is not included, as this is added by the formatter in the handler."
msgstr ""

#: _pytest.logging.LogCaptureFixture.clear:1 of
msgid "Reset the list of log records and the captured log text."
msgstr ""

#: _pytest.logging.LogCaptureFixture.set_level:1 of
msgid "Set the threshold level of a logger for the duration of a test."
msgstr ""

#: _pytest.logging.LogCaptureFixture.set_level:3 of
msgid "Logging messages which are less severe than this level will not be captured."
msgstr ""

#: _pytest.logging.LogCaptureFixture.set_level:5 of
msgid "The levels of the loggers changed by this function will be restored to their initial values at the end of the test."
msgstr ""

#: _pytest.logging.LogCaptureFixture.at_level:5
#: _pytest.logging.LogCaptureFixture.set_level:9 of
msgid "Will enable the requested logging level if it was disabled via :func:`logging.disable`."
msgstr ""

#: _pytest.logging.LogCaptureFixture.at_level:7
#: _pytest.logging.LogCaptureFixture.set_level:11 of
msgid "The level."
msgstr ""

#: _pytest.logging.LogCaptureFixture.at_level:8
#: _pytest.logging.LogCaptureFixture.set_level:12 of
msgid "The logger to update. If not given, the root logger."
msgstr ""

#: _pytest.logging.LogCaptureFixture.at_level:1 of
msgid "Context manager that sets the level for capturing of logs. After the end of the 'with' statement the level is restored to its original value."
msgstr ""

#: _pytest.logging.LogCaptureFixture.filtering:1 of
msgid "Context manager that temporarily adds the given filter to the caplog's :meth:`handler` for the 'with' statement block, and removes that filter at the end of the block."
msgstr ""

#: _pytest.logging.LogCaptureFixture.filtering:5 of
msgid "A custom :class:`logging.Filter` object."
msgstr ""

#: ../../reference/reference.rst:395
msgid "capsys"
msgstr ""

#: _pytest.capture.capsys:1 of
msgid "Enable text capturing of writes to ``sys.stdout`` and ``sys.stderr``."
msgstr ""

#: _pytest.capture.capsys:3 of
msgid "The captured output is made available via ``capsys.readouterr()`` method calls, which return a ``(out, err)`` namedtuple. ``out`` and ``err`` will be ``text`` objects."
msgstr ""

#: _pytest.capture.CaptureFixture:1 of
msgid "Object returned by the :fixture:`capsys`, :fixture:`capsysbinary`, :fixture:`capfd` and :fixture:`capfdbinary` fixtures."
msgstr ""

#: _pytest.capture.CaptureFixture.readouterr:1 of
msgid "Read and return the captured output so far, resetting the internal buffer."
msgstr ""

#: _pytest.capture.CaptureFixture.readouterr:4 of
msgid "The captured content as a namedtuple with ``out`` and ``err`` string attributes."
msgstr ""

#: _pytest.capture.CaptureFixture.disabled:1 of
msgid "Temporarily disable capturing while inside the ``with`` block."
msgstr ""

#: ../../reference/reference.rst:408
msgid "capsysbinary"
msgstr ""

#: _pytest.capture.capsysbinary:1 of
msgid "Enable bytes capturing of writes to ``sys.stdout`` and ``sys.stderr``."
msgstr ""

#: _pytest.capture.capsysbinary:3 of
msgid "The captured output is made available via ``capsysbinary.readouterr()`` method calls, which return a ``(out, err)`` namedtuple. ``out`` and ``err`` will be ``bytes`` objects."
msgstr ""

#: ../../reference/reference.rst:419
msgid "config.cache"
msgstr ""

#: ../../reference/reference.rst:421
msgid "**Tutorial**: :ref:`cache`"
msgstr ""

#: ../../reference/reference.rst:423
msgid "The ``config.cache`` object allows other plugins and fixtures to store and retrieve values across test runs. To access it from fixtures request ``pytestconfig`` into your fixture and get it with ``pytestconfig.cache``."
msgstr ""

#: ../../reference/reference.rst:427
msgid "Under the hood, the cache plugin uses the simple ``dumps``/``loads`` API of the :py:mod:`json` stdlib module."
msgstr ""

#: ../../reference/reference.rst:430
msgid "``config.cache`` is an instance of :class:`pytest.Cache`:"
msgstr ""

#: _pytest.cacheprovider.Cache:1 of
msgid "Instance of the `cache` fixture."
msgstr ""

#: _pytest.cacheprovider.Cache.mkdir:1 of
msgid "Return a directory path object with the given name."
msgstr ""

#: _pytest.cacheprovider.Cache.mkdir:3 of
msgid "If the directory does not yet exist, it will be created. You can use it to manage files to e.g. store/retrieve database dumps across test sessions."
msgstr ""

#: _pytest.cacheprovider.Cache.mkdir:9 of
msgid "Must be a string not containing a ``/`` separator. Make sure the name contains your plugin or application identifiers to prevent clashes with other cache users."
msgstr ""

#: _pytest.cacheprovider.Cache.get:1 of
msgid "Return the cached value for the given key."
msgstr ""

#: _pytest.cacheprovider.Cache.get:3 of
msgid "If no value was yet cached or the value cannot be read, the specified default is returned."
msgstr ""

#: _pytest.cacheprovider.Cache.get:6 _pytest.cacheprovider.Cache.set:3 of
msgid "Must be a ``/`` separated value. Usually the first name is the name of your plugin or your application."
msgstr ""

#: _pytest.cacheprovider.Cache.get:9 of
msgid "The value to return in case of a cache-miss or invalid cache value."
msgstr ""

#: _pytest.cacheprovider.Cache.set:1 of
msgid "Save value for the given key."
msgstr ""

#: _pytest.cacheprovider.Cache.set:6 of
msgid "Must be of any combination of basic python types, including nested types like lists of dictionaries."
msgstr ""

#: ../../reference/reference.rst:439
msgid "doctest_namespace"
msgstr ""

#: ../../reference/reference.rst:441
msgid "**Tutorial**: :ref:`doctest`"
msgstr ""

#: _pytest.doctest.doctest_namespace:1 of
msgid "Fixture that returns a :py:class:`dict` that will be injected into the namespace of doctests."
msgstr ""

#: _pytest.doctest.doctest_namespace:4 of
msgid "Usually this fixture is used in conjunction with another ``autouse`` fixture:"
msgstr ""

#: _pytest.doctest.doctest_namespace:12 of
msgid "For more details: :ref:`doctest_namespace`."
msgstr ""

#: ../../reference/reference.rst:449
msgid "monkeypatch"
msgstr ""

#: ../../reference/reference.rst:451
msgid "**Tutorial**: :ref:`monkeypatching`"
msgstr ""

#: _pytest.monkeypatch.monkeypatch:1 of
msgid "A convenient fixture for monkey-patching."
msgstr ""

#: _pytest.monkeypatch.monkeypatch:3 of
msgid "The fixture provides these methods to modify objects, dictionaries, or :data:`os.environ`:"
msgstr ""

#: _pytest.monkeypatch.monkeypatch:6 of
msgid ":meth:`monkeypatch.setattr(obj, name, value, raising=True) <pytest.MonkeyPatch.setattr>`"
msgstr ""

#: _pytest.monkeypatch.monkeypatch:7 of
msgid ":meth:`monkeypatch.delattr(obj, name, raising=True) <pytest.MonkeyPatch.delattr>`"
msgstr ""

#: _pytest.monkeypatch.monkeypatch:8 of
msgid ":meth:`monkeypatch.setitem(mapping, name, value) <pytest.MonkeyPatch.setitem>`"
msgstr ""

#: _pytest.monkeypatch.monkeypatch:9 of
msgid ":meth:`monkeypatch.delitem(obj, name, raising=True) <pytest.MonkeyPatch.delitem>`"
msgstr ""

#: _pytest.monkeypatch.monkeypatch:10 of
msgid ":meth:`monkeypatch.setenv(name, value, prepend=None) <pytest.MonkeyPatch.setenv>`"
msgstr ""

#: _pytest.monkeypatch.monkeypatch:11 of
msgid ":meth:`monkeypatch.delenv(name, raising=True) <pytest.MonkeyPatch.delenv>`"
msgstr ""

#: _pytest.monkeypatch.monkeypatch:12 of
msgid ":meth:`monkeypatch.syspath_prepend(path) <pytest.MonkeyPatch.syspath_prepend>`"
msgstr ""

#: _pytest.monkeypatch.monkeypatch:13 of
msgid ":meth:`monkeypatch.chdir(path) <pytest.MonkeyPatch.chdir>`"
msgstr ""

#: _pytest.monkeypatch.monkeypatch:14 of
msgid ":meth:`monkeypatch.context() <pytest.MonkeyPatch.context>`"
msgstr ""

#: _pytest.monkeypatch.monkeypatch:16 of
msgid "All modifications will be undone after the requesting test function or fixture has finished. The ``raising`` parameter determines if a :class:`KeyError` or :class:`AttributeError` will be raised if the set/deletion operation does not have the specified target."
msgstr ""

#: _pytest.monkeypatch.monkeypatch:21 of
msgid "To undo modifications done by the fixture in a contained scope, use :meth:`context() <pytest.MonkeyPatch.context>`."
msgstr ""

#: ../../reference/reference.rst:456
msgid "Returns a :class:`~pytest.MonkeyPatch` instance."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch:1 of
msgid "Helper to conveniently monkeypatch attributes/items/environment variables/syspath."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch:4 of
msgid "Returned by the :fixture:`monkeypatch` fixture."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch:6 of
msgid "Can now also be used directly as `pytest.MonkeyPatch()`, for when the fixture is not available. In this case, use :meth:`with MonkeyPatch.context() as mp: <context>` or remember to call :meth:`undo` explicitly."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.context:1 of
msgid "Context manager that returns a new :class:`MonkeyPatch` object which undoes any patching done inside the ``with`` block upon exit."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.context:15 of
msgid "Useful in situations where it is desired to undo some patches before the test ends, such as mocking ``stdlib`` functions that might break pytest itself if mocked (for examples of this see :issue:`3290`)."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.setattr:1 of
msgid "Set attribute value on target, memorizing the old value."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.setattr:11 of
msgid "The code above replaces the :func:`os.getcwd` function by a ``lambda`` which always returns ``\"/\"``."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.setattr:14 of
msgid "For convenience, you can specify a string as ``target`` which will be interpreted as a dotted import path, with the last part being the attribute name:"
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.setattr:22 of
msgid "Raises :class:`AttributeError` if the attribute does not exist, unless ``raising`` is set to False."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.setattr:25 of
msgid "**Where to patch**"
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.setattr:27 of
msgid "``monkeypatch.setattr`` works by (temporarily) changing the object that a name points to with another one. There can be many names pointing to any individual object, so for patching to work you must ensure that you patch the name used by the system under test."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.setattr:31 of
msgid "See the section :ref:`Where to patch <python:where-to-patch>` in the :mod:`unittest.mock` docs for a complete explanation, which is meant for :func:`unittest.mock.patch` but applies to ``monkeypatch.setattr`` as well."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.delattr:1 of
msgid "Delete attribute ``name`` from ``target``."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.delattr:3 of
msgid "If no ``name`` is specified and ``target`` is a string it will be interpreted as a dotted import path with the last part being the attribute name."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.delattr:7 of
msgid "Raises AttributeError it the attribute does not exist, unless ``raising`` is set to False."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.setitem:1 of
msgid "Set dictionary entry ``name`` to value."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.delitem:1 of
msgid "Delete ``name`` from dict."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.delitem:3 of
msgid "Raises ``KeyError`` if it doesn't exist, unless ``raising`` is set to False."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.setenv:1 of
msgid "Set environment variable ``name`` to ``value``."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.setenv:3 of
msgid "If ``prepend`` is a character, read the current environment variable value and prepend the ``value`` adjoined with the ``prepend`` character."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.delenv:1 of
msgid "Delete ``name`` from the environment."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.delenv:3 of
msgid "Raises ``KeyError`` if it does not exist, unless ``raising`` is set to False."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.syspath_prepend:1 of
msgid "Prepend ``path`` to ``sys.path`` list of import locations."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.chdir:1 of
msgid "Change the current working directory to the specified path."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.chdir:3 of
msgid "The path to change into."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.undo:1 of
msgid "Undo previous changes."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.undo:3 of
msgid "This call consumes the undo stack. Calling it a second time has no effect unless you do more monkeypatching after the undo call."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.undo:6 of
msgid "There is generally no need to call `undo()`, since it is called automatically during tear-down."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.undo:10 of
msgid "The same `monkeypatch` fixture is used across a single test function invocation. If `monkeypatch` is used both by the test function itself and one of the test fixtures, calling `undo()` will undo all of the changes made in both functions."
msgstr ""

#: _pytest.monkeypatch.MonkeyPatch.undo:16 of
msgid "Prefer to use :meth:`context() <pytest.MonkeyPatch.context>` instead."
msgstr ""

#: ../../reference/reference.rst:465
msgid "pytestconfig"
msgstr ""

#: _pytest.fixtures.pytestconfig:1 of
msgid "Session-scoped fixture that returns the session's :class:`pytest.Config` object."
msgstr ""

#: ../../reference/reference.rst:473
msgid "pytester"
msgstr ""

#: ../../reference/reference.rst:477
msgid "Provides a :class:`~pytest.Pytester` instance that can be used to run and test pytest itself."
msgstr ""

#: ../../reference/reference.rst:479
msgid "It provides an empty directory where pytest can be executed in isolation, and contains facilities to write tests, configuration files, and match against expected output."
msgstr ""

#: ../../reference/reference.rst:482
msgid "To use it, include in your topmost ``conftest.py`` file:"
msgstr ""

#: _pytest.pytester.Pytester:1 of
msgid "Facilities to write tests/configuration files, execute pytest in isolation, and match against expected output, perfect for black-box testing of pytest plugins."
msgstr ""

#: _pytest.pytester.Pytester:4 of
msgid "It attempts to isolate the test run from external factors as much as possible, modifying the current working directory to :attr:`path` and environment variables during initialization."
msgstr ""

#: ../../../../docstring of pytest.Pytester.plugins:1
msgid "A list of plugins to use with :py:meth:`parseconfig` and :py:meth:`runpytest`.  Initially this is an empty list but plugins can be added to the list.  The type of items to add to the list depends on the method using them so refer to them for details."
msgstr ""

#: of pytest.Pytester.path:1
msgid "Temporary directory path used to create files/run tests from, etc."
msgstr ""

#: _pytest.pytester.Pytester.make_hook_recorder:1 of
msgid "Create a new :class:`HookRecorder` for a :class:`PytestPluginManager`."
msgstr ""

#: _pytest.pytester.Pytester.chdir:1 of
msgid "Cd into the temporary directory."
msgstr ""

#: _pytest.pytester.Pytester.chdir:3 of
msgid "This is done automatically upon instantiation."
msgstr ""

#: _pytest.pytester.Pytester.makefile:1 of
msgid "Create new text file(s) in the test directory."
msgstr ""

#: _pytest.pytester.Pytester.makefile:3 of
msgid "The extension the file(s) should use, including the dot, e.g. `.py`."
msgstr ""

#: _pytest.pytester.Pytester.makefile:5 of
msgid "All args are treated as strings and joined using newlines. The result is written as contents to the file.  The name of the file is based on the test function requesting this fixture."
msgstr ""

#: _pytest.pytester.Pytester.makefile:9 of
msgid "Each keyword is the name of a file, while the value of it will be written as contents of the file."
msgstr ""

#: _pytest.pytester.Pytester.makefile:12 of
msgid "The first created file."
msgstr ""

#: _pytest.pytester.Pytester.makefile:15 _pytest.pytester.Pytester.makepyfile:6
#: _pytest.pytester.Pytester.maketxtfile:6 of
msgid "Examples:"
msgstr ""

#: _pytest.pytester.Pytester.makefile:23 of
msgid "To create binary files, use :meth:`pathlib.Path.write_bytes` directly:"
msgstr ""

#: _pytest.pytester.Pytester.makeconftest:1 of
msgid "Write a conftest.py file."
msgstr ""

#: _pytest.pytester.Pytester.makeconftest:3 _pytest.pytester.Pytester.makeini:3
#: _pytest.pytester.Pytester.makepyprojecttoml:3 of
msgid "The contents."
msgstr ""

#: _pytest.pytester.Pytester.makeconftest:4 of
msgid "The conftest.py file."
msgstr ""

#: _pytest.pytester.Pytester.makeini:1 of
msgid "Write a tox.ini file."
msgstr ""

#: _pytest.pytester.Pytester.makeini:4 of
msgid "The tox.ini file."
msgstr ""

#: _pytest.pytester.Pytester.getinicfg:1 of
msgid "Return the pytest section from the tox.ini config file."
msgstr ""

#: _pytest.pytester.Pytester.makepyprojecttoml:1 of
msgid "Write a pyproject.toml file."
msgstr ""

#: _pytest.pytester.Pytester.makepyprojecttoml:4 of
msgid "The pyproject.ini file."
msgstr ""

#: _pytest.pytester.Pytester.makepyfile:1 of
msgid "Shortcut for .makefile() with a .py extension."
msgstr ""

#: _pytest.pytester.Pytester.makepyfile:3 of
msgid "Defaults to the test name with a '.py' extension, e.g test_foobar.py, overwriting existing files."
msgstr ""

#: _pytest.pytester.Pytester.maketxtfile:1 of
msgid "Shortcut for .makefile() with a .txt extension."
msgstr ""

#: _pytest.pytester.Pytester.maketxtfile:3 of
msgid "Defaults to the test name with a '.txt' extension, e.g test_foobar.txt, overwriting existing files."
msgstr ""

#: _pytest.pytester.Pytester.syspathinsert:1 of
msgid "Prepend a directory to sys.path, defaults to :attr:`path`."
msgstr ""

#: _pytest.pytester.Pytester.syspathinsert:3 of
msgid "This is undone automatically when this object dies at the end of each test."
msgstr ""

#: _pytest.pytester.Pytester.syspathinsert:6 of
msgid "The path."
msgstr ""

#: _pytest.pytester.Pytester.mkdir:1 of
msgid "Create a new (sub)directory."
msgstr ""

#: _pytest.pytester.Pytester.mkdir:3 of
msgid "The name of the directory, relative to the pytester path."
msgstr ""

#: _pytest.pytester.Pytester.mkdir:5 of
msgid "The created directory."
msgstr ""

#: _pytest.pytester.Pytester.mkpydir:1 of
msgid "Create a new python package."
msgstr ""

#: _pytest.pytester.Pytester.mkpydir:3 of
msgid "This creates a (sub)directory with an empty ``__init__.py`` file so it gets recognised as a Python package."
msgstr ""

#: _pytest.pytester.Pytester.copy_example:1 of
msgid "Copy file from project's directory into the testdir."
msgstr ""

#: _pytest.pytester.Pytester.copy_example:3 of
msgid "The name of the file to copy."
msgstr ""

#: _pytest.pytester.Pytester.copy_example:5 of
msgid "Path to the copied directory (inside ``self.path``)."
msgstr ""

#: _pytest.pytester.Pytester.getnode:1 of
msgid "Get the collection node of a file."
msgstr ""

#: _pytest.pytester.Pytester.getnode:3 of
msgid "A pytest config. See :py:meth:`parseconfig` and :py:meth:`parseconfigure` for creating it."
msgstr ""

#: _pytest.pytester.Pytester.getnode:6 _pytest.pytester.Pytester.getpathnode:6
#: of
msgid "Path to the file."
msgstr ""

#: _pytest.pytester.Pytester.getnode:8 _pytest.pytester.Pytester.getpathnode:8
#: of
msgid "The node."
msgstr ""

#: _pytest.pytester.Pytester.getpathnode:1 of
msgid "Return the collection node of a file."
msgstr ""

#: _pytest.pytester.Pytester.getpathnode:3 of
msgid "This is like :py:meth:`getnode` but uses :py:meth:`parseconfigure` to create the (configured) pytest Config instance."
msgstr ""

#: _pytest.pytester.Pytester.genitems:1 of
msgid "Generate all test items from a collection node."
msgstr ""

#: _pytest.pytester.Pytester.genitems:3 of
msgid "This recurses into the collection node and returns a list of all the test items contained within."
msgstr ""

#: _pytest.pytester.Pytester.genitems:6 of
msgid "The collection nodes."
msgstr ""

#: _pytest.pytester.Pytester.genitems:8 of
msgid "The collected items."
msgstr ""

#: _pytest.pytester.Pytester.runitem:1 of
msgid "Run the \"test_func\" Item."
msgstr ""

#: _pytest.pytester.Pytester.runitem:3 of
msgid "The calling test instance (class containing the test method) must provide a ``.getrunner()`` method which should return a runner which can run the test protocol for a single item, e.g. ``_pytest.runner.runtestprotocol``."
msgstr ""

#: _pytest.pytester.Pytester.inline_runsource:1 of
msgid "Run a test module in process using ``pytest.main()``."
msgstr ""

#: _pytest.pytester.Pytester.inline_runsource:3 of
msgid "This run writes \"source\" into a temporary file and runs ``pytest.main()`` on it, returning a :py:class:`HookRecorder` instance for the result."
msgstr ""

#: _pytest.pytester.Pytester.inline_runsource:7 of
msgid "The source code of the test module."
msgstr ""

#: _pytest.pytester.Pytester.inline_runsource:8 of
msgid "Any extra command line arguments to use."
msgstr ""

#: _pytest.pytester.Pytester.inline_genitems:1 of
msgid "Run ``pytest.main(['--collect-only'])`` in-process."
msgstr ""

#: _pytest.pytester.Pytester.inline_genitems:3 of
msgid "Runs the :py:func:`pytest.main` function to run all of pytest inside the test process itself like :py:meth:`inline_run`, but returns a tuple of the collected items and a :py:class:`HookRecorder` instance."
msgstr ""

#: _pytest.pytester.Pytester.inline_run:1 of
msgid "Run ``pytest.main()`` in-process, returning a HookRecorder."
msgstr ""

#: _pytest.pytester.Pytester.inline_run:3 of
msgid "Runs the :py:func:`pytest.main` function to run all of pytest inside the test process itself.  This means it can return a :py:class:`HookRecorder` instance which gives more detailed results from that run than can be done by matching stdout/stderr from :py:meth:`runpytest`."
msgstr ""

#: _pytest.pytester.Pytester.inline_run:9 of
msgid "Command line arguments to pass to :py:func:`pytest.main`."
msgstr ""

#: _pytest.pytester.Pytester.inline_run:11 of
msgid "Extra plugin instances the ``pytest.main()`` instance should use."
msgstr ""

#: _pytest.pytester.Pytester.inline_run:13 of
msgid "Typically we reraise keyboard interrupts from the child run. If True, the KeyboardInterrupt exception is captured."
msgstr ""

#: _pytest.pytester.Pytester.runpytest_inprocess:1 of
msgid "Return result of running pytest in-process, providing a similar interface to what self.runpytest() provides."
msgstr ""

#: _pytest.pytester.Pytester.runpytest:1 of
msgid "Run pytest inline or in a subprocess, depending on the command line option \"--runpytest\" and return a :py:class:`~pytest.RunResult`."
msgstr ""

#: _pytest.pytester.Pytester.parseconfig:1 of
msgid "Return a new pytest :class:`pytest.Config` instance from given commandline args."
msgstr ""

#: _pytest.pytester.Pytester.parseconfig:4 of
msgid "This invokes the pytest bootstrapping code in _pytest.config to create a new :py:class:`pytest.PytestPluginManager` and call the :hook:`pytest_cmdline_parse` hook to create a new :class:`pytest.Config` instance."
msgstr ""

#: _pytest.pytester.Pytester.parseconfig:9 of
msgid "If :attr:`plugins` has been populated they should be plugin modules to be registered with the plugin manager."
msgstr ""

#: _pytest.pytester.Pytester.parseconfigure:1 of
msgid "Return a new pytest configured Config instance."
msgstr ""

#: _pytest.pytester.Pytester.parseconfigure:3 of
msgid "Returns a new :py:class:`pytest.Config` instance like :py:meth:`parseconfig`, but also calls the :hook:`pytest_configure` hook."
msgstr ""

#: _pytest.pytester.Pytester.getitem:1 of
msgid "Return the test item for a test function."
msgstr ""

#: _pytest.pytester.Pytester.getitem:3 of
msgid "Writes the source to a python file and runs pytest's collection on the resulting module, returning the test item for the requested function name."
msgstr ""

#: _pytest.pytester.Pytester.getitem:7 of
msgid "The module source."
msgstr ""

#: _pytest.pytester.Pytester.getitem:9 of
msgid "The name of the test function for which to return a test item."
msgstr ""

#: _pytest.pytester.Pytester.getitem:11 of
msgid "The test item."
msgstr ""

#: _pytest.pytester.Pytester.getitems:1 of
msgid "Return all test items collected from the module."
msgstr ""

#: _pytest.pytester.Pytester.getitems:3 of
msgid "Writes the source to a Python file and runs pytest's collection on the resulting module, returning all test items contained within."
msgstr ""

#: _pytest.pytester.Pytester.getmodulecol:1 of
msgid "Return the module collection node for ``source``."
msgstr ""

#: _pytest.pytester.Pytester.getmodulecol:3 of
msgid "Writes ``source`` to a file using :py:meth:`makepyfile` and then runs the pytest collection on it, returning the collection node for the test module."
msgstr ""

#: _pytest.pytester.Pytester.getmodulecol:7 of
msgid "The source code of the module to collect."
msgstr ""

#: _pytest.pytester.Pytester.getmodulecol:10 of
msgid "Any extra arguments to pass to :py:meth:`parseconfigure`."
msgstr ""

#: _pytest.pytester.Pytester.getmodulecol:13 of
msgid "Whether to also write an ``__init__.py`` file to the same directory to ensure it is a package."
msgstr ""

#: _pytest.pytester.Pytester.collect_by_name:1 of
msgid "Return the collection node for name from the module collection."
msgstr ""

#: _pytest.pytester.Pytester.collect_by_name:3 of
msgid "Searches a module collection node for a collection node matching the given name."
msgstr ""

#: _pytest.pytester.Pytester.collect_by_name:6 of
msgid "A module collection node; see :py:meth:`getmodulecol`."
msgstr ""

#: _pytest.pytester.Pytester.collect_by_name:7 of
msgid "The name of the node to return."
msgstr ""

#: _pytest.pytester.Pytester.popen:1 of
msgid "Invoke :py:class:`subprocess.Popen`."
msgstr ""

#: _pytest.pytester.Pytester.popen:3 of
msgid "Calls :py:class:`subprocess.Popen` making sure the current working directory is in ``PYTHONPATH``."
msgstr ""

#: _pytest.pytester.Pytester.popen:6 of
msgid "You probably want to use :py:meth:`run` instead."
msgstr ""

#: _pytest.pytester.Pytester.run:1 of
msgid "Run a command with arguments."
msgstr ""

#: _pytest.pytester.Pytester.run:3 of
msgid "Run a process using :py:class:`subprocess.Popen` saving the stdout and stderr."
msgstr ""

#: _pytest.pytester.Pytester.run:6 of
msgid "The sequence of arguments to pass to :py:class:`subprocess.Popen`, with path-like objects being converted to :py:class:`str` automatically."
msgstr ""

#: _pytest.pytester.Pytester.run:10
#: _pytest.pytester.Pytester.runpytest_subprocess:11 of
msgid "The period in seconds after which to timeout and raise :py:class:`Pytester.TimeoutExpired`."
msgstr ""

#: _pytest.pytester.Pytester.run:13 of
msgid "Optional standard input.  - If it is ``CLOSE_STDIN`` (Default), then this method calls   :py:class:`subprocess.Popen` with ``stdin=subprocess.PIPE``, and   the standard input is closed immediately after the new command is   started.  - If it is of type :py:class:`bytes`, these bytes are sent to the   standard input of the command.  - Otherwise, it is passed through to :py:class:`subprocess.Popen`.   For further information in this case, consult the document of the   ``stdin`` parameter in :py:class:`subprocess.Popen`."
msgstr ""

#: _pytest.pytester.Pytester.run:14 of
msgid "Optional standard input."
msgstr ""

#: _pytest.pytester.Pytester.run:16 of
msgid "If it is ``CLOSE_STDIN`` (Default), then this method calls :py:class:`subprocess.Popen` with ``stdin=subprocess.PIPE``, and the standard input is closed immediately after the new command is started."
msgstr ""

#: _pytest.pytester.Pytester.run:21 of
msgid "If it is of type :py:class:`bytes`, these bytes are sent to the standard input of the command."
msgstr ""

#: _pytest.pytester.Pytester.run:24 of
msgid "Otherwise, it is passed through to :py:class:`subprocess.Popen`. For further information in this case, consult the document of the ``stdin`` parameter in :py:class:`subprocess.Popen`."
msgstr ""

#: _pytest.pytester.Pytester.run:28
#: _pytest.pytester.Pytester.runpytest_subprocess:14 of
msgid "The result."
msgstr ""

#: _pytest.pytester.Pytester.runpython:1 of
msgid "Run a python script using sys.executable as interpreter."
msgstr ""

#: _pytest.pytester.Pytester.runpython_c:1 of
msgid "Run ``python -c \"command\"``."
msgstr ""

#: _pytest.pytester.Pytester.runpytest_subprocess:1 of
msgid "Run pytest as a subprocess with given arguments."
msgstr ""

#: _pytest.pytester.Pytester.runpytest_subprocess:3 of
msgid "Any plugins added to the :py:attr:`plugins` list will be added using the ``-p`` command line option.  Additionally ``--basetemp`` is used to put any temporary files and directories in a numbered directory prefixed with \"runpytest-\" to not conflict with the normal numbered pytest location for temporary files and directories."
msgstr ""

#: _pytest.pytester.Pytester.runpytest_subprocess:9 of
msgid "The sequence of arguments to pass to the pytest subprocess."
msgstr ""

#: _pytest.pytester.Pytester.spawn_pytest:1 of
msgid "Run pytest using pexpect."
msgstr ""

#: _pytest.pytester.Pytester.spawn_pytest:3 of
msgid "This makes sure to use the right pytest and sets up the temporary directory locations."
msgstr ""

#: _pytest.pytester.Pytester.spawn:3 _pytest.pytester.Pytester.spawn_pytest:6
#: of
msgid "The pexpect child is returned."
msgstr ""

#: _pytest.pytester.Pytester.spawn:1 of
msgid "Run a command using pexpect."
msgstr ""

#: _pytest.pytester.RunResult:1 of
msgid "The result of running a command from :class:`~pytest.Pytester`."
msgstr ""

#: ../../../../docstring of pytest.RunResult.ret:1
msgid "The return value."
msgstr ""

#: ../../../../docstring of pytest.RunResult.outlines:1
msgid "List of lines captured from stdout."
msgstr ""

#: ../../../../docstring of pytest.RunResult.errlines:1
msgid "List of lines captured from stderr."
msgstr ""

#: ../../../../docstring of pytest.RunResult.stdout:1
msgid ":class:`~pytest.LineMatcher` of stdout."
msgstr ""

#: ../../../../docstring of pytest.RunResult.stdout:3
msgid "Use e.g. :func:`str(stdout) <pytest.LineMatcher.__str__()>` to reconstruct stdout, or the commonly used :func:`stdout.fnmatch_lines() <pytest.LineMatcher.fnmatch_lines()>` method."
msgstr ""

#: ../../../../docstring of pytest.RunResult.stderr:1
msgid ":class:`~pytest.LineMatcher` of stderr."
msgstr ""

#: ../../../../docstring of pytest.RunResult.duration:1
msgid "Duration in seconds."
msgstr ""

#: _pytest.pytester.RunResult.parseoutcomes:1 of
msgid "Return a dictionary of outcome noun -> count from parsing the terminal output that the test process produced."
msgstr ""

#: _pytest.pytester.RunResult.parseoutcomes:4 of
msgid "The returned nouns will always be in plural form::"
msgstr ""

#: _pytest.pytester.RunResult.parse_summary_nouns:7
#: _pytest.pytester.RunResult.parseoutcomes:8 of
#, python-brace-format
msgid "Will return ``{\"failed\": 1, \"passed\": 1, \"warnings\": 1, \"errors\": 1}``."
msgstr ""

#: _pytest.pytester.RunResult.parse_summary_nouns:1 of
msgid "Extract the nouns from a pytest terminal summary line."
msgstr ""

#: _pytest.pytester.RunResult.parse_summary_nouns:3 of
msgid "It always returns the plural noun for consistency::"
msgstr ""

#: _pytest.pytester.RunResult.assert_outcomes:1 of
msgid "Assert that the specified outcomes appear with the respective numbers (0 means it didn't occur) in the text output from a test run."
msgstr ""

#: _pytest.pytester.RunResult.assert_outcomes:4 of
msgid "``warnings`` and ``deselected`` are only checked if not None."
msgstr ""

#: _pytest.pytester.LineMatcher:1 of
msgid "Flexible matching of text."
msgstr ""

#: _pytest.pytester.LineMatcher:3 of
msgid "This is a convenience class to test large texts like the output of commands."
msgstr ""

#: _pytest.pytester.LineMatcher:6 of
msgid "The constructor takes a list of lines without their trailing newlines, i.e. ``text.splitlines()``."
msgstr ""

#: _pytest.pytester.LineMatcher.__str__:1 _pytest.pytester.LineMatcher.str:1 of
msgid "Return the entire original text."
msgstr ""

#: _pytest.pytester.LineMatcher.__str__:3 of
msgid "You can use :meth:`str` in older versions."
msgstr ""

#: _pytest.pytester.LineMatcher.fnmatch_lines_random:1 of
msgid "Check lines exist in the output in any order (using :func:`python:fnmatch.fnmatch`)."
msgstr ""

#: _pytest.pytester.LineMatcher.re_match_lines_random:1 of
msgid "Check lines exist in the output in any order (using :func:`python:re.match`)."
msgstr ""

#: _pytest.pytester.LineMatcher.get_lines_after:1 of
msgid "Return all lines following the given line in the text."
msgstr ""

#: _pytest.pytester.LineMatcher.get_lines_after:3 of
msgid "The given line can contain glob wildcards."
msgstr ""

#: _pytest.pytester.LineMatcher.fnmatch_lines:1 of
msgid "Check lines exist in the output (using :func:`python:fnmatch.fnmatch`)."
msgstr ""

#: _pytest.pytester.LineMatcher.fnmatch_lines:3 of
msgid "The argument is a list of lines which have to match and can use glob wildcards.  If they do not match a pytest.fail() is called.  The matches and non-matches are also shown as part of the error message."
msgstr ""

#: _pytest.pytester.LineMatcher.fnmatch_lines:7 of
msgid "String patterns to match."
msgstr ""

#: _pytest.pytester.LineMatcher.fnmatch_lines:8 of
msgid "Match lines consecutively?"
msgstr ""

#: _pytest.pytester.LineMatcher.re_match_lines:1 of
msgid "Check lines exist in the output (using :func:`python:re.match`)."
msgstr ""

#: _pytest.pytester.LineMatcher.re_match_lines:3 of
msgid "The argument is a list of lines which have to match using ``re.match``. If they do not match a pytest.fail() is called."
msgstr ""

#: _pytest.pytester.LineMatcher.re_match_lines:6 of
msgid "The matches and non-matches are also shown as part of the error message."
msgstr ""

#: _pytest.pytester.LineMatcher.re_match_lines:8 of
msgid "string patterns to match."
msgstr ""

#: _pytest.pytester.LineMatcher.re_match_lines:9 of
msgid "match lines consecutively?"
msgstr ""

#: _pytest.pytester.LineMatcher.no_fnmatch_line:1 of
msgid "Ensure captured lines do not match the given pattern, using ``fnmatch.fnmatch``."
msgstr ""

#: _pytest.pytester.LineMatcher.no_fnmatch_line:3 of
msgid "The pattern to match lines."
msgstr ""

#: _pytest.pytester.LineMatcher.no_re_match_line:1 of
msgid "Ensure captured lines do not match the given pattern, using ``re.match``."
msgstr ""

#: _pytest.pytester.LineMatcher.no_re_match_line:3 of
msgid "The regular expression to match lines."
msgstr ""

#: _pytest.pytester.HookRecorder:1 of
msgid "Record all hooks called in a plugin manager."
msgstr ""

#: _pytest.pytester.HookRecorder:3 of
msgid "Hook recorders are created by :class:`Pytester`."
msgstr ""

#: _pytest.pytester.HookRecorder:5 of
msgid "This wraps all the hook calls in the plugin manager, recording each call before propagating the normal calls."
msgstr ""

#: _pytest.pytester.HookRecorder.getcalls:1 of
msgid "Get all recorded calls to hooks with the given names (or name)."
msgstr ""

#: _pytest.pytester.HookRecorder.matchreport:1 of
msgid "Return a testreport whose dotted import path matches."
msgstr ""

#: _pytest.pytester.RecordedHookCall:1 of
msgid "A recorded call to a hook."
msgstr ""

#: _pytest.pytester.RecordedHookCall:3 of
msgid "The arguments to the hook call are set as attributes. For example:"
msgstr ""

#: ../../reference/reference.rst:510
msgid "record_property"
msgstr ""

#: ../../reference/reference.rst:512
msgid "**Tutorial**: :ref:`record_property example`"
msgstr ""

#: _pytest.junitxml.record_property:1 of
msgid "Add extra properties to the calling test."
msgstr ""

#: _pytest.junitxml.record_property:3 of
msgid "User properties become part of the test report and are available to the configured reporters, like JUnit XML."
msgstr ""

#: _pytest.junitxml.record_property:6 of
msgid "The fixture is callable with ``name, value``. The value is automatically XML-encoded."
msgstr ""

#: ../../reference/reference.rst:520
msgid "record_testsuite_property"
msgstr ""

#: ../../reference/reference.rst:522
msgid "**Tutorial**: :ref:`record_testsuite_property example`"
msgstr ""

#: _pytest.junitxml.record_testsuite_property:1 of
msgid "Record a new ``<property>`` tag as child of the root ``<testsuite>``."
msgstr ""

#: _pytest.junitxml.record_testsuite_property:3 of
msgid "This is suitable to writing global information regarding the entire test suite, and is compatible with ``xunit2`` JUnit family."
msgstr ""

#: _pytest.junitxml.record_testsuite_property:6 of
msgid "This is a ``session``-scoped fixture which is called with ``(name, value)``. Example:"
msgstr ""

#: _pytest.junitxml.record_testsuite_property:14 of
msgid "The property name."
msgstr ""

#: _pytest.junitxml.record_testsuite_property:16 of
msgid "The property value. Will be converted to a string."
msgstr ""

#: _pytest.junitxml.record_testsuite_property:21 of
msgid "Currently this fixture **does not work** with the `pytest-xdist <https://github.com/pytest-dev/pytest-xdist>`__ plugin. See :issue:`7767` for details."
msgstr ""

#: ../../reference/reference.rst:530
msgid "recwarn"
msgstr ""

#: ../../reference/reference.rst:532
msgid "**Tutorial**: :ref:`recwarn`"
msgstr ""

#: _pytest.recwarn.recwarn:1 of
msgid "Return a :class:`WarningsRecorder` instance that records all warnings emitted by test functions."
msgstr ""

#: _pytest.recwarn.recwarn:3 of
msgid "See :ref:`warnings` for information on warning categories."
msgstr ""

#: _pytest.recwarn.WarningsRecorder:1 of
msgid "A context manager to record raised warnings."
msgstr ""

#: _pytest.recwarn.WarningsRecorder:3 of
msgid "Each recorded warning is an instance of :class:`warnings.WarningMessage`."
msgstr ""

#: _pytest.recwarn.WarningsRecorder:5 of
msgid "Adapted from `warnings.catch_warnings`."
msgstr ""

#: _pytest.recwarn.WarningsRecorder:8 of
msgid "``DeprecationWarning`` and ``PendingDeprecationWarning`` are treated differently; see :ref:`ensuring_function_triggers`."
msgstr ""

#: of pytest.WarningsRecorder.list:1
msgid "The list of recorded warnings."
msgstr ""

#: _pytest.recwarn.WarningsRecorder.__getitem__:1 of
msgid "Get a recorded warning by index."
msgstr ""

#: _pytest.recwarn.WarningsRecorder.__iter__:1 of
msgid "Iterate through the recorded warnings."
msgstr ""

#: _pytest.recwarn.WarningsRecorder.__len__:1 of
msgid "The number of recorded warnings."
msgstr ""

#: _pytest.recwarn.WarningsRecorder.pop:1 of
msgid "Pop the first recorded warning which is an instance of ``cls``, but not an instance of a child class of any other match. Raises ``AssertionError`` if there is no match."
msgstr ""

#: _pytest.recwarn.WarningsRecorder.clear:1 of
msgid "Clear the list of recorded warnings."
msgstr ""

#: ../../reference/reference.rst:545
msgid "request"
msgstr ""

#: ../../reference/reference.rst:547
msgid "**Example**: :ref:`request example`"
msgstr ""

#: ../../reference/reference.rst:549
msgid "The ``request`` fixture is a special fixture providing information of the requesting test function."
msgstr ""

#: _pytest.fixtures.FixtureRequest:1 of
msgid "The type of the ``request`` fixture."
msgstr ""

#: _pytest.fixtures.FixtureRequest:3 of
msgid "A request object gives access to the requesting test context and has a ``param`` attribute in case the fixture is parametrized."
msgstr ""

#: ../../../../docstring of pytest.FixtureRequest.fixturename:1
msgid "Fixture for which this request is being performed."
msgstr ""

#: of pytest.FixtureDef.scope:1 pytest.FixtureRequest.scope:1
msgid "Scope string, one of \"function\", \"class\", \"module\", \"package\", \"session\"."
msgstr ""

#: of pytest.FixtureRequest.fixturenames:1
msgid "Names of all active fixtures in this request."
msgstr ""

#: of pytest.FixtureRequest.node:1
msgid "Underlying collection node (depends on current request scope)."
msgstr ""

#: of pytest.FixtureRequest.config:1
msgid "The pytest config object associated with this request."
msgstr ""

#: of pytest.FixtureRequest.function:1
msgid "Test function object if the request has a per-function scope."
msgstr ""

#: of pytest.FixtureRequest.cls:1
msgid "Class (can be None) where the test function was collected."
msgstr ""

#: of pytest.FixtureRequest.instance:1
msgid "Instance (can be None) on which test function was collected."
msgstr ""

#: of pytest.FixtureRequest.module:1
msgid "Python module object where the test function was collected."
msgstr ""

#: of pytest.FixtureRequest.path:1
msgid "Path where the test function was collected."
msgstr ""

#: of pytest.FixtureRequest.keywords:1
msgid "Keywords/markers dictionary for the underlying node."
msgstr ""

#: of pytest.FixtureRequest.session:1
msgid "Pytest session object."
msgstr ""

#: _pytest.fixtures.FixtureRequest.addfinalizer:1 of
msgid "Add finalizer/teardown function to be called without arguments after the last test within the requesting test context finished execution."
msgstr ""

#: _pytest.fixtures.FixtureRequest.applymarker:1 of
msgid "Apply a marker to a single test function invocation."
msgstr ""

#: _pytest.fixtures.FixtureRequest.applymarker:3 of
msgid "This method is useful if you don't want to have a keyword/marker on all function invocations."
msgstr ""

#: _pytest.fixtures.FixtureRequest.applymarker:6 of
msgid "An object created by a call to ``pytest.mark.NAME(...)``."
msgstr ""

#: _pytest.fixtures.FixtureRequest.raiseerror:1 of
msgid "Raise a FixtureLookupError exception."
msgstr ""

#: _pytest.fixtures.FixtureRequest.raiseerror:3 of
msgid "An optional custom error message."
msgstr ""

#: _pytest.fixtures.FixtureRequest.getfixturevalue:1 of
msgid "Dynamically run a named fixture function."
msgstr ""

#: _pytest.fixtures.FixtureRequest.getfixturevalue:3 of
msgid "Declaring fixtures via function argument is recommended where possible. But if you can only decide whether to use another fixture at test setup time, you may use this function to retrieve it inside a fixture or test function body."
msgstr ""

#: _pytest.fixtures.FixtureRequest.getfixturevalue:8 of
msgid "This method can be used during the test setup phase or the test run phase, but during the test teardown phase a fixture's value may not be available."
msgstr ""

#: _pytest.fixtures.FixtureRequest.getfixturevalue:12 of
msgid "The fixture name."
msgstr ""

#: _pytest.fixtures.FixtureRequest.getfixturevalue:14 of
msgid "If the given fixture could not be found."
msgstr ""

#: ../../reference/reference.rst:558
msgid "testdir"
msgstr ""

#: ../../reference/reference.rst:560
msgid "Identical to :fixture:`pytester`, but provides an instance whose methods return legacy ``py.path.local`` objects instead when applicable."
msgstr ""

#: ../../reference/reference.rst:563
msgid "New code should avoid using :fixture:`testdir` in favor of :fixture:`pytester`."
msgstr ""

#: _pytest.legacypath.Testdir:1 of
msgid "Similar to :class:`Pytester`, but this class works with legacy legacy_path objects instead."
msgstr ""

#: _pytest.legacypath.Testdir:3 of
msgid "All methods just forward to an internal :class:`Pytester` instance, converting results to `legacy_path` objects as necessary."
msgstr ""

#: of pytest.Testdir.tmpdir:1
msgid "Temporary directory where tests are executed."
msgstr ""

#: _pytest.legacypath.Testdir.make_hook_recorder:1 of
msgid "See :meth:`Pytester.make_hook_recorder`."
msgstr ""

#: _pytest.legacypath.Testdir.chdir:1 of
msgid "See :meth:`Pytester.chdir`."
msgstr ""

#: _pytest.legacypath.Testdir.makefile:1 of
msgid "See :meth:`Pytester.makefile`."
msgstr ""

#: _pytest.legacypath.Testdir.makeconftest:1 of
msgid "See :meth:`Pytester.makeconftest`."
msgstr ""

#: _pytest.legacypath.Testdir.makeini:1 of
msgid "See :meth:`Pytester.makeini`."
msgstr ""

#: _pytest.legacypath.Testdir.getinicfg:1 of
msgid "See :meth:`Pytester.getinicfg`."
msgstr ""

#: _pytest.legacypath.Testdir.makepyprojecttoml:1 of
msgid "See :meth:`Pytester.makepyprojecttoml`."
msgstr ""

#: _pytest.legacypath.Testdir.makepyfile:1 of
msgid "See :meth:`Pytester.makepyfile`."
msgstr ""

#: _pytest.legacypath.Testdir.maketxtfile:1 of
msgid "See :meth:`Pytester.maketxtfile`."
msgstr ""

#: _pytest.legacypath.Testdir.syspathinsert:1 of
msgid "See :meth:`Pytester.syspathinsert`."
msgstr ""

#: _pytest.legacypath.Testdir.mkdir:1 of
msgid "See :meth:`Pytester.mkdir`."
msgstr ""

#: _pytest.legacypath.Testdir.mkpydir:1 of
msgid "See :meth:`Pytester.mkpydir`."
msgstr ""

#: _pytest.legacypath.Testdir.copy_example:1 of
msgid "See :meth:`Pytester.copy_example`."
msgstr ""

#: _pytest.legacypath.Testdir.getnode:1 of
msgid "See :meth:`Pytester.getnode`."
msgstr ""

#: _pytest.legacypath.Testdir.getpathnode:1 of
msgid "See :meth:`Pytester.getpathnode`."
msgstr ""

#: _pytest.legacypath.Testdir.genitems:1 of
msgid "See :meth:`Pytester.genitems`."
msgstr ""

#: _pytest.legacypath.Testdir.runitem:1 of
msgid "See :meth:`Pytester.runitem`."
msgstr ""

#: _pytest.legacypath.Testdir.inline_runsource:1 of
msgid "See :meth:`Pytester.inline_runsource`."
msgstr ""

#: _pytest.legacypath.Testdir.inline_genitems:1 of
msgid "See :meth:`Pytester.inline_genitems`."
msgstr ""

#: _pytest.legacypath.Testdir.inline_run:1 of
msgid "See :meth:`Pytester.inline_run`."
msgstr ""

#: _pytest.legacypath.Testdir.runpytest_inprocess:1 of
msgid "See :meth:`Pytester.runpytest_inprocess`."
msgstr ""

#: _pytest.legacypath.Testdir.runpytest:1 of
msgid "See :meth:`Pytester.runpytest`."
msgstr ""

#: _pytest.legacypath.Testdir.parseconfig:1 of
msgid "See :meth:`Pytester.parseconfig`."
msgstr ""

#: _pytest.legacypath.Testdir.parseconfigure:1 of
msgid "See :meth:`Pytester.parseconfigure`."
msgstr ""

#: _pytest.legacypath.Testdir.getitem:1 of
msgid "See :meth:`Pytester.getitem`."
msgstr ""

#: _pytest.legacypath.Testdir.getitems:1 of
msgid "See :meth:`Pytester.getitems`."
msgstr ""

#: _pytest.legacypath.Testdir.getmodulecol:1 of
msgid "See :meth:`Pytester.getmodulecol`."
msgstr ""

#: _pytest.legacypath.Testdir.collect_by_name:1 of
msgid "See :meth:`Pytester.collect_by_name`."
msgstr ""

#: _pytest.legacypath.Testdir.popen:1 of
msgid "See :meth:`Pytester.popen`."
msgstr ""

#: _pytest.legacypath.Testdir.run:1 of
msgid "See :meth:`Pytester.run`."
msgstr ""

#: _pytest.legacypath.Testdir.runpython:1 of
msgid "See :meth:`Pytester.runpython`."
msgstr ""

#: _pytest.legacypath.Testdir.runpython_c:1 of
msgid "See :meth:`Pytester.runpython_c`."
msgstr ""

#: _pytest.legacypath.Testdir.runpytest_subprocess:1 of
msgid "See :meth:`Pytester.runpytest_subprocess`."
msgstr ""

#: _pytest.legacypath.Testdir.spawn_pytest:1 of
msgid "See :meth:`Pytester.spawn_pytest`."
msgstr ""

#: _pytest.legacypath.Testdir.spawn:1 of
msgid "See :meth:`Pytester.spawn`."
msgstr ""

#: ../../reference/reference.rst:573
msgid "tmp_path"
msgstr ""

#: ../../reference/reference.rst:575
msgid "**Tutorial**: :ref:`tmp_path`"
msgstr ""

#: _pytest.tmpdir.tmp_path:1 of
msgid "Return a temporary directory (as :class:`pathlib.Path` object) which is unique to each test function invocation. The temporary directory is created as a subdirectory of the base temporary directory, with configurable retention, as discussed in :ref:`temporary directory location and retention`."
msgstr ""

#: ../../reference/reference.rst:584
msgid "tmp_path_factory"
msgstr ""

#: ../../reference/reference.rst:586
msgid "**Tutorial**: :ref:`tmp_path_factory example`"
msgstr ""

#: ../../reference/reference.rst:590
msgid "``tmp_path_factory`` is an instance of :class:`~pytest.TempPathFactory`:"
msgstr ""

#: _pytest.tmpdir.TempPathFactory:1 of
msgid "Factory for temporary directories under the common base temp directory, as discussed at :ref:`temporary directory location and retention`."
msgstr ""

#: _pytest.tmpdir.TempPathFactory.mktemp:1 of
msgid "Create a new temporary directory managed by the factory."
msgstr ""

#: _pytest.tmpdir.TempPathFactory.mktemp:3 of
msgid "Directory base name, must be a relative path."
msgstr ""

#: _pytest.tmpdir.TempPathFactory.mktemp:6 of
msgid "If ``True``, ensure the directory is unique by adding a numbered suffix greater than any existing one: ``basename=\"foo-\"`` and ``numbered=True`` means that this function will create directories named ``\"foo-0\"``, ``\"foo-1\"``, ``\"foo-2\"`` and so on."
msgstr ""

#: _pytest.tmpdir.TempPathFactory.mktemp:12 of
msgid "The path to the new directory."
msgstr ""

#: _pytest.tmpdir.TempPathFactory.getbasetemp:1 of
msgid "Return the base temporary directory, creating it if needed."
msgstr ""

#: _pytest.tmpdir.TempPathFactory.getbasetemp:3 of
msgid "The base temporary directory."
msgstr ""

#: ../../reference/reference.rst:599
msgid "tmpdir"
msgstr ""

#: ../../reference/reference.rst:601 ../../reference/reference.rst:612
msgid "**Tutorial**: :ref:`tmpdir and tmpdir_factory`"
msgstr ""

#: _pytest.legacypath.LegacyTmpdirPlugin.tmpdir:1 of
msgid "Return a temporary directory (as `legacy_path`_ object) which is unique to each test function invocation. The temporary directory is created as a subdirectory of the base temporary directory, with configurable retention, as discussed in :ref:`temporary directory location and retention`."
msgstr ""

#: _pytest.legacypath.LegacyTmpdirPlugin.tmpdir:8 of
msgid "These days, it is preferred to use ``tmp_path``."
msgstr ""

#: _pytest.legacypath.LegacyTmpdirPlugin.tmpdir:10
#: _pytest.legacypath.TempdirFactory:7 of
msgid ":ref:`About the tmpdir and tmpdir_factory fixtures<tmpdir and tmpdir_factory>`."
msgstr ""

#: ../../reference/reference.rst:610
msgid "tmpdir_factory"
msgstr ""

#: ../../reference/reference.rst:614
msgid "``tmpdir_factory`` is an instance of :class:`~pytest.TempdirFactory`:"
msgstr ""

#: _pytest.legacypath.TempdirFactory:1 of
msgid "Backward compatibility wrapper that implements ``py.path.local`` for :class:`TempPathFactory`."
msgstr ""

#: _pytest.legacypath.TempdirFactory:5 of
msgid "These days, it is preferred to use ``tmp_path_factory``."
msgstr ""

#: _pytest.legacypath.TempdirFactory.mktemp:1 of
msgid "Same as :meth:`TempPathFactory.mktemp`, but returns a ``py.path.local`` object."
msgstr ""

#: _pytest.legacypath.TempdirFactory.getbasetemp:1 of
msgid "Same as :meth:`TempPathFactory.getbasetemp`, but returns a ``py.path.local`` object."
msgstr ""

#: ../../reference/reference.rst:623
msgid "Hooks"
msgstr ""

#: ../../reference/reference.rst:625
msgid "**Tutorial**: :ref:`writing-plugins`"
msgstr ""

#: ../../reference/reference.rst:627
msgid "Reference to all hooks which can be implemented by :ref:`conftest.py files <localplugin>` and :ref:`plugins <plugins>`."
msgstr ""

#: ../../reference/reference.rst:630
msgid "@pytest.hookimpl"
msgstr ""

#: ../../reference/reference.rst:635
msgid "pytest's decorator for marking functions as hook implementations."
msgstr ""

#: ../../reference/reference.rst:637
msgid "See :ref:`writinghooks` and :func:`pluggy.HookimplMarker`."
msgstr ""

#: ../../reference/reference.rst:640
msgid "@pytest.hookspec"
msgstr ""

#: ../../reference/reference.rst:645
msgid "pytest's decorator for marking functions as hook specifications."
msgstr ""

#: ../../reference/reference.rst:647
msgid "See :ref:`declaringhooks` and :func:`pluggy.HookspecMarker`."
msgstr ""

#: ../../reference/reference.rst:652
msgid "Bootstrapping hooks"
msgstr ""

#: ../../reference/reference.rst:654
msgid "Bootstrapping hooks called for plugins registered early enough (internal and third-party plugins)."
msgstr ""

#: _pytest.hookspec.pytest_load_initial_conftests:1 of
msgid "Called to implement the loading of :ref:`initial conftest files <pluginorder>` ahead of command line option parsing."
msgstr ""

#: ../../../../docstring _pytest.hookspec.pytest_assertrepr_compare:8
#: _pytest.hookspec.pytest_cmdline_main:8
#: _pytest.hookspec.pytest_collection_modifyitems:10
#: _pytest.hookspec.pytest_configure:6 _pytest.hookspec.pytest_enter_pdb:6
#: _pytest.hookspec.pytest_ignore_collect:16
#: _pytest.hookspec.pytest_leave_pdb:6
#: _pytest.hookspec.pytest_load_initial_conftests:4
#: _pytest.hookspec.pytest_make_parametrize_id:9
#: _pytest.hookspec.pytest_markeval_namespace:11
#: _pytest.hookspec.pytest_report_collectionfinish:8
#: _pytest.hookspec.pytest_report_from_serializable:4
#: _pytest.hookspec.pytest_report_header:3
#: _pytest.hookspec.pytest_report_teststatus:18
#: _pytest.hookspec.pytest_report_to_serializable:4
#: _pytest.hookspec.pytest_terminal_summary:5
#: _pytest.hookspec.pytest_unconfigure:3 _pytest.nodes.FSCollector.config:1
#: _pytest.nodes.Node.config:1 _pytest.python.FunctionDefinition.config:1 of
#: pytest.Class.config:1 pytest.Collector.config:1 pytest.Dir.config:1
#: pytest.Directory.config:1 pytest.File.config:1 pytest.Function.config:1
#: pytest.Item.config:1 pytest.Module.config:1 pytest.Package.config:1
#: pytest.Session.config:1
msgid "The pytest config object."
msgstr ""

#: _pytest.hookspec.pytest_load_initial_conftests:5 of
msgid "Arguments passed on the command line."
msgstr ""

#: _pytest.hookspec.pytest_load_initial_conftests:6 of
msgid "To add command line options."
msgstr ""

#: _pytest.hookspec.pytest_addhooks:10 _pytest.hookspec.pytest_addoption:31
#: _pytest.hookspec.pytest_assertion_pass:27
#: _pytest.hookspec.pytest_assertrepr_compare:14
#: _pytest.hookspec.pytest_cmdline_main:12
#: _pytest.hookspec.pytest_cmdline_parse:15
#: _pytest.hookspec.pytest_collect_directory:20
#: _pytest.hookspec.pytest_collect_file:18
#: _pytest.hookspec.pytest_collection:35
#: _pytest.hookspec.pytest_collection_finish:6
#: _pytest.hookspec.pytest_collection_modifyitems:14
#: _pytest.hookspec.pytest_collectreport:7
#: _pytest.hookspec.pytest_collectstart:7 _pytest.hookspec.pytest_configure:9
#: _pytest.hookspec.pytest_deselected:15 _pytest.hookspec.pytest_enter_pdb:10
#: _pytest.hookspec.pytest_exception_interact:21
#: _pytest.hookspec.pytest_fixture_post_finalizer:11
#: _pytest.hookspec.pytest_fixture_setup:18
#: _pytest.hookspec.pytest_generate_tests:7
#: _pytest.hookspec.pytest_ignore_collect:24
#: _pytest.hookspec.pytest_internalerror:10
#: _pytest.hookspec.pytest_itemcollected:7
#: _pytest.hookspec.pytest_keyboard_interrupt:6
#: _pytest.hookspec.pytest_leave_pdb:10
#: _pytest.hookspec.pytest_load_initial_conftests:9
#: _pytest.hookspec.pytest_make_collect_report:10
#: _pytest.hookspec.pytest_make_parametrize_id:14
#: _pytest.hookspec.pytest_markeval_namespace:15
#: _pytest.hookspec.pytest_plugin_registered:11
#: _pytest.hookspec.pytest_pycollect_makeitem:15
#: _pytest.hookspec.pytest_pycollect_makemodule:20
#: _pytest.hookspec.pytest_pyfunc_call:9
#: _pytest.hookspec.pytest_report_collectionfinish:27
#: _pytest.hookspec.pytest_report_from_serializable:7
#: _pytest.hookspec.pytest_report_header:21
#: _pytest.hookspec.pytest_report_teststatus:24
#: _pytest.hookspec.pytest_report_to_serializable:8
#: _pytest.hookspec.pytest_runtest_call:9
#: _pytest.hookspec.pytest_runtest_logfinish:11
#: _pytest.hookspec.pytest_runtest_logreport:7
#: _pytest.hookspec.pytest_runtest_logstart:11
#: _pytest.hookspec.pytest_runtest_makereport:12
#: _pytest.hookspec.pytest_runtest_protocol:34
#: _pytest.hookspec.pytest_runtest_setup:12
#: _pytest.hookspec.pytest_runtest_teardown:17
#: _pytest.hookspec.pytest_runtestloop:19
#: _pytest.hookspec.pytest_sessionfinish:7
#: _pytest.hookspec.pytest_sessionstart:7
#: _pytest.hookspec.pytest_terminal_summary:11
#: _pytest.hookspec.pytest_unconfigure:6
#: _pytest.hookspec.pytest_warning_recorded:26 of
msgid "Use in conftest plugins"
msgstr ""

#: _pytest.hookspec.pytest_cmdline_parse:17
#: _pytest.hookspec.pytest_load_initial_conftests:11 of
msgid "This hook is not called for conftest files."
msgstr ""

#: _pytest.hookspec.pytest_cmdline_parse:1 of
msgid "Return an initialized :class:`~pytest.Config`, parsing the specified args."
msgstr ""

#: _pytest.hookspec.pytest_cmdline_main:6
#: _pytest.hookspec.pytest_cmdline_parse:3
#: _pytest.hookspec.pytest_collect_directory:11
#: _pytest.hookspec.pytest_fixture_setup:10
#: _pytest.hookspec.pytest_ignore_collect:11
#: _pytest.hookspec.pytest_make_collect_report:4
#: _pytest.hookspec.pytest_make_parametrize_id:7
#: _pytest.hookspec.pytest_pycollect_makeitem:3
#: _pytest.hookspec.pytest_pycollect_makemodule:7
#: _pytest.hookspec.pytest_pyfunc_call:3
#: _pytest.hookspec.pytest_report_teststatus:21
#: _pytest.hookspec.pytest_runtest_makereport:9 of
msgid "Stops at first non-None result, see :ref:`firstresult`."
msgstr ""

#: _pytest.hookspec.pytest_cmdline_parse:6 of
msgid "This hook is only called for plugin classes passed to the ``plugins`` arg when using `pytest.main`_ to perform an in-process test run."
msgstr ""

#: _pytest.hookspec.pytest_addhooks:4 _pytest.hookspec.pytest_cmdline_parse:10
#: _pytest.hookspec.pytest_plugin_registered:5 of
msgid "The pytest plugin manager."
msgstr ""

#: _pytest.hookspec.pytest_cmdline_parse:11 of
msgid "List of arguments passed on the command line."
msgstr ""

#: _pytest.hookspec.pytest_cmdline_parse:12 of
msgid "A pytest config object."
msgstr ""

#: _pytest.hookspec.pytest_cmdline_main:1 of
msgid "Called for performing the main command line action."
msgstr ""

#: _pytest.hookspec.pytest_cmdline_main:3 of
msgid "The default implementation will invoke the configure hooks and :hook:`pytest_runtestloop`."
msgstr ""

#: _pytest.hookspec.pytest_cmdline_main:9 of
msgid "The exit code."
msgstr ""

#: _pytest.hookspec.pytest_addoption:36 _pytest.hookspec.pytest_cmdline_main:14
#: _pytest.hookspec.pytest_collection:37
#: _pytest.hookspec.pytest_report_header:23
#: _pytest.hookspec.pytest_sessionstart:9 of
msgid "This hook is only called for :ref:`initial conftests <pluginorder>`."
msgstr ""

#: ../../reference/reference.rst:666
msgid "Initialization hooks"
msgstr ""

#: ../../reference/reference.rst:668
msgid "Initialization hooks called for plugins and ``conftest.py`` files."
msgstr ""

#: _pytest.hookspec.pytest_addoption:1 of
msgid "Register argparse-style options and ini-style config values, called once at the beginning of a test run."
msgstr ""

#: _pytest.hookspec.pytest_addoption:4 of
msgid "To add command line options, call :py:func:`parser.addoption(...) <pytest.Parser.addoption>`. To add ini-file values call :py:func:`parser.addini(...) <pytest.Parser.addini>`."
msgstr ""

#: _pytest.hookspec.pytest_addoption:10 of
msgid "The pytest plugin manager, which can be used to install :py:func:`~pytest.hookspec`'s or :py:func:`~pytest.hookimpl`'s and allow one plugin to call another plugin's hooks to change how command line options are added."
msgstr ""

#: _pytest.hookspec.pytest_addoption:15 of
msgid "Options can later be accessed through the :py:class:`config <pytest.Config>` object, respectively:"
msgstr ""

#: _pytest.hookspec.pytest_addoption:18 of
msgid ":py:func:`config.getoption(name) <pytest.Config.getoption>` to retrieve the value of a command line option."
msgstr ""

#: _pytest.hookspec.pytest_addoption:21 of
msgid ":py:func:`config.getini(name) <pytest.Config.getini>` to retrieve a value read from an ini-style file."
msgstr ""

#: _pytest.hookspec.pytest_addoption:24 of
msgid "The config object is passed around on many internal objects via the ``.config`` attribute or can be retrieved as the ``pytestconfig`` fixture."
msgstr ""

#: _pytest.hookspec.pytest_addhooks:7 _pytest.hookspec.pytest_addoption:28
#: _pytest.hookspec.pytest_configure:4
#: _pytest.hookspec.pytest_plugin_registered:8 of
msgid "This hook is incompatible with hook wrappers."
msgstr ""

#: _pytest.hookspec.pytest_addhooks:12 _pytest.hookspec.pytest_addoption:33 of
msgid "If a conftest plugin implements this hook, it will be called immediately when the conftest is registered."
msgstr ""

#: _pytest.hookspec.pytest_addhooks:1 of
msgid "Called at plugin registration time to allow adding new hooks via a call to :func:`pluginmanager.add_hookspecs(module_or_class, prefix) <pytest.PytestPluginManager.add_hookspecs>`."
msgstr ""

#: _pytest.hookspec.pytest_configure:1 of
msgid "Allow plugins and conftest files to perform initial configuration."
msgstr ""

#: _pytest.hookspec.pytest_configure:11 of
msgid "This hook is called for every :ref:`initial conftest <pluginorder>` file after command line options have been parsed. After that, the hook is called for other conftest files as they are registered."
msgstr ""

#: _pytest.hookspec.pytest_unconfigure:1 of
msgid "Called before test process is exited."
msgstr ""

#: _pytest.hookspec.pytest_deselected:17
#: _pytest.hookspec.pytest_make_parametrize_id:16
#: _pytest.hookspec.pytest_runtest_protocol:36
#: _pytest.hookspec.pytest_runtestloop:21
#: _pytest.hookspec.pytest_sessionfinish:9
#: _pytest.hookspec.pytest_unconfigure:8 of
msgid "Any conftest file can implement this hook."
msgstr ""

#: _pytest.hookspec.pytest_sessionstart:1 of
msgid "Called after the ``Session`` object has been created and before performing collection and entering the run test loop."
msgstr ""

#: _pytest.hookspec.pytest_collection:32
#: _pytest.hookspec.pytest_collection_finish:3
#: _pytest.hookspec.pytest_collection_modifyitems:9
#: _pytest.hookspec.pytest_runtestloop:13
#: _pytest.hookspec.pytest_sessionfinish:3
#: _pytest.hookspec.pytest_sessionstart:4 of
msgid "The pytest session object."
msgstr ""

#: _pytest.hookspec.pytest_sessionfinish:1 of
msgid "Called after whole test run finished, right before returning the exit status to the system."
msgstr ""

#: _pytest.hookspec.pytest_sessionfinish:4 of
msgid "The status which pytest will return to the system."
msgstr ""

#: _pytest.hookspec.pytest_plugin_registered:1 of
msgid "A new pytest plugin got registered."
msgstr ""

#: _pytest.hookspec.pytest_plugin_registered:3 of
msgid "The plugin module or instance."
msgstr ""

#: _pytest.hookspec.pytest_plugin_registered:4 of
msgid "The name by which the plugin is registered."
msgstr ""

#: _pytest.hookspec.pytest_plugin_registered:13 of
msgid "If a conftest plugin implements this hook, it will be called immediately when the conftest is registered, once for each plugin registered thus far (including itself!), and for all plugins thereafter when they are registered."
msgstr ""

#: ../../reference/reference.rst:687
msgid "Collection hooks"
msgstr ""

#: ../../reference/reference.rst:689
msgid "``pytest`` calls the following hooks for collecting files and directories:"
msgstr ""

#: _pytest.hookspec.pytest_collection:1 of
msgid "Perform the collection phase for the given session."
msgstr ""

#: _pytest.hookspec.pytest_collection:3
#: _pytest.hookspec.pytest_runtest_protocol:30
#: _pytest.hookspec.pytest_runtestloop:15 of
msgid "Stops at first non-None result, see :ref:`firstresult`. The return value is not used, but only stops further processing."
msgstr ""

#: _pytest.hookspec.pytest_collection:6 of
msgid "The default collection phase is this (see individual hooks for full details):"
msgstr ""

#: _pytest.hookspec.pytest_collection:8 of
msgid "Starting from ``session`` as the initial collector:"
msgstr ""

#: _pytest.hookspec.pytest_collection:10 of
msgid "``pytest_collectstart(collector)``"
msgstr ""

#: _pytest.hookspec.pytest_collection:11 of
msgid "``report = pytest_make_collect_report(collector)``"
msgstr ""

#: _pytest.hookspec.pytest_collection:12 of
msgid "``pytest_exception_interact(collector, call, report)`` if an interactive exception occurred"
msgstr ""

#: _pytest.hookspec.pytest_collection:13 of
msgid "For each collected node:"
msgstr ""

#: _pytest.hookspec.pytest_collection:15 of
msgid "If an item, ``pytest_itemcollected(item)``"
msgstr ""

#: _pytest.hookspec.pytest_collection:16 of
msgid "If a collector, recurse into it."
msgstr ""

#: _pytest.hookspec.pytest_collection:18 of
msgid "``pytest_collectreport(report)``"
msgstr ""

#: _pytest.hookspec.pytest_collection:20 of
msgid "``pytest_collection_modifyitems(session, config, items)``"
msgstr ""

#: _pytest.hookspec.pytest_collection:22 of
msgid "``pytest_deselected(items)`` for any deselected items (may be called multiple times)"
msgstr ""

#: _pytest.hookspec.pytest_collection:24 of
msgid "``pytest_collection_finish(session)``"
msgstr ""

#: _pytest.hookspec.pytest_collection:25 of
msgid "Set ``session.items`` to the list of collected items"
msgstr ""

#: _pytest.hookspec.pytest_collection:26 of
msgid "Set ``session.testscollected`` to the number of collected items"
msgstr ""

#: _pytest.hookspec.pytest_collection:28 of
msgid "You can implement this hook to only perform some action before collection, for example the terminal plugin uses it to start displaying the collection counter (and returns `None`)."
msgstr ""

#: _pytest.hookspec.pytest_ignore_collect:1 of
msgid "Return ``True`` to ignore this path for collection."
msgstr ""

#: _pytest.hookspec.pytest_ignore_collect:3 of
msgid "Return ``None`` to let other plugins ignore the path for collection."
msgstr ""

#: _pytest.hookspec.pytest_ignore_collect:5 of
msgid "Returning ``False`` will forcefully *not* ignore this path for collection, without giving a chance for other plugins to ignore this path."
msgstr ""

#: _pytest.hookspec.pytest_ignore_collect:8 of
msgid "This hook is consulted for all files and directories prior to calling more specific hooks."
msgstr ""

#: _pytest.hookspec.pytest_collect_directory:13
#: _pytest.hookspec.pytest_collect_file:8
#: _pytest.hookspec.pytest_ignore_collect:13 of
msgid "The path to analyze."
msgstr ""

#: _pytest.hookspec.pytest_ignore_collect:15 of
msgid "The path to analyze (deprecated)."
msgstr ""

#: _pytest.hookspec.pytest_ignore_collect:18 of
msgid "The ``collection_path`` parameter was added as a :class:`pathlib.Path` equivalent of the ``path`` parameter. The ``path`` parameter has been deprecated."
msgstr ""

#: _pytest.hookspec.pytest_ignore_collect:26 of
msgid "Any conftest file can implement this hook. For a given collection path, only conftest files in parent directories of the collection path are consulted (if the path is a directory, its own conftest file is *not* consulted - a directory cannot ignore itself!)."
msgstr ""

#: _pytest.hookspec.pytest_collect_directory:1 of
msgid "Create a :class:`~pytest.Collector` for the given directory, or None if not relevant."
msgstr ""

#: _pytest.hookspec.pytest_collect_directory:6 of
msgid "For best results, the returned collector should be a subclass of :class:`~pytest.Directory`, but this is not required."
msgstr ""

#: _pytest.hookspec.pytest_collect_directory:9
#: _pytest.hookspec.pytest_collect_file:6 of
msgid "The new node needs to have the specified ``parent`` as a parent."
msgstr ""

#: _pytest.hookspec.pytest_collect_directory:16 of
msgid "See :ref:`custom directory collectors` for a simple example of use of this hook."
msgstr ""

#: _pytest.hookspec.pytest_collect_directory:22 of
msgid "Any conftest file can implement this hook. For a given collection path, only conftest files in parent directories of the collection path are consulted (if the path is a directory, its own conftest file is *not* consulted - a directory cannot collect itself!)."
msgstr ""

#: _pytest.hookspec.pytest_collect_file:1 of
msgid "Create a :class:`~pytest.Collector` for the given path, or None if not relevant."
msgstr ""

#: _pytest.hookspec.pytest_collect_file:3 of
msgid "For best results, the returned collector should be a subclass of :class:`~pytest.File`, but this is not required."
msgstr ""

#: _pytest.hookspec.pytest_collect_file:10 of
msgid "The path to collect (deprecated)."
msgstr ""

#: _pytest.hookspec.pytest_collect_file:12 of
msgid "The ``file_path`` parameter was added as a :class:`pathlib.Path` equivalent of the ``path`` parameter. The ``path`` parameter has been deprecated."
msgstr ""

#: _pytest.hookspec.pytest_collect_file:20 of
msgid "Any conftest file can implement this hook. For a given file path, only conftest files in parent directories of the file path are consulted."
msgstr ""

#: _pytest.hookspec.pytest_pycollect_makemodule:1 of
msgid "Return a :class:`pytest.Module` collector or None for the given path."
msgstr ""

#: _pytest.hookspec.pytest_pycollect_makemodule:3 of
msgid "This hook will be called for each matching test module path. The :hook:`pytest_collect_file` hook needs to be used if you want to create test modules for files that do not match as a test module."
msgstr ""

#: _pytest.hookspec.pytest_pycollect_makemodule:9 of
msgid "The path of the module to collect."
msgstr ""

#: _pytest.hookspec.pytest_pycollect_makemodule:11 of
msgid "The path of the module to collect (deprecated)."
msgstr ""

#: _pytest.hookspec.pytest_pycollect_makemodule:13 of
msgid "The ``module_path`` parameter was added as a :class:`pathlib.Path` equivalent of the ``path`` parameter."
msgstr ""

#: _pytest.hookspec.pytest_pycollect_makemodule:17 of
msgid "The ``path`` parameter has been deprecated in favor of ``fspath``."
msgstr ""

#: _pytest.hookspec.pytest_pycollect_makemodule:22 of
msgid "Any conftest file can implement this hook. For a given parent collector, only conftest files in the collector's directory and its parent directories are consulted."
msgstr ""

#: ../../reference/reference.rst:702
msgid "For influencing the collection of objects in Python modules you can use the following hook:"
msgstr ""

#: _pytest.hookspec.pytest_pycollect_makeitem:1 of
msgid "Return a custom item/collector for a Python object in a module, or None."
msgstr ""

#: _pytest.hookspec.pytest_pycollect_makeitem:5 of
msgid "The module/class collector."
msgstr ""

#: _pytest.hookspec.pytest_pycollect_makeitem:7 of
msgid "The name of the object in the module/class."
msgstr ""

#: _pytest.hookspec.pytest_pycollect_makeitem:9 of
msgid "The object."
msgstr ""

#: _pytest.hookspec.pytest_pycollect_makeitem:11 of
msgid "The created items/collectors."
msgstr ""

#: _pytest.hookspec.pytest_collectreport:9
#: _pytest.hookspec.pytest_collectstart:9
#: _pytest.hookspec.pytest_make_collect_report:12
#: _pytest.hookspec.pytest_pycollect_makeitem:17 of
msgid "Any conftest file can implement this hook. For a given collector, only conftest files in the collector's directory and its parent directories are consulted."
msgstr ""

#: _pytest.hookspec.pytest_generate_tests:1 of
msgid "Generate (multiple) parametrized calls to a test function."
msgstr ""

#: _pytest.hookspec.pytest_generate_tests:3 of
msgid "The :class:`~pytest.Metafunc` helper for the test function."
msgstr ""

#: _pytest.hookspec.pytest_generate_tests:9 of
msgid "Any conftest file can implement this hook. For a given function definition, only conftest files in the functions's directory and its parent directories are consulted."
msgstr ""

#: _pytest.hookspec.pytest_make_parametrize_id:1 of
msgid "Return a user-friendly string representation of the given ``val`` that will be used by @pytest.mark.parametrize calls, or None if the hook doesn't know about ``val``."
msgstr ""

#: _pytest.hookspec.pytest_make_parametrize_id:5 of
msgid "The parameter name is available as ``argname``, if required."
msgstr ""

#: _pytest.hookspec.pytest_make_parametrize_id:10 of
msgid "The parametrized value."
msgstr ""

#: _pytest.hookspec.pytest_make_parametrize_id:11 of
msgid "The automatic parameter name produced by pytest."
msgstr ""

#: ../../reference/reference.rst:712
msgid "Hooks for influencing test skipping:"
msgstr ""

#: _pytest.hookspec.pytest_markeval_namespace:1 of
msgid "Called when constructing the globals dictionary used for evaluating string conditions in xfail/skipif markers."
msgstr ""

#: _pytest.hookspec.pytest_markeval_namespace:4 of
msgid "This is useful when the condition for a marker requires objects that are expensive or impossible to obtain during collection time, which is required by normal boolean conditions."
msgstr ""

#: _pytest.hookspec.pytest_markeval_namespace:12 of
msgid "A dictionary of additional globals to add."
msgstr ""

#: _pytest.hookspec.pytest_markeval_namespace:17 of
msgid "Any conftest file can implement this hook. For a given item, only conftest files in parent directories of the item are consulted."
msgstr ""

#: ../../reference/reference.rst:717
msgid "After collection is complete, you can modify the order of items, delete or otherwise amend the test items:"
msgstr ""

#: _pytest.hookspec.pytest_collection_modifyitems:1 of
msgid "Called after collection has been performed. May filter or re-order the items in-place."
msgstr ""

#: _pytest.hookspec.pytest_collection_modifyitems:4 of
msgid "When items are deselected (filtered out from ``items``), the hook :hook:`pytest_deselected` must be called explicitly with the deselected items to properly notify other plugins, e.g. with ``config.hook.pytest_deselected(deselected_items)``."
msgstr ""

#: _pytest.hookspec.pytest_collection_modifyitems:11 of
msgid "List of item objects."
msgstr ""

#: _pytest.hookspec.pytest_collection_finish:8
#: _pytest.hookspec.pytest_collection_modifyitems:16
#: _pytest.hookspec.pytest_enter_pdb:12
#: _pytest.hookspec.pytest_internalerror:12
#: _pytest.hookspec.pytest_keyboard_interrupt:8
#: _pytest.hookspec.pytest_leave_pdb:12
#: _pytest.hookspec.pytest_report_collectionfinish:29
#: _pytest.hookspec.pytest_report_teststatus:26
#: _pytest.hookspec.pytest_terminal_summary:13 of
msgid "Any conftest plugin can implement this hook."
msgstr ""

#: ../../reference/reference.rst:724
msgid "If this hook is implemented in ``conftest.py`` files, it always receives all collected items, not only those under the ``conftest.py`` where it is implemented."
msgstr ""

#: _pytest.hookspec.pytest_collection_finish:1 of
msgid "Called after collection has been performed and modified."
msgstr ""

#: ../../reference/reference.rst:730
msgid "Test running (runtest) hooks"
msgstr ""

#: ../../reference/reference.rst:732
msgid "All runtest related hooks receive a :py:class:`pytest.Item <pytest.Item>` object."
msgstr ""

#: _pytest.hookspec.pytest_runtestloop:1 of
msgid "Perform the main runtest loop (after collection finished)."
msgstr ""

#: _pytest.hookspec.pytest_runtestloop:3 of
msgid "The default hook implementation performs the runtest protocol for all items collected in the session (``session.items``), unless the collection failed or the ``collectonly`` pytest option is set."
msgstr ""

#: _pytest.hookspec.pytest_runtestloop:7 of
msgid "If at any point :py:func:`pytest.exit` is called, the loop is terminated immediately."
msgstr ""

#: _pytest.hookspec.pytest_runtestloop:10 of
msgid "If at any point ``session.shouldfail`` or ``session.shouldstop`` are set, the loop is terminated after the runtest protocol for the current item is finished."
msgstr ""

#: _pytest.hookspec.pytest_runtest_protocol:1 of
msgid "Perform the runtest protocol for a single test item."
msgstr ""

#: _pytest.hookspec.pytest_runtest_protocol:3 of
msgid "The default runtest protocol is this (see individual hooks for full details):"
msgstr ""

#: _pytest.hookspec.pytest_runtest_protocol:5 of
msgid "``pytest_runtest_logstart(nodeid, location)``"
msgstr ""

#: _pytest.hookspec.pytest_runtest_protocol:7 of
msgid "Setup phase:"
msgstr ""

#: _pytest.hookspec.pytest_runtest_protocol:8 of
msgid "``call = pytest_runtest_setup(item)`` (wrapped in ``CallInfo(when=\"setup\")``)"
msgstr ""

#: _pytest.hookspec.pytest_runtest_protocol:9
#: _pytest.hookspec.pytest_runtest_protocol:15
#: _pytest.hookspec.pytest_runtest_protocol:21 of
msgid "``report = pytest_runtest_makereport(item, call)``"
msgstr ""

#: _pytest.hookspec.pytest_runtest_protocol:10
#: _pytest.hookspec.pytest_runtest_protocol:16
#: _pytest.hookspec.pytest_runtest_protocol:22 of
msgid "``pytest_runtest_logreport(report)``"
msgstr ""

#: _pytest.hookspec.pytest_runtest_protocol:11
#: _pytest.hookspec.pytest_runtest_protocol:17
#: _pytest.hookspec.pytest_runtest_protocol:23 of
msgid "``pytest_exception_interact(call, report)`` if an interactive exception occurred"
msgstr ""

#: _pytest.hookspec.pytest_runtest_protocol:13 of
msgid "Call phase, if the setup passed and the ``setuponly`` pytest option is not set:"
msgstr ""

#: _pytest.hookspec.pytest_runtest_protocol:14 of
msgid "``call = pytest_runtest_call(item)`` (wrapped in ``CallInfo(when=\"call\")``)"
msgstr ""

#: _pytest.hookspec.pytest_runtest_protocol:19 of
msgid "Teardown phase:"
msgstr ""

#: _pytest.hookspec.pytest_runtest_protocol:20 of
msgid "``call = pytest_runtest_teardown(item, nextitem)`` (wrapped in ``CallInfo(when=\"teardown\")``)"
msgstr ""

#: _pytest.hookspec.pytest_runtest_protocol:25 of
msgid "``pytest_runtest_logfinish(nodeid, location)``"
msgstr ""

#: _pytest.hookspec.pytest_runtest_protocol:27 of
msgid "Test item for which the runtest protocol is performed."
msgstr ""

#: _pytest.hookspec.pytest_runtest_protocol:28 of
msgid "The scheduled-to-be-next test item (or None if this is the end my friend)."
msgstr ""

#: _pytest.hookspec.pytest_runtest_logstart:1 of
msgid "Called at the start of running the runtest protocol for a single item."
msgstr ""

#: _pytest.hookspec.pytest_runtest_logfinish:3
#: _pytest.hookspec.pytest_runtest_logreport:4
#: _pytest.hookspec.pytest_runtest_logstart:3
#: _pytest.hookspec.pytest_runtest_makereport:4 of
msgid "See :hook:`pytest_runtest_protocol` for a description of the runtest protocol."
msgstr ""

#: _pytest.hookspec.pytest_runtest_logfinish:5
#: _pytest.hookspec.pytest_runtest_logstart:5 of
msgid "Full node ID of the item."
msgstr ""

#: _pytest.hookspec.pytest_runtest_logfinish:6
#: _pytest.hookspec.pytest_runtest_logstart:6 of
msgid "A tuple of ``(filename, lineno, testname)`` where ``filename`` is a file path relative to ``config.rootpath`` and ``lineno`` is 0-based."
msgstr ""

#: _pytest.hookspec.pytest_assertion_pass:29
#: _pytest.hookspec.pytest_assertrepr_compare:16
#: _pytest.hookspec.pytest_itemcollected:9
#: _pytest.hookspec.pytest_pyfunc_call:11
#: _pytest.hookspec.pytest_runtest_call:11
#: _pytest.hookspec.pytest_runtest_logfinish:13
#: _pytest.hookspec.pytest_runtest_logreport:9
#: _pytest.hookspec.pytest_runtest_logstart:13
#: _pytest.hookspec.pytest_runtest_makereport:14
#: _pytest.hookspec.pytest_runtest_setup:14
#: _pytest.hookspec.pytest_runtest_teardown:19 of
msgid "Any conftest file can implement this hook. For a given item, only conftest files in the item's directory and its parent directories are consulted."
msgstr ""

#: _pytest.hookspec.pytest_runtest_logfinish:1 of
msgid "Called at the end of running the runtest protocol for a single item."
msgstr ""

#: _pytest.hookspec.pytest_runtest_setup:1 of
msgid "Called to perform the setup phase for a test item."
msgstr ""

#: _pytest.hookspec.pytest_runtest_setup:3 of
msgid "The default implementation runs ``setup()`` on ``item`` and all of its parents (which haven't been setup yet). This includes obtaining the values of fixtures required by the item (which haven't been obtained yet)."
msgstr ""

#: _pytest.hookspec.pytest_itemcollected:3
#: _pytest.hookspec.pytest_runtest_call:5
#: _pytest.hookspec.pytest_runtest_makereport:6
#: _pytest.hookspec.pytest_runtest_setup:8
#: _pytest.hookspec.pytest_runtest_teardown:8
#: _pytest.reports.TestReport.from_item_and_call:3 of
msgid "The item."
msgstr ""

#: _pytest.hookspec.pytest_runtest_call:1 of
msgid "Called to run the test for test item (the call phase)."
msgstr ""

#: _pytest.hookspec.pytest_runtest_call:3 of
msgid "The default implementation calls ``item.runtest()``."
msgstr ""

#: _pytest.hookspec.pytest_runtest_teardown:1 of
msgid "Called to perform the teardown phase for a test item."
msgstr ""

#: _pytest.hookspec.pytest_runtest_teardown:3 of
msgid "The default implementation runs the finalizers and calls ``teardown()`` on ``item`` and all of its parents (which need to be torn down). This includes running the teardown phase of fixtures required by the item (if they go out of scope)."
msgstr ""

#: _pytest.hookspec.pytest_runtest_teardown:10 of
msgid "The scheduled-to-be-next test item (None if no further test item is scheduled). This argument is used to perform exact teardowns, i.e. calling just enough finalizers so that nextitem only needs to call setup functions."
msgstr ""

#: _pytest.hookspec.pytest_runtest_makereport:1 of
msgid "Called to create a :class:`~pytest.TestReport` for each of the setup, call and teardown runtest phases of a test item."
msgstr ""

#: _pytest.hookspec.pytest_runtest_makereport:7 of
msgid "The :class:`~pytest.CallInfo` for the phase."
msgstr ""

#: ../../reference/reference.rst:751
msgid "For deeper understanding you may look at the default implementation of these hooks in ``_pytest.runner`` and maybe also in ``_pytest.pdb`` which interacts with ``_pytest.capture`` and its input/output capturing in order to immediately drop into interactive debugging when a test failure occurs."
msgstr ""

#: _pytest.hookspec.pytest_pyfunc_call:1 of
msgid "Call underlying test function."
msgstr ""

#: _pytest.hookspec.pytest_pyfunc_call:5 of
msgid "The function item."
msgstr ""

#: ../../reference/reference.rst:761
msgid "Reporting hooks"
msgstr ""

#: ../../reference/reference.rst:763
msgid "Session related reporting hooks:"
msgstr ""

#: _pytest.hookspec.pytest_collectstart:1 of
msgid "Collector starts collecting."
msgstr ""

#: _pytest.hookspec.pytest_collectstart:3
#: _pytest.hookspec.pytest_make_collect_report:6 of
msgid "The collector."
msgstr ""

#: _pytest.hookspec.pytest_make_collect_report:1 of
msgid "Perform :func:`collector.collect() <pytest.Collector.collect>` and return a :class:`~pytest.CollectReport`."
msgstr ""

#: _pytest.hookspec.pytest_itemcollected:1 of
msgid "We just collected a test item."
msgstr ""

#: _pytest.hookspec.pytest_collectreport:1 of
msgid "Collector finished collecting."
msgstr ""

#: _pytest.hookspec.pytest_collectreport:3 of
msgid "The collect report."
msgstr ""

#: _pytest.hookspec.pytest_deselected:1 of
msgid "Called for deselected test items, e.g. by keyword."
msgstr ""

#: _pytest.hookspec.pytest_deselected:3 of
msgid "Note that this hook has two integration aspects for plugins:"
msgstr ""

#: _pytest.hookspec.pytest_deselected:5 of
msgid "it can be *implemented* to be notified of deselected items"
msgstr ""

#: _pytest.hookspec.pytest_deselected:6 of
msgid "it must be *called* from :hook:`pytest_collection_modifyitems` implementations when items are deselected (to properly notify other plugins)."
msgstr ""

#: _pytest.hookspec.pytest_deselected:9 of
msgid "May be called multiple times."
msgstr ""

#: _pytest.hookspec.pytest_deselected:11 of
msgid "The items."
msgstr ""

#: _pytest.hookspec.pytest_report_header:1 of
msgid "Return a string or list of strings to be displayed as header info for terminal reporting."
msgstr ""

#: _pytest.hookspec.pytest_report_collectionfinish:9
#: _pytest.hookspec.pytest_report_header:4 of
msgid "The starting dir."
msgstr ""

#: _pytest.hookspec.pytest_report_collectionfinish:11
#: _pytest.hookspec.pytest_report_header:6 of
msgid "The starting dir (deprecated)."
msgstr ""

#: _pytest.hookspec.pytest_report_collectionfinish:16
#: _pytest.hookspec.pytest_report_header:10 of
msgid "Lines returned by a plugin are displayed before those of plugins which ran before it. If you want to have your line(s) displayed first, use :ref:`trylast=True <plugin-hookorder>`."
msgstr ""

#: _pytest.hookspec.pytest_report_collectionfinish:21
#: _pytest.hookspec.pytest_report_header:15 of
msgid "The ``start_path`` parameter was added as a :class:`pathlib.Path` equivalent of the ``startdir`` parameter. The ``startdir`` parameter has been deprecated."
msgstr ""

#: _pytest.hookspec.pytest_report_collectionfinish:1 of
msgid "Return a string or list of strings to be displayed after collection has finished successfully."
msgstr ""

#: _pytest.hookspec.pytest_report_collectionfinish:4 of
msgid "These strings will be displayed after the standard \"collected X items\" message."
msgstr ""

#: _pytest.hookspec.pytest_report_collectionfinish:12 of
msgid "List of pytest items that are going to be executed; this list should not be modified."
msgstr ""

#: _pytest.hookspec.pytest_report_teststatus:1 of
msgid "Return result-category, shortletter and verbose word for status reporting."
msgstr ""

#: _pytest.hookspec.pytest_report_teststatus:4 of
msgid "The result-category is a category in which to count the result, for example \"passed\", \"skipped\", \"error\" or the empty string."
msgstr ""

#: _pytest.hookspec.pytest_report_teststatus:7 of
msgid "The shortletter is shown as testing progresses, for example \".\", \"s\", \"E\" or the empty string."
msgstr ""

#: _pytest.hookspec.pytest_report_teststatus:10 of
msgid "The verbose word is shown as testing progresses in verbose mode, for example \"PASSED\", \"SKIPPED\", \"ERROR\" or the empty string."
msgstr ""

#: _pytest.hookspec.pytest_report_teststatus:13 of
#, python-brace-format
msgid "pytest may style these implicitly according to the report outcome. To provide explicit styling, return a tuple for the verbose word, for example ``\"rerun\", \"R\", (\"RERUN\", {\"yellow\": True})``."
msgstr ""

#: _pytest.hookspec.pytest_report_teststatus:17 of
msgid "The report object whose status is to be returned."
msgstr ""

#: _pytest.hookspec.pytest_report_teststatus:19 of
msgid "The test status."
msgstr ""

#: _pytest.hookspec.pytest_report_to_serializable:1 of
msgid "Serialize the given report object into a data structure suitable for sending over the wire, e.g. converted to JSON."
msgstr ""

#: _pytest.hookspec.pytest_report_to_serializable:5 of
msgid "The report."
msgstr ""

#: _pytest.hookspec.pytest_report_from_serializable:9
#: _pytest.hookspec.pytest_report_to_serializable:10 of
msgid "Any conftest file can implement this hook. The exact details may depend on the plugin which calls the hook."
msgstr ""

#: _pytest.hookspec.pytest_report_from_serializable:1 of
msgid "Restore a report object previously serialized with :hook:`pytest_report_to_serializable`."
msgstr ""

#: _pytest.hookspec.pytest_terminal_summary:1 of
msgid "Add a section to terminal summary reporting."
msgstr ""

#: _pytest.hookspec.pytest_terminal_summary:3 of
msgid "The internal terminal reporter object."
msgstr ""

#: _pytest.hookspec.pytest_terminal_summary:4 of
msgid "The exit status that will be reported back to the OS."
msgstr ""

#: _pytest.hookspec.pytest_terminal_summary:7 of
msgid "The ``config`` parameter."
msgstr ""

#: _pytest.hookspec.pytest_fixture_setup:1 of
msgid "Perform fixture setup execution."
msgstr ""

#: _pytest.hookspec.pytest_fixture_post_finalizer:5
#: _pytest.hookspec.pytest_fixture_setup:3 of
msgid "The fixture definition object."
msgstr ""

#: _pytest.hookspec.pytest_fixture_post_finalizer:7
#: _pytest.hookspec.pytest_fixture_setup:5 of
msgid "The fixture request object."
msgstr ""

#: _pytest.hookspec.pytest_fixture_setup:7 of
msgid "The return value of the call to the fixture function."
msgstr ""

#: _pytest.hookspec.pytest_fixture_setup:13 of
msgid "If the fixture function returns None, other implementations of this hook function will continue to be called, according to the behavior of the :ref:`firstresult` option."
msgstr ""

#: _pytest.hookspec.pytest_fixture_post_finalizer:13
#: _pytest.hookspec.pytest_fixture_setup:20 of
msgid "Any conftest file can implement this hook. For a given fixture, only conftest files in the fixture scope's directory and its parent directories are consulted."
msgstr ""

#: _pytest.hookspec.pytest_fixture_post_finalizer:1 of
msgid "Called after fixture teardown, but before the cache is cleared, so the fixture result ``fixturedef.cached_result`` is still available (not ``None``)."
msgstr ""

#: _pytest.hookspec.pytest_warning_recorded:1 of
msgid "Process a warning captured by the internal pytest warnings plugin."
msgstr ""

#: _pytest.hookspec.pytest_warning_recorded:3 of
msgid "The captured warning. This is the same object produced by :class:`warnings.catch_warnings`, and contains the same attributes as the parameters of :py:func:`warnings.showwarning`."
msgstr ""

#: _pytest.hookspec.pytest_warning_recorded:7 of
msgid "Indicates when the warning was captured. Possible values:  * ``\"config\"``: during pytest configuration/initialization stage. * ``\"collect\"``: during test collection. * ``\"runtest\"``: during test execution."
msgstr ""

#: _pytest.hookspec.pytest_warning_recorded:8 of
msgid "Indicates when the warning was captured. Possible values:"
msgstr ""

#: _pytest.hookspec.pytest_warning_recorded:10 of
msgid "``\"config\"``: during pytest configuration/initialization stage."
msgstr ""

#: _pytest.hookspec.pytest_warning_recorded:11 of
msgid "``\"collect\"``: during test collection."
msgstr ""

#: _pytest.hookspec.pytest_warning_recorded:12 of
msgid "``\"runtest\"``: during test execution."
msgstr ""

#: _pytest.hookspec.pytest_warning_recorded:14 of
msgid "Full id of the item. Empty string for warnings that are not specific to a particular node."
msgstr ""

#: _pytest.hookspec.pytest_warning_recorded:18 of
msgid "When available, holds information about the execution context of the captured warning (filename, linenumber, function). ``function`` evaluates to <module> when the execution context is at the module level."
msgstr ""

#: _pytest.hookspec.pytest_warning_recorded:28 of
msgid "Any conftest file can implement this hook. If the warning is specific to a particular node, only conftest files in parent directories of the node are consulted."
msgstr ""

#: ../../reference/reference.rst:794
msgid "Central hook for reporting about test execution:"
msgstr ""

#: _pytest.hookspec.pytest_runtest_logreport:1 of
msgid "Process the :class:`~pytest.TestReport` produced for each of the setup, call and teardown runtest phases of an item."
msgstr ""

#: ../../reference/reference.rst:799
msgid "Assertion related hooks:"
msgstr ""

#: _pytest.hookspec.pytest_assertrepr_compare:1 of
msgid "Return explanation for comparisons in failing assert expressions."
msgstr ""

#: _pytest.hookspec.pytest_assertrepr_compare:3 of
msgid "Return None for no custom explanation, otherwise return a list of strings. The strings will be joined by newlines but any newlines *in* a string will be escaped. Note that all but the first line will be indented slightly, the intention is for the first line to be a summary."
msgstr ""

#: _pytest.hookspec.pytest_assertrepr_compare:9 of
msgid "The operator, e.g. `\"==\"`, `\"!=\"`, `\"not in\"`."
msgstr ""

#: _pytest.hookspec.pytest_assertrepr_compare:10 of
msgid "The left operand."
msgstr ""

#: _pytest.hookspec.pytest_assertrepr_compare:11 of
msgid "The right operand."
msgstr ""

#: _pytest.hookspec.pytest_assertion_pass:1 of
msgid "Called whenever an assertion passes."
msgstr ""

#: _pytest.hookspec.pytest_assertion_pass:5 of
msgid "Use this hook to do some processing after a passing assertion. The original assertion information is available in the `orig` string and the pytest introspected assertion information is available in the `expl` string."
msgstr ""

#: _pytest.hookspec.pytest_assertion_pass:10 of
msgid "This hook must be explicitly enabled by the ``enable_assertion_pass_hook`` ini-file option:"
msgstr ""

#: _pytest.hookspec.pytest_assertion_pass:18 of
msgid "You need to **clean the .pyc** files in your project directory and interpreter libraries when enabling this option, as assertions will require to be re-written."
msgstr ""

#: _pytest.hookspec.pytest_assertion_pass:21 of
msgid "pytest item object of current test."
msgstr ""

#: _pytest.hookspec.pytest_assertion_pass:22 of
msgid "Line number of the assert statement."
msgstr ""

#: _pytest.hookspec.pytest_assertion_pass:23 of
msgid "String with the original assertion."
msgstr ""

#: _pytest.hookspec.pytest_assertion_pass:24 of
msgid "String with the assert explanation."
msgstr ""

#: ../../reference/reference.rst:808
msgid "Debugging/Interaction hooks"
msgstr ""

#: ../../reference/reference.rst:810
msgid "There are few hooks which can be used for special reporting or interaction with exceptions:"
msgstr ""

#: _pytest.hookspec.pytest_internalerror:1 of
msgid "Called for internal errors."
msgstr ""

#: _pytest.hookspec.pytest_internalerror:3 of
msgid "Return True to suppress the fallback handling of printing an INTERNALERROR message directly to sys.stderr."
msgstr ""

#: _pytest.hookspec.pytest_internalerror:6 of
msgid "The exception repr object."
msgstr ""

#: _pytest.hookspec.pytest_internalerror:7
#: _pytest.hookspec.pytest_keyboard_interrupt:3 of
msgid "The exception info."
msgstr ""

#: _pytest.hookspec.pytest_keyboard_interrupt:1 of
msgid "Called for keyboard interrupt."
msgstr ""

#: _pytest.hookspec.pytest_exception_interact:1 of
msgid "Called when an exception was raised which can potentially be interactively handled."
msgstr ""

#: _pytest.hookspec.pytest_exception_interact:4 of
msgid "May be called during collection (see :hook:`pytest_make_collect_report`), in which case ``report`` is a :class:`~pytest.CollectReport`."
msgstr ""

#: _pytest.hookspec.pytest_exception_interact:7 of
msgid "May be called during runtest of an item (see :hook:`pytest_runtest_protocol`), in which case ``report`` is a :class:`~pytest.TestReport`."
msgstr ""

#: _pytest.hookspec.pytest_exception_interact:10 of
msgid "This hook is not called if the exception that was raised is an internal exception like ``skip.Exception``."
msgstr ""

#: _pytest.hookspec.pytest_exception_interact:13 of
msgid "The item or collector."
msgstr ""

#: _pytest.hookspec.pytest_exception_interact:15 of
msgid "The call information. Contains the exception."
msgstr ""

#: _pytest.hookspec.pytest_exception_interact:17 of
msgid "The collection or test report."
msgstr ""

#: _pytest.hookspec.pytest_exception_interact:23 of
msgid "Any conftest file can implement this hook. For a given node, only conftest files in parent directories of the node are consulted."
msgstr ""

#: _pytest.hookspec.pytest_enter_pdb:1 of
msgid "Called upon pdb.set_trace()."
msgstr ""

#: _pytest.hookspec.pytest_enter_pdb:3 of
msgid "Can be used by plugins to take special action just before the python debugger enters interactive mode."
msgstr ""

#: _pytest.hookspec.pytest_enter_pdb:7 _pytest.hookspec.pytest_leave_pdb:7 of
msgid "The Pdb instance."
msgstr ""

#: _pytest.hookspec.pytest_leave_pdb:1 of
msgid "Called when leaving pdb (e.g. with continue after pdb.set_trace())."
msgstr ""

#: _pytest.hookspec.pytest_leave_pdb:3 of
msgid "Can be used by plugins to take special action just after the python debugger leaves interactive mode."
msgstr ""

#: ../../reference/reference.rst:826
msgid "Collection tree objects"
msgstr ""

#: ../../reference/reference.rst:828
msgid "These are the collector and item classes (collectively called \"nodes\") which make up the collection tree."
msgstr ""

#: ../../reference/reference.rst:832
msgid "Node"
msgstr ""

#: _pytest.nodes.Node:1 of
msgid "Bases: :py:class:`~abc.ABC`"
msgstr ""

#: _pytest.nodes.Node:1 of
msgid "Base class of :class:`Collector` and :class:`Item`, the components of the test collection tree."
msgstr ""

#: _pytest.nodes.Node:4 of
msgid "``Collector``\\'s are the internal nodes of the tree, and ``Item``\\'s are the leaf nodes."
msgstr ""

#: ../../../../docstring _pytest.nodes.Node.fspath:1 of
msgid "A ``LEGACY_PATH`` copy of the :attr:`path` attribute. Intended for usage for methods not migrated to ``pathlib.Path`` yet, such as :meth:`Item.reportinfo <pytest.Item.reportinfo>`. Will be deprecated in a future release, prefer using :attr:`path` instead."
msgstr ""

#: ../../../../docstring _pytest.nodes.FSCollector.name:1
#: _pytest.nodes.Node.name:1 _pytest.python.FunctionDefinition.name:1 of
#: pytest.Class.name:1 pytest.Collector.name:1 pytest.Dir.name:1
#: pytest.Directory.name:1 pytest.File.name:1 pytest.Function.name:1
#: pytest.Item.name:1 pytest.Module.name:1 pytest.Package.name:1
#: pytest.Session.name:1
msgid "A unique name within the scope of the parent node."
msgstr ""

#: ../../../../docstring _pytest.nodes.FSCollector.parent:1
#: _pytest.nodes.Node.parent:1 _pytest.python.FunctionDefinition.parent:1 of
#: pytest.Class.parent:1 pytest.Collector.parent:1 pytest.Dir.parent:1
#: pytest.Directory.parent:1 pytest.File.parent:1 pytest.Function.parent:1
#: pytest.Item.parent:1 pytest.Module.parent:1 pytest.Package.parent:1
#: pytest.Session.parent:1
msgid "The parent collector node."
msgstr ""

#: ../../../../docstring _pytest.nodes.FSCollector.session:1
#: _pytest.nodes.Node.session:1 _pytest.python.FunctionDefinition.session:1 of
#: pytest.Class.session:1 pytest.Collector.session:1 pytest.Dir.session:1
#: pytest.Directory.session:1 pytest.File.session:1 pytest.Function.session:1
#: pytest.Item.session:1 pytest.Module.session:1 pytest.Package.session:1
#: pytest.Session.session:1
msgid "The pytest session this node is part of."
msgstr ""

#: ../../../../docstring _pytest.nodes.FSCollector.path:1
#: _pytest.nodes.Node.path:1 _pytest.python.FunctionDefinition.path:1 of
#: pytest.Class.path:1 pytest.Collector.path:1 pytest.Dir.path:1
#: pytest.Directory.path:1 pytest.File.path:1 pytest.Function.path:1
#: pytest.Item.path:1 pytest.Module.path:1 pytest.Package.path:1
#: pytest.Session.path:1
msgid "Filesystem path where this node was collected from (can be None)."
msgstr ""

#: ../../../../docstring _pytest.nodes.Node.keywords:1 of
msgid "Keywords/markers collected from all scopes."
msgstr ""

#: ../../../../docstring _pytest.nodes.Node.own_markers:1 of
msgid "The marker objects belonging to this node."
msgstr ""

#: ../../../../docstring _pytest.nodes.Node.extra_keyword_matches:1 of
msgid "Allow adding of extra keywords to use for matching."
msgstr ""

#: ../../../../docstring _pytest.nodes.Node.stash:1 of
msgid "A place where plugins can store information on the node for their own use."
msgstr ""

#: _pytest.nodes.Node.from_parent:1 of
msgid "Public constructor for Nodes."
msgstr ""

#: _pytest.nodes.Node.from_parent:3 of
msgid "This indirection got introduced in order to enable removing the fragile logic from the node constructors."
msgstr ""

#: _pytest.nodes.Node.from_parent:6 of
msgid "Subclasses can use ``super().from_parent(...)`` when overriding the construction."
msgstr ""

#: _pytest.nodes.Node.from_parent:9 of
msgid "The parent node of this Node."
msgstr ""

#: _pytest.nodes.Node.ihook:1 of
msgid "fspath-sensitive hook proxy used to call pytest hooks."
msgstr ""

#: _pytest.nodes.Node.warn:1 of
msgid "Issue a warning for this Node."
msgstr ""

#: _pytest.nodes.Node.warn:3 of
msgid "Warnings will be displayed after the test session, unless explicitly suppressed."
msgstr ""

#: _pytest.nodes.Node.warn:5 of
msgid "The warning instance to issue."
msgstr ""

#: _pytest.nodes.Node.warn:8 of
msgid "If ``warning`` instance is not a subclass of Warning."
msgstr ""

#: _pytest.nodes.Node.warn:10 of
msgid "Example usage:"
msgstr ""

#: _pytest.nodes.Node.warn:17 of
msgid "Any subclass of :class:`Warning` is now accepted, rather than only :class:`PytestWarning <pytest.PytestWarning>` subclasses."
msgstr ""

#: _pytest.nodes.Node.nodeid:1 of
msgid "A ::-separated string denoting its collection tree address."
msgstr ""

#: _pytest.nodes.Node.iter_parents:1 of
msgid "Iterate over all parent collectors starting from and including self up to the root of the collection tree."
msgstr ""

#: _pytest.nodes.Node.listchain:1 of
msgid "Return a list of all parent collectors starting from the root of the collection tree down to and including self."
msgstr ""

#: _pytest.nodes.Node.add_marker:1 of
msgid "Dynamically add a marker object to the node."
msgstr ""

#: _pytest.nodes.Node.add_marker:3 of
msgid "The marker."
msgstr ""

#: _pytest.nodes.Node.add_marker:5 of
msgid "Whether to append the marker, or prepend it."
msgstr ""

#: _pytest.nodes.Node.iter_markers:1
#: _pytest.nodes.Node.iter_markers_with_node:1 of
msgid "Iterate over all markers of the node."
msgstr ""

#: _pytest.nodes.Node.iter_markers:3
#: _pytest.nodes.Node.iter_markers_with_node:3 of
msgid "If given, filter the results by the name attribute."
msgstr ""

#: _pytest.nodes.Node.iter_markers:4 of
msgid "An iterator of the markers of the node."
msgstr ""

#: _pytest.nodes.Node.iter_markers_with_node:4 of
msgid "An iterator of (node, mark) tuples."
msgstr ""

#: _pytest.nodes.Node.get_closest_marker:1 of
msgid "Return the first marker matching the name, from closest (for example function) to farther level (for example module level)."
msgstr ""

#: _pytest.nodes.Node.get_closest_marker:4 of
msgid "Fallback return value if no marker was found."
msgstr ""

#: _pytest.nodes.Node.get_closest_marker:5 of
msgid "Name to filter by."
msgstr ""

#: _pytest.nodes.Node.listextrakeywords:1 of
msgid "Return a set of all extra keywords in self and any parents."
msgstr ""

#: _pytest.nodes.Node.addfinalizer:1 of
msgid "Register a function to be called without arguments when this node is finalized."
msgstr ""

#: _pytest.nodes.Node.addfinalizer:4 of
msgid "This method can only be called when this node is active in a setup chain, for example during self.setup()."
msgstr ""

#: _pytest.nodes.Node.getparent:1 of
msgid "Get the closest parent node (including self) which is an instance of the given class."
msgstr ""

#: _pytest.nodes.Node.getparent:4 of
msgid "The node class to search for."
msgstr ""

#: _pytest.nodes.Node.getparent:5 of
msgid "The node, if found."
msgstr ""

#: _pytest.nodes.Node.repr_failure:1 _pytest.python.Function.repr_failure:1 of
msgid "Return a representation of a collection or test failure."
msgstr ""

#: _pytest.nodes.Item.reportinfo:9 _pytest.nodes.Item.runtest:5
#: _pytest.nodes.Node.repr_failure:3 _pytest.python.Function.repr_failure:3 of
msgid ":ref:`non-python tests`"
msgstr ""

#: _pytest.nodes.Collector.repr_failure:3 _pytest.nodes.Node.repr_failure:5
#: _pytest.python.Function.repr_failure:5 of
msgid "Exception information for the failure."
msgstr ""

#: ../../reference/reference.rst:839
msgid "Collector"
msgstr ""

#: _pytest.nodes.Collector:1 _pytest.nodes.Item:1 of
msgid "Bases: :py:class:`~_pytest.nodes.Node`, :py:class:`~abc.ABC`"
msgstr ""

#: _pytest.nodes.Collector:1 of
msgid "Base class of all collectors."
msgstr ""

#: _pytest.nodes.Collector:3 of
msgid "Collector create children through `collect()` and thus iteratively build the collection tree."
msgstr ""

#: _pytest.config.exceptions.UsageError:1 _pytest.main.Failed:1
#: _pytest.nodes.Collector.CollectError:1 of
msgid "Bases: :py:class:`Exception`"
msgstr ""

#: _pytest.nodes.Collector.CollectError:1 of
msgid "An error during collection, contains a custom message."
msgstr ""

#: _pytest.main.Dir.collect:1 _pytest.main.Session.collect:1
#: _pytest.nodes.Collector.collect:1 _pytest.python.Class.collect:1
#: _pytest.python.Module.collect:1 _pytest.python.Package.collect:1 of
msgid "Collect children (items and collectors) for this collector."
msgstr ""

#: _pytest.nodes.Collector.repr_failure:1 of
msgid "Return a representation of a collection failure."
msgstr ""

#: ../../reference/reference.rst:846
msgid "Item"
msgstr ""

#: _pytest.nodes.Item:1 of
msgid "Base class of all test invocation items."
msgstr ""

#: _pytest.nodes.Item:3 of
msgid "Note that for a single function there might be multiple test invocation items."
msgstr ""

#: ../../../../docstring of pytest.Item.user_properties:1
msgid "A list of tuples (name, value) that holds user defined properties for this test."
msgstr ""

#: _pytest.nodes.Item.runtest:1 of
msgid "Run the test case for this item."
msgstr ""

#: _pytest.nodes.Item.runtest:3 of
msgid "Must be implemented by subclasses."
msgstr ""

#: _pytest.nodes.Item.add_report_section:1 of
msgid "Add a new report section, similar to what's done internally to add stdout and stderr captured output::"
msgstr ""

#: _pytest.nodes.Item.add_report_section:6 of
msgid "One of the possible capture states, ``\"setup\"``, ``\"call\"``, ``\"teardown\"``."
msgstr ""

#: _pytest.nodes.Item.add_report_section:8 of
msgid "Name of the section, can be customized at will. Pytest uses ``\"stdout\"`` and ``\"stderr\"`` internally."
msgstr ""

#: _pytest.nodes.Item.add_report_section:11 of
msgid "The full contents as a string."
msgstr ""

#: _pytest.nodes.Item.reportinfo:1 of
msgid "Get location information for this item for test reports."
msgstr ""

#: _pytest.nodes.Item.reportinfo:3 of
msgid "Returns a tuple with three elements:"
msgstr ""

#: _pytest.nodes.Item.reportinfo:5 of
msgid "The path of the test (default ``self.path``)"
msgstr ""

#: _pytest.nodes.Item.reportinfo:6 of
msgid "The 0-based line number of the test (default ``None``)"
msgstr ""

#: _pytest.nodes.Item.reportinfo:7 of
msgid "A name of the test to be shown (default ``\"\"``)"
msgstr ""

#: of pytest.Item.location:1
msgid "Returns a tuple of ``(relfspath, lineno, testname)`` for this item where ``relfspath`` is file path relative to ``config.rootpath`` and lineno is a 0-based line number."
msgstr ""

#: ../../reference/reference.rst:853
msgid "File"
msgstr ""

#: _pytest.nodes.File:1 of
msgid "Bases: :py:class:`~_pytest.nodes.FSCollector`, :py:class:`~abc.ABC`"
msgstr ""

#: _pytest.nodes.File:1 of
msgid "Base class for collecting tests from a file."
msgstr ""

#: _pytest.nodes.File:3 of
msgid ":ref:`non-python tests`."
msgstr ""

#: ../../reference/reference.rst:860
msgid "FSCollector"
msgstr ""

#: _pytest.nodes.FSCollector:1 of
msgid "Bases: :py:class:`~_pytest.nodes.Collector`, :py:class:`~abc.ABC`"
msgstr ""

#: _pytest.nodes.FSCollector:1 of
msgid "Base class for filesystem collectors."
msgstr ""

#: _pytest.main.Dir.from_parent:1 _pytest.nodes.FSCollector.from_parent:1
#: _pytest.python.Class.from_parent:1 _pytest.python.Function.from_parent:1 of
msgid "The public constructor."
msgstr ""

#: ../../reference/reference.rst:867
msgid "Session"
msgstr ""

#: _pytest.main.Session:1 of
msgid "Bases: :py:class:`~_pytest.nodes.Collector`"
msgstr ""

#: _pytest.main.Session:1 of
msgid "The root of the collection tree."
msgstr ""

#: _pytest.main.Session:3 of
msgid "``Session`` collects the initial paths given as arguments to pytest."
msgstr ""

#: ../../../../docstring builtins.Interrupted:1 of
msgid "Bases: :py:class:`KeyboardInterrupt`"
msgstr ""

#: ../../../../docstring builtins.Interrupted:1 of
msgid "Signals that the test run was interrupted."
msgstr ""

#: _pytest.main.Failed:1 of
msgid "Signals a stop as failed test run."
msgstr ""

#: of pytest.Session.startpath:1
msgid "The path from which pytest was invoked."
msgstr ""

#: _pytest.main.Session.isinitpath:1 of
msgid "Is path an initial path?"
msgstr ""

#: _pytest.main.Session.isinitpath:3 of
msgid "An initial path is a path explicitly given to pytest on the command line."
msgstr ""

#: _pytest.main.Session.isinitpath:6 of
msgid "If set, also return True if the path is a parent of an initial path."
msgstr ""

#: _pytest.main.Session.isinitpath:9 of
msgid "Added the ``with_parents`` parameter."
msgstr ""

#: _pytest.main.Session.perform_collect:1 of
msgid "Perform the collection phase for this session."
msgstr ""

#: _pytest.main.Session.perform_collect:3 of
msgid "This is called by the default :hook:`pytest_collection` hook implementation; see the documentation of this hook for more details. For testing purposes, it may also be called directly on a fresh ``Session``."
msgstr ""

#: _pytest.main.Session.perform_collect:8 of
msgid "This function normally recursively expands any collectors collected from the session to their items, and only items are returned. For testing purposes, this may be suppressed by passing ``genitems=False``, in which case the return value contains these collectors unexpanded, and ``session.items`` is empty."
msgstr ""

#: ../../reference/reference.rst:874
msgid "Package"
msgstr ""

#: _pytest.python.Package:1 of
msgid "Bases: :py:class:`~_pytest.nodes.Directory`"
msgstr ""

#: _pytest.python.Package:1 of
msgid "Collector for files and directories in a Python packages -- directories with an `__init__.py` file."
msgstr ""

#: _pytest.python.Package:6 of
msgid "Directories without an `__init__.py` file are instead collected by :class:`~pytest.Dir` by default. Both are :class:`~pytest.Directory` collectors."
msgstr ""

#: _pytest.python.Package:12 of
msgid "Now inherits from :class:`~pytest.Directory`."
msgstr ""

#: ../../reference/reference.rst:881
msgid "Module"
msgstr ""

#: _pytest.python.Module:1 of
msgid "Bases: :py:class:`~_pytest.nodes.File`, :py:class:`~_pytest.python.PyCollector`"
msgstr ""

#: _pytest.python.Module:1 of
msgid "Collector for test classes and functions in a Python module."
msgstr ""

#: ../../reference/reference.rst:888
msgid "Class"
msgstr ""

#: _pytest.python.Class:1 of
msgid "Bases: :py:class:`~_pytest.python.PyCollector`"
msgstr ""

#: _pytest.python.Class:1 of
msgid "Collector for test methods (and nested classes) in a Python class."
msgstr ""

#: ../../reference/reference.rst:895
msgid "Function"
msgstr ""

#: _pytest.python.Function:1 of
msgid "Bases: :py:class:`~_pytest.python.PyobjMixin`, :py:class:`~_pytest.nodes.Item`"
msgstr ""

#: _pytest.python.Function:1 of
msgid "Item responsible for setting up and executing a Python test function."
msgstr ""

#: _pytest.python.Function:3 of
msgid "The full function name, including any decorations like those added by parametrization (``my_func[my_param]``)."
msgstr ""

#: _pytest.python.Function:6 of
msgid "The parent Node."
msgstr ""

#: _pytest.python.Function:8 of
msgid "The pytest Config object."
msgstr ""

#: _pytest.python.Function:10 of
msgid "If given, this function has been parametrized and the callspec contains meta information about the parametrization."
msgstr ""

#: _pytest.python.Function:13 of
msgid "If given, the object which will be called when the Function is invoked, otherwise the callobj will be obtained from ``parent`` using ``originalname``."
msgstr ""

#: _pytest.python.Function:16 of
msgid "Keywords bound to the function object for \"-k\" matching."
msgstr ""

#: _pytest.python.Function:18 of
msgid "The pytest Session object."
msgstr ""

#: _pytest.python.Function:20 of
msgid "Fixture information already resolved at this fixture node.."
msgstr ""

#: _pytest.python.Function:22 of
msgid "The attribute name to use for accessing the underlying function object. Defaults to ``name``. Set this if name is different from the original name, for example when it contains decorations like those added by parametrization (``my_func[my_param]``)."
msgstr ""

#: ../../../../docstring of pytest.Function.originalname:1
msgid "Original function name, without any decorations (for example parametrization adds a ``\"[...]\"`` suffix to function names), used to access the underlying function object from ``parent`` (in case ``callobj`` is not given explicitly)."
msgstr ""

#: of pytest.Function.function:1
msgid "Underlying python 'function' object."
msgstr ""

#: of pytest.Function.instance:1
msgid "Python instance object the function is bound to."
msgstr ""

#: of pytest.Function.instance:3
msgid "Returns None if not a test method, e.g. for a standalone test function, a class or a module."
msgstr ""

#: _pytest.python.Function.runtest:1
#: _pytest.python.FunctionDefinition.runtest:1 of
msgid "Execute the underlying test function."
msgstr ""

#: ../../reference/reference.rst:902
msgid "FunctionDefinition"
msgstr ""

#: _pytest.python.FunctionDefinition:1 of
msgid "Bases: :py:class:`~_pytest.python.Function`"
msgstr ""

#: _pytest.python.FunctionDefinition:1 of
msgid "This class is a stop gap solution until we evolve to have actual function definition nodes and manage to get rid of ``metafunc``."
msgstr ""

#: ../../reference/reference.rst:910
msgid "Objects"
msgstr ""

#: ../../reference/reference.rst:912
msgid "Objects accessible from :ref:`fixtures <fixture>` or :ref:`hooks <hook-reference>` or importable from ``pytest``."
msgstr ""

#: ../../reference/reference.rst:917
msgid "CallInfo"
msgstr ""

#: _pytest.runner.CallInfo:1 of
msgid "Result/Exception info of a function invocation."
msgstr ""

#: ../../../../docstring of pytest.CallInfo.excinfo:1
msgid "The captured exception of the call, if it raised."
msgstr ""

#: ../../../../docstring of pytest.CallInfo.start:1 pytest.TestReport.start:1
msgid "The system time when the call started, in seconds since the epoch."
msgstr ""

#: ../../../../docstring of pytest.CallInfo.stop:1 pytest.TestReport.stop:1
msgid "The system time when the call ended, in seconds since the epoch."
msgstr ""

#: ../../../../docstring of pytest.CallInfo.duration:1
msgid "The call duration, in seconds."
msgstr ""

#: ../../../../docstring of pytest.CallInfo.when:1
msgid "The context of invocation: \"collect\", \"setup\", \"call\" or \"teardown\"."
msgstr ""

#: of pytest.CallInfo.result:1
msgid "The return value of the call, if it didn't raise."
msgstr ""

#: of pytest.CallInfo.result:3
msgid "Can only be accessed if excinfo is None."
msgstr ""

#: _pytest.runner.CallInfo.from_call:1 of
msgid "Call func, wrapping the result in a CallInfo."
msgstr ""

#: _pytest.runner.CallInfo.from_call:3 of
msgid "The function to call. Called without arguments."
msgstr ""

#: _pytest.runner.CallInfo.from_call:6 of
msgid "The phase in which the function is called."
msgstr ""

#: _pytest.runner.CallInfo.from_call:8 of
msgid "Exception or exceptions that shall propagate if raised by the function, instead of being wrapped in the CallInfo."
msgstr ""

#: ../../reference/reference.rst:923
msgid "CollectReport"
msgstr ""

#: _pytest.reports.CollectReport:1 _pytest.reports.TestReport:1 of
msgid "Bases: :py:class:`~_pytest.reports.BaseReport`"
msgstr ""

#: _pytest.reports.CollectReport:1 of
msgid "Collection report object."
msgstr ""

#: _pytest.reports.CollectReport:3 _pytest.reports.TestReport:4 of
msgid "Reports can contain arbitrary extra attributes."
msgstr ""

#: ../../../../docstring of pytest.CollectReport.nodeid:1
#: pytest.TestReport.nodeid:1
msgid "Normalized collection nodeid."
msgstr ""

#: ../../../../docstring of pytest.CollectReport.outcome:1
#: pytest.TestReport.outcome:1
msgid "Test outcome, always one of \"passed\", \"failed\", \"skipped\"."
msgstr ""

#: ../../../../docstring of pytest.CollectReport.longrepr:1
#: pytest.TestReport.longrepr:1
msgid "None or a failure representation."
msgstr ""

#: ../../../../docstring of pytest.CollectReport.result:1
msgid "The collected items and collection nodes."
msgstr ""

#: ../../../../docstring of pytest.CollectReport.sections:1
#: pytest.TestReport.sections:1
msgid "Tuples of str ``(heading, content)`` with extra information for the test report. Used by pytest to add text captured from ``stdout``, ``stderr``, and intercepted logging events. May be used by other plugins to add arbitrary information to reports."
msgstr ""

#: of pytest.CollectReport.caplog:1 pytest.TestReport.caplog:1
msgid "Return captured log lines, if log capturing is enabled."
msgstr ""

#: of pytest.CollectReport.capstderr:1 pytest.TestReport.capstderr:1
msgid "Return captured text from stderr, if capturing is enabled."
msgstr ""

#: of pytest.CollectReport.capstdout:1 pytest.TestReport.capstdout:1
msgid "Return captured text from stdout, if capturing is enabled."
msgstr ""

#: of pytest.CollectReport.count_towards_summary:1
#: pytest.TestReport.count_towards_summary:1
msgid "**Experimental** Whether this report should be counted towards the totals shown at the end of the test session: \"1 passed, 1 failure, etc\"."
msgstr ""

#: of pytest.CollectReport.count_towards_summary:6
#: pytest.CollectReport.head_line:12 pytest.TestReport.count_towards_summary:6
#: pytest.TestReport.head_line:12
msgid "This function is considered **experimental**, so beware that it is subject to changes even in patch releases."
msgstr ""

#: of pytest.CollectReport.failed:1 pytest.TestReport.failed:1
msgid "Whether the outcome is failed."
msgstr ""

#: of pytest.CollectReport.fspath:1 pytest.TestReport.fspath:1
msgid "The path portion of the reported node, as a string."
msgstr ""

#: of pytest.CollectReport.head_line:1 pytest.TestReport.head_line:1
msgid "**Experimental** The head line shown with longrepr output for this report, more commonly during traceback representation during failures::"
msgstr ""

#: of pytest.CollectReport.head_line:8 pytest.TestReport.head_line:8
msgid "In the example above, the head_line is \"Test.foo\"."
msgstr ""

#: of pytest.CollectReport.longreprtext:1 pytest.TestReport.longreprtext:1
msgid "Read-only property that returns the full string representation of ``longrepr``."
msgstr ""

#: of pytest.CollectReport.passed:1 pytest.TestReport.passed:1
msgid "Whether the outcome is passed."
msgstr ""

#: of pytest.CollectReport.skipped:1 pytest.TestReport.skipped:1
msgid "Whether the outcome is skipped."
msgstr ""

#: ../../reference/reference.rst:931
msgid "Config"
msgstr ""

#: _pytest.config.Config:1 of
msgid "Access to configuration values, pluginmanager and plugin hooks."
msgstr ""

#: _pytest.config.Config:3 of
msgid "A pytest PluginManager."
msgstr ""

#: _pytest.config.Config:6 of
msgid "Object containing parameters regarding the :func:`pytest.main` invocation."
msgstr ""

#: _pytest.config.Config.InvocationParams:1 of
msgid "Holds parameters passed during :func:`pytest.main`."
msgstr ""

#: _pytest.config.Config.InvocationParams:3 of
msgid "The object attributes are read-only."
msgstr ""

#: _pytest.config.Config.InvocationParams:9 of
msgid "Note that the environment variable ``PYTEST_ADDOPTS`` and the ``addopts`` ini option are handled by pytest, not being included in the ``args`` attribute."
msgstr ""

#: _pytest.config.Config.InvocationParams:12 of
msgid "Plugins accessing ``InvocationParams`` must be aware of that."
msgstr ""

#: ../../../../docstring of pytest.Config.InvocationParams.args:1
msgid "The command-line arguments as passed to :func:`pytest.main`."
msgstr ""

#: ../../../../docstring of pytest.Config.InvocationParams.plugins:1
msgid "Extra plugins, might be `None`."
msgstr ""

#: ../../../../docstring of pytest.Config.InvocationParams.dir:1
msgid "The directory from which :func:`pytest.main` was invoked. :type: pathlib.Path"
msgstr ""

#: _pytest.config.Config.ArgsSource:1 of
msgid "Indicates the source of the test arguments."
msgstr ""

#: ../../../../docstring of pytest.Config.ArgsSource.ARGS:1
msgid "Command line arguments."
msgstr ""

#: ../../../../docstring of pytest.Config.ArgsSource.INVOCATION_DIR:1
msgid "Invocation directory."
msgstr ""

#: ../../../../docstring of pytest.Config.ArgsSource.TESTPATHS:1
msgid "'testpaths' configuration value."
msgstr ""

#: ../../../../docstring of pytest.Config.option:1
msgid "Access to command line option as attributes."
msgstr ""

#: ../../../../docstring of pytest.Config.invocation_params
#: pytest.Config.option pytest.Config.pluginmanager pytest.Config.rootpath
#: pytest.Config.stash
msgid "type"
msgstr ""

#: ../../../../docstring of pytest.Config.option:3
msgid "argparse.Namespace"
msgstr ""

#: ../../../../docstring of pytest.Config.invocation_params:1
msgid "The parameters with which pytest was invoked."
msgstr ""

#: ../../../../docstring of pytest.Config.invocation_params:3
msgid "InvocationParams"
msgstr ""

#: ../../../../docstring of pytest.Config.pluginmanager:1
msgid "The plugin manager handles plugin registration and hook invocation."
msgstr ""

#: ../../../../docstring ../../reference/reference.rst:1009 of
#: pytest.Config.pluginmanager:3
msgid "PytestPluginManager"
msgstr ""

#: ../../../../docstring of pytest.Config.stash:1
msgid "A place where plugins can store information on the config for their own use."
msgstr ""

#: ../../../../docstring ../../reference/reference.rst:1037 of
#: pytest.Config.stash:4
msgid "Stash"
msgstr ""

#: of pytest.Config.rootpath:1
msgid "The path to the :ref:`rootdir <rootdir>`."
msgstr ""

#: of pytest.Config.rootpath:3
msgid "pathlib.Path"
msgstr ""

#: of pytest.Config.inipath:1
msgid "The path to the :ref:`configfile <configfiles>`."
msgstr ""

#: _pytest.config.Config.add_cleanup:1 of
msgid "Add a function to be called when the config object gets out of use (usually coinciding with pytest_unconfigure)."
msgstr ""

#: _pytest.config.Config.fromdictargs:1 of
msgid "Constructor usable for subprocesses."
msgstr ""

#: _pytest.config.Config.issue_config_time_warning:1 of
msgid "Issue and handle a warning during the \"configure\" stage."
msgstr ""

#: _pytest.config.Config.issue_config_time_warning:3 of
msgid "During ``pytest_configure`` we can't capture warnings using the ``catch_warnings_for_item`` function because it is not possible to have hook wrappers around ``pytest_configure``."
msgstr ""

#: _pytest.config.Config.issue_config_time_warning:6 of
msgid "This function is mainly intended for plugins that need to issue warnings during ``pytest_configure`` (or similar stages)."
msgstr ""

#: _pytest.config.Config.issue_config_time_warning:9 of
msgid "The warning instance."
msgstr ""

#: _pytest.config.Config.issue_config_time_warning:10 of
msgid "stacklevel forwarded to warnings.warn."
msgstr ""

#: _pytest.config.Config.addinivalue_line:1 of
msgid "Add a line to an ini-file option. The option must have been declared but might not yet be set in which case the line becomes the first line in its value."
msgstr ""

#: _pytest.config.Config.getini:1 of
msgid "Return configuration value from an :ref:`ini file <configfiles>`."
msgstr ""

#: _pytest.config.Config.getini:3 of
msgid "If a configuration value is not defined in an :ref:`ini file <configfiles>`, then the ``default`` value provided while registering the configuration through :func:`parser.addini <pytest.Parser.addini>` will be returned. Please note that you can even provide ``None`` as a valid default value."
msgstr ""

#: _pytest.config.Config.getini:10 of
msgid "If ``default`` is not provided while registering using :func:`parser.addini <pytest.Parser.addini>`, then a default value based on the ``type`` parameter passed to :func:`parser.addini <pytest.Parser.addini>` will be returned. The default values based on ``type`` are: ``paths``, ``pathlist``, ``args`` and ``linelist`` : empty list ``[]`` ``bool`` : ``False`` ``string`` : empty string ``\"\"``"
msgstr ""

#: _pytest.config.Config.getini:19 of
msgid "If neither the ``default`` nor the ``type`` parameter is passed while registering the configuration through :func:`parser.addini <pytest.Parser.addini>`, then the configuration is treated as a string and a default empty string '' is returned."
msgstr ""

#: _pytest.config.Config.getini:24 of
msgid "If the specified name hasn't been registered through a prior :func:`parser.addini <pytest.Parser.addini>` call (usually from a plugin), a ValueError is raised."
msgstr ""

#: _pytest.config.Config.getoption:1 of
msgid "Return command line option value."
msgstr ""

#: _pytest.config.Config.getoption:3 of
msgid "Name of the option. You may also specify the literal ``--OPT`` option instead of the \"dest\" option name."
msgstr ""

#: _pytest.config.Config.getoption:5 of
msgid "Fallback value if no option of that name is **declared** via :hook:`pytest_addoption`. Note this parameter will be ignored when the option is **declared** even if the option's value is ``None``."
msgstr ""

#: _pytest.config.Config.getoption:7 of
msgid "If ``True``, raise :func:`pytest.skip` if option is undeclared or has a ``None`` value. Note that even if ``True``, if a default was specified it will be returned instead of a skip."
msgstr ""

#: _pytest.config.Config.getvalue:1 of
msgid "Deprecated, use getoption() instead."
msgstr ""

#: _pytest.config.Config.getvalueorskip:1 of
msgid "Deprecated, use getoption(skip=True) instead."
msgstr ""

#: ../../../../docstring of pytest.Config.VERBOSITY_ASSERTIONS:1
msgid "Verbosity type for failed assertions (see :confval:`verbosity_assertions`)."
msgstr ""

#: ../../../../docstring of pytest.Config.VERBOSITY_TEST_CASES:1
msgid "Verbosity type for test case execution (see :confval:`verbosity_test_cases`)."
msgstr ""

#: _pytest.config.Config.get_verbosity:1 of
msgid "Retrieve the verbosity level for a fine-grained verbosity type."
msgstr ""

#: _pytest.config.Config.get_verbosity:3 of
msgid "Verbosity type to get level for. If a level is configured for the given type, that value will be returned. If the given type is not a known verbosity type, the global verbosity level will be returned. If the given type is None (default), the global verbosity level will be returned."
msgstr ""

#: _pytest.config.Config.get_verbosity:9 of
msgid "To configure a level for a fine-grained verbosity type, the configuration file should have a setting for the configuration name and a numeric value for the verbosity level. A special value of \"auto\" can be used to explicitly use the global verbosity level."
msgstr ""

#: ../../reference/reference.rst:937
msgid "Dir"
msgstr ""

#: _pytest.main.Dir:1 of
msgid "Collector of files in a file system directory."
msgstr ""

#: _pytest.main.Dir:7 of
msgid "Python directories with an `__init__.py` file are instead collected by :class:`~pytest.Package` by default. Both are :class:`~pytest.Directory` collectors."
msgstr ""

#: _pytest.main.Dir.from_parent:3 of
msgid "The parent collector of this Dir."
msgstr ""

#: _pytest.main.Dir.from_parent:4 of
msgid "The directory's path."
msgstr ""

#: ../../reference/reference.rst:943
msgid "Directory"
msgstr ""

#: _pytest.nodes.Directory:1 of
msgid "Base class for collecting files from a directory."
msgstr ""

#: _pytest.nodes.Directory:3 of
msgid "A basic directory collector does the following: goes over the files and sub-directories in the directory and creates collectors for them by calling the hooks :hook:`pytest_collect_directory` and :hook:`pytest_collect_file`, after checking that they are not ignored using :hook:`pytest_ignore_collect`."
msgstr ""

#: _pytest.nodes.Directory:9 of
msgid "The default directory collectors are :class:`~pytest.Dir` and :class:`~pytest.Package`."
msgstr ""

#: _pytest.nodes.Directory:14 of
msgid ":ref:`custom directory collectors`."
msgstr ""

#: ../../reference/reference.rst:949
msgid "ExceptionInfo"
msgstr ""

#: _pytest._code.code.ExceptionInfo:1 of
msgid "Wraps sys.exc_info() objects and offers help for navigating the traceback."
msgstr ""

#: _pytest._code.code.ExceptionInfo.from_exception:1 of
msgid "Return an ExceptionInfo for an existing exception."
msgstr ""

#: _pytest._code.code.ExceptionInfo.from_exception:3 of
msgid "The exception must have a non-``None`` ``__traceback__`` attribute, otherwise this function fails with an assertion error. This means that the exception must have been raised, or added a traceback with the :py:meth:`~BaseException.with_traceback()` method."
msgstr ""

#: _pytest._code.code.ExceptionInfo.from_current:7
#: _pytest._code.code.ExceptionInfo.from_exception:8 of
msgid "A text string helping to determine if we should strip ``AssertionError`` from the output. Defaults to the exception message/``__str__()``."
msgstr ""

#: _pytest._code.code.ExceptionInfo.from_exc_info:1 of
msgid "Like :func:`from_exception`, but using old-style exc_info tuple."
msgstr ""

#: _pytest._code.code.ExceptionInfo.from_current:1 of
msgid "Return an ExceptionInfo matching the current traceback."
msgstr ""

#: _pytest._code.code.ExceptionInfo.from_current:5 of
msgid "Experimental API"
msgstr ""

#: _pytest._code.code.ExceptionInfo.for_later:1 of
msgid "Return an unfilled ExceptionInfo."
msgstr ""

#: _pytest._code.code.ExceptionInfo.fill_unfilled:1 of
msgid "Fill an unfilled ExceptionInfo created with ``for_later()``."
msgstr ""

#: of pytest.ExceptionInfo.type:1
msgid "The exception class."
msgstr ""

#: of pytest.ExceptionInfo.value:1
msgid "The exception value."
msgstr ""

#: of pytest.ExceptionInfo.tb:1
msgid "The exception raw traceback."
msgstr ""

#: of pytest.ExceptionInfo.typename:1
msgid "The type name of the exception."
msgstr ""

#: of pytest.ExceptionInfo.traceback:1
msgid "The traceback."
msgstr ""

#: _pytest._code.code.ExceptionInfo.exconly:1 of
msgid "Return the exception as a string."
msgstr ""

#: _pytest._code.code.ExceptionInfo.exconly:3 of
msgid "When 'tryshort' resolves to True, and the exception is an AssertionError, only the actual exception part of the exception representation is returned (so 'AssertionError: ' is removed from the beginning)."
msgstr ""

#: _pytest._code.code.ExceptionInfo.errisinstance:1 of
msgid "Return True if the exception is an instance of exc."
msgstr ""

#: _pytest._code.code.ExceptionInfo.errisinstance:3 of
msgid "Consider using ``isinstance(excinfo.value, exc)`` instead."
msgstr ""

#: _pytest._code.code.ExceptionInfo.getrepr:1 of
msgid "Return str()able representation of this exception info."
msgstr ""

#: _pytest._code.code.ExceptionInfo.getrepr:3 of
msgid "Show locals per traceback entry. Ignored if ``style==\"native\"``."
msgstr ""

#: _pytest._code.code.ExceptionInfo.getrepr:7 of
msgid "long|short|line|no|native|value traceback style."
msgstr ""

#: _pytest._code.code.ExceptionInfo.getrepr:10 of
msgid "If paths should be changed to absolute or left unchanged."
msgstr ""

#: _pytest._code.code.ExceptionInfo.getrepr:13 of
msgid "A filter for traceback entries.  * If false, don't hide any entries. * If true, hide internal entries and entries that contain a local   variable ``__tracebackhide__ = True``. * If a callable, delegates the filtering to the callable.  Ignored if ``style`` is ``\"native\"``."
msgstr ""

#: _pytest._code.code.ExceptionInfo.getrepr:14 of
msgid "A filter for traceback entries."
msgstr ""

#: _pytest._code.code.ExceptionInfo.getrepr:16 of
msgid "If false, don't hide any entries."
msgstr ""

#: _pytest._code.code.ExceptionInfo.getrepr:17 of
msgid "If true, hide internal entries and entries that contain a local variable ``__tracebackhide__ = True``."
msgstr ""

#: _pytest._code.code.ExceptionInfo.getrepr:19 of
msgid "If a callable, delegates the filtering to the callable."
msgstr ""

#: _pytest._code.code.ExceptionInfo.getrepr:21 of
msgid "Ignored if ``style`` is ``\"native\"``."
msgstr ""

#: _pytest._code.code.ExceptionInfo.getrepr:23 of
msgid "Show fixtures (\"funcargs\" for legacy purposes) per traceback entry."
msgstr ""

#: _pytest._code.code.ExceptionInfo.getrepr:26 of
msgid "With ``showlocals==True``, make sure locals can be safely represented as strings."
msgstr ""

#: _pytest._code.code.ExceptionInfo.getrepr:29 of
msgid "With ``showargs==True``, make sure args can be safely represented as strings."
msgstr ""

#: _pytest._code.code.ExceptionInfo.getrepr:32 of
msgid "If chained exceptions in Python 3 should be shown."
msgstr ""

#: _pytest._code.code.ExceptionInfo.getrepr:37 of
msgid "Added the ``chain`` parameter."
msgstr ""

#: _pytest._code.code.ExceptionInfo.match:1 of
msgid "Check whether the regular expression `regexp` matches the string representation of the exception using :func:`python:re.search`."
msgstr ""

#: _pytest._code.code.ExceptionInfo.match:4 of
msgid "If it matches `True` is returned, otherwise an `AssertionError` is raised."
msgstr ""

#: _pytest._code.code.ExceptionInfo.group_contains:1 of
msgid "Check whether a captured exception group contains a matching exception."
msgstr ""

#: _pytest._code.code.ExceptionInfo.group_contains:3 of
msgid "The expected exception type, or a tuple if one of multiple possible exception types are expected."
msgstr ""

#: _pytest._code.code.ExceptionInfo.group_contains:7 of
msgid "If specified, a string containing a regular expression, or a regular expression object, that is tested against the string representation of the exception and its `PEP-678 <https://peps.python.org/pep-0678/>` `__notes__` using :func:`re.search`.  To match a literal string that may contain :ref:`special characters <re-syntax>`, the pattern can first be escaped with :func:`re.escape`."
msgstr ""

#: _pytest._code.code.ExceptionInfo.group_contains:8 of
msgid "If specified, a string containing a regular expression, or a regular expression object, that is tested against the string representation of the exception and its `PEP-678 <https://peps.python.org/pep-0678/>` `__notes__` using :func:`re.search`."
msgstr ""

#: _pytest._code.code.ExceptionInfo.group_contains:16 of
msgid "If `None`, will search for a matching exception at any nesting depth. If >= 1, will only match an exception if it's at the specified depth (depth = 1 being the exceptions contained within the topmost exception group)."
msgstr ""

#: ../../reference/reference.rst:956
msgid "ExitCode"
msgstr ""

#: _pytest.config.ExitCode:1 of
msgid "Encodes the valid exit codes by pytest."
msgstr ""

#: _pytest.config.ExitCode:3 of
msgid "Currently users and plugins may supply other exit codes as well."
msgstr ""

#: ../../../../docstring of pytest.ExitCode.OK:1
msgid "Tests passed."
msgstr ""

#: ../../../../docstring of pytest.ExitCode.TESTS_FAILED:1
msgid "Tests failed."
msgstr ""

#: ../../../../docstring of pytest.ExitCode.INTERRUPTED:1
msgid "pytest was interrupted."
msgstr ""

#: ../../../../docstring of pytest.ExitCode.INTERNAL_ERROR:1
msgid "An internal error got in the way."
msgstr ""

#: ../../../../docstring of pytest.ExitCode.USAGE_ERROR:1
msgid "pytest was misused."
msgstr ""

#: ../../../../docstring of pytest.ExitCode.NO_TESTS_COLLECTED:1
msgid "pytest couldn't find tests."
msgstr ""

#: ../../reference/reference.rst:963
msgid "FixtureDef"
msgstr ""

#: _pytest.fixtures.FixtureDef:1 of
msgid "Bases: :py:class:`~typing.Generic`\\ [:py:obj:`~_pytest.fixtures.FixtureValue`]"
msgstr ""

#: _pytest.fixtures.FixtureDef:1 of
msgid "A container for a fixture definition."
msgstr ""

#: _pytest.fixtures.FixtureDef:3 of
msgid "Note: At this time, only explicitly documented fields and methods are considered public stable API."
msgstr ""

#: _pytest.fixtures.FixtureDef.execute:1 of
msgid "Return the value of this fixture, executing it if not cached."
msgstr ""

#: ../../reference/reference.rst:970
msgid "MarkDecorator"
msgstr ""

#: _pytest.mark.structures.MarkDecorator:1 of
msgid "A decorator for applying a mark on test functions and classes."
msgstr ""

#: _pytest.mark.structures.MarkDecorator:3 of
msgid "``MarkDecorators`` are created with ``pytest.mark``::"
msgstr ""

#: _pytest.mark.structures.MarkDecorator:8 of
msgid "and can then be applied as decorators to test functions::"
msgstr ""

#: _pytest.mark.structures.MarkDecorator:14 of
msgid "When a ``MarkDecorator`` is called, it does the following:"
msgstr ""

#: _pytest.mark.structures.MarkDecorator:16 of
msgid "If called with a single class as its only positional argument and no additional keyword arguments, it attaches the mark to the class so it gets applied automatically to all test cases found in that class."
msgstr ""

#: _pytest.mark.structures.MarkDecorator:20 of
msgid "If called with a single function as its only positional argument and no additional keyword arguments, it attaches the mark to the function, containing all the arguments already stored internally in the ``MarkDecorator``."
msgstr ""

#: _pytest.mark.structures.MarkDecorator:25 of
msgid "When called in any other case, it returns a new ``MarkDecorator`` instance with the original ``MarkDecorator``'s content updated with the arguments passed to this call."
msgstr ""

#: _pytest.mark.structures.MarkDecorator:29 of
msgid "Note: The rules above prevent a ``MarkDecorator`` from storing only a single function or class reference as its positional argument with no additional keyword or positional arguments. You can work around this by using `with_args()`."
msgstr ""

#: of pytest.MarkDecorator.name:1
msgid "Alias for mark.name."
msgstr ""

#: of pytest.MarkDecorator.args:1
msgid "Alias for mark.args."
msgstr ""

#: of pytest.MarkDecorator.kwargs:1
msgid "Alias for mark.kwargs."
msgstr ""

#: _pytest.mark.structures.MarkDecorator.with_args:1 of
msgid "Return a MarkDecorator with extra arguments added."
msgstr ""

#: _pytest.mark.structures.MarkDecorator.with_args:3 of
msgid "Unlike calling the MarkDecorator, with_args() can be used even if the sole argument is a callable/class."
msgstr ""

#: ../../reference/reference.rst:977
msgid "MarkGenerator"
msgstr ""

#: _pytest.mark.structures.MarkGenerator:1 of
msgid "Factory for :class:`MarkDecorator` objects - exposed as a ``pytest.mark`` singleton instance."
msgstr ""

#: _pytest.mark.structures.MarkGenerator:13 of
msgid "applies a 'slowtest' :class:`Mark` on ``test_function``."
msgstr ""

#: ../../reference/reference.rst:984
msgid "Mark"
msgstr ""

#: _pytest.mark.structures.Mark:1 of
msgid "A pytest mark."
msgstr ""

#: ../../../../docstring of pytest.Mark.name:1
msgid "Name of the mark."
msgstr ""

#: ../../../../docstring of pytest.Mark.args:1
msgid "Positional arguments of the mark decorator."
msgstr ""

#: ../../../../docstring of pytest.Mark.kwargs:1
msgid "Keyword arguments of the mark decorator."
msgstr ""

#: _pytest.mark.structures.Mark.combined_with:1 of
msgid "Return a new Mark which is a combination of this Mark and another Mark."
msgstr ""

#: _pytest.mark.structures.Mark.combined_with:4 of
msgid "Combines by appending args and merging kwargs."
msgstr ""

#: _pytest.mark.structures.Mark.combined_with:6 of
msgid "The mark to combine with."
msgstr ""

#: ../../reference/reference.rst:991
msgid "Metafunc"
msgstr ""

#: _pytest.python.Metafunc:1 of
msgid "Objects passed to the :hook:`pytest_generate_tests` hook."
msgstr ""

#: _pytest.python.Metafunc:3 of
msgid "They help to inspect a test function and to generate tests according to test configuration or values specified in the class or module where a test function is defined."
msgstr ""

#: ../../../../docstring of pytest.Metafunc.definition:1
msgid "Access to the underlying :class:`_pytest.python.FunctionDefinition`."
msgstr ""

#: ../../../../docstring of pytest.Metafunc.config:1
msgid "Access to the :class:`pytest.Config` object for the test session."
msgstr ""

#: ../../../../docstring of pytest.Metafunc.module:1
msgid "The module object where the test function is defined in."
msgstr ""

#: ../../../../docstring of pytest.Metafunc.function:1
msgid "Underlying Python test function."
msgstr ""

#: ../../../../docstring of pytest.Metafunc.fixturenames:1
msgid "Set of fixture names required by the test function."
msgstr ""

#: ../../../../docstring of pytest.Metafunc.cls:1
msgid "Class object where the test function is defined in or ``None``."
msgstr ""

#: _pytest.python.Metafunc.parametrize:1 of
msgid "Add new invocations to the underlying test function using the list of argvalues for the given argnames. Parametrization is performed during the collection phase. If you need to setup expensive resources see about setting indirect to do it rather than at test setup time."
msgstr ""

#: _pytest.python.Metafunc.parametrize:6 of
msgid "Can be called multiple times per test function (but only on different argument names), in which case each call parametrizes all previous parametrizations, e.g."
msgstr ""

#: _pytest.python.Metafunc.parametrize:16 of
msgid "A comma-separated string denoting one or more argument names, or a list/tuple of argument strings."
msgstr ""

#: _pytest.python.Metafunc.parametrize:20 of
msgid "The list of argvalues determines how often a test is invoked with different argument values.  If only one argname was specified argvalues is a list of values. If N argnames were specified, argvalues must be a list of N-tuples, where each tuple-element specifies a value for its respective argname."
msgstr ""

#: _pytest.python.Metafunc.parametrize:21 of
msgid "The list of argvalues determines how often a test is invoked with different argument values."
msgstr ""

#: _pytest.python.Metafunc.parametrize:24 of
msgid "If only one argname was specified argvalues is a list of values. If N argnames were specified, argvalues must be a list of N-tuples, where each tuple-element specifies a value for its respective argname."
msgstr ""

#: _pytest.python.Metafunc.parametrize:29 of
msgid "A list of arguments' names (subset of argnames) or a boolean. If True the list contains all names from the argnames. Each argvalue corresponding to an argname in this list will be passed as request.param to its respective argname fixture function so that it can perform more expensive setups during the setup phase of a test rather than at collection time."
msgstr ""

#: _pytest.python.Metafunc.parametrize:37 of
msgid "Sequence of (or generator for) ids for ``argvalues``, or a callable to return part of the id for each argvalue.  With sequences (and generators like ``itertools.count()``) the returned ids should be of type ``string``, ``int``, ``float``, ``bool``, or ``None``. They are mapped to the corresponding index in ``argvalues``. ``None`` means to use the auto-generated id.  If it is a callable it will be called for each entry in ``argvalues``, and the return value is used as part of the auto-generated id for the whole set (where parts are joined with dashes (\"-\")). This is useful to provide more specific ids for certain items, e.g. dates.  Returning ``None`` will use an auto-generated id.  If no ids are provided they will be generated automatically from the argvalues."
msgstr ""

#: _pytest.python.Metafunc.parametrize:38 of
msgid "Sequence of (or generator for) ids for ``argvalues``, or a callable to return part of the id for each argvalue."
msgstr ""

#: _pytest.python.Metafunc.parametrize:41 of
msgid "With sequences (and generators like ``itertools.count()``) the returned ids should be of type ``string``, ``int``, ``float``, ``bool``, or ``None``. They are mapped to the corresponding index in ``argvalues``. ``None`` means to use the auto-generated id."
msgstr ""

#: _pytest.python.Metafunc.parametrize:47 of
msgid "If it is a callable it will be called for each entry in ``argvalues``, and the return value is used as part of the auto-generated id for the whole set (where parts are joined with dashes (\"-\")). This is useful to provide more specific ids for certain items, e.g. dates.  Returning ``None`` will use an auto-generated id."
msgstr ""

#: _pytest.python.Metafunc.parametrize:54 of
msgid "If no ids are provided they will be generated automatically from the argvalues."
msgstr ""

#: _pytest.python.Metafunc.parametrize:57 of
msgid "If specified it denotes the scope of the parameters. The scope is used for grouping tests by parameter instances. It will also override any fixture-function defined scope, allowing to set a dynamic scope using test context or configuration."
msgstr ""

#: ../../reference/reference.rst:997
msgid "Parser"
msgstr ""

#: _pytest.config.argparsing.Parser:1 of
msgid "Parser for command line arguments and ini-file values."
msgstr ""

#: ../../reference/reference.rst
msgid "Variables"
msgstr ""

#: _pytest.config.argparsing.Parser:3 of
msgid "Dict of generic param -> value to display in case there's an error processing the command line arguments."
msgstr ""

#: _pytest.config.argparsing.Parser.getgroup:1 of
msgid "Get (or create) a named option Group."
msgstr ""

#: _pytest.config.argparsing.Parser.getgroup:3 of
msgid "Name of the option group."
msgstr ""

#: _pytest.config.argparsing.Parser.getgroup:4 of
msgid "Long description for --help output."
msgstr ""

#: _pytest.config.argparsing.Parser.getgroup:5 of
msgid "Name of another group, used for ordering --help output."
msgstr ""

#: _pytest.config.argparsing.Parser.getgroup:6 of
msgid "The option group."
msgstr ""

#: _pytest.config.argparsing.Parser.getgroup:8 of
msgid "The returned group object has an ``addoption`` method with the same signature as :func:`parser.addoption <pytest.Parser.addoption>` but will be shown in the respective group in the output of ``pytest --help``."
msgstr ""

#: _pytest.config.argparsing.Parser.addoption:1 of
msgid "Register a command line option."
msgstr ""

#: _pytest.config.argparsing.OptionGroup.addoption:8
#: _pytest.config.argparsing.Parser.addoption:3 of
msgid "Option names, can be short or long options."
msgstr ""

#: _pytest.config.argparsing.OptionGroup.addoption:10
#: _pytest.config.argparsing.Parser.addoption:5 of
msgid "Same attributes as the argparse library's :meth:`add_argument() <argparse.ArgumentParser.add_argument>` function accepts."
msgstr ""

#: _pytest.config.argparsing.Parser.addoption:9 of
msgid "After command line parsing, options are available on the pytest config object via ``config.option.NAME`` where ``NAME`` is usually set by passing a ``dest`` attribute, for example ``addoption(\"--long\", dest=\"NAME\", ...)``."
msgstr ""

#: _pytest.config.argparsing.Parser.parse_known_args:1 of
msgid "Parse the known arguments at this point."
msgstr ""

#: _pytest.config.argparsing.Parser.parse_known_args:3 of
msgid "An argparse namespace object."
msgstr ""

#: _pytest.config.argparsing.Parser.parse_known_and_unknown_args:1 of
msgid "Parse the known arguments at this point, and also return the remaining unknown arguments."
msgstr ""

#: _pytest.config.argparsing.Parser.parse_known_and_unknown_args:4 of
msgid "A tuple containing an argparse namespace object for the known arguments, and a list of the unknown arguments."
msgstr ""

#: _pytest.config.argparsing.Parser.addini:1 of
msgid "Register an ini-file option."
msgstr ""

#: _pytest.config.argparsing.Parser.addini:3 of
msgid "Name of the ini-variable."
msgstr ""

#: _pytest.config.argparsing.Parser.addini:5 of
msgid "Type of the variable. Can be:      * ``string``: a string     * ``bool``: a boolean     * ``args``: a list of strings, separated as in a shell     * ``linelist``: a list of strings, separated by line breaks     * ``paths``: a list of :class:`pathlib.Path`, separated as in a shell     * ``pathlist``: a list of ``py.path``, separated as in a shell  For ``paths`` and ``pathlist`` types, they are considered relative to the ini-file. In case the execution is happening without an ini-file defined, they will be considered relative to the current working directory (for example with ``--override-ini``).  .. versionadded:: 7.0     The ``paths`` variable type.  .. versionadded:: 8.1     Use the current working directory to resolve ``paths`` and ``pathlist`` in the absence of an ini-file.  Defaults to ``string`` if ``None`` or not passed."
msgstr ""

#: _pytest.config.argparsing.Parser.addini:6 of
msgid "Type of the variable. Can be:"
msgstr ""

#: _pytest.config.argparsing.Parser.addini:8 of
msgid "``string``: a string"
msgstr ""

#: _pytest.config.argparsing.Parser.addini:9 of
msgid "``bool``: a boolean"
msgstr ""

#: _pytest.config.argparsing.Parser.addini:10 of
msgid "``args``: a list of strings, separated as in a shell"
msgstr ""

#: _pytest.config.argparsing.Parser.addini:11 of
msgid "``linelist``: a list of strings, separated by line breaks"
msgstr ""

#: _pytest.config.argparsing.Parser.addini:12 of
msgid "``paths``: a list of :class:`pathlib.Path`, separated as in a shell"
msgstr ""

#: _pytest.config.argparsing.Parser.addini:13 of
msgid "``pathlist``: a list of ``py.path``, separated as in a shell"
msgstr ""

#: _pytest.config.argparsing.Parser.addini:15 of
msgid "For ``paths`` and ``pathlist`` types, they are considered relative to the ini-file. In case the execution is happening without an ini-file defined, they will be considered relative to the current working directory (for example with ``--override-ini``)."
msgstr ""

#: _pytest.config.argparsing.Parser.addini:19 of
msgid "The ``paths`` variable type."
msgstr ""

#: _pytest.config.argparsing.Parser.addini:22 of
msgid "Use the current working directory to resolve ``paths`` and ``pathlist`` in the absence of an ini-file."
msgstr ""

#: _pytest.config.argparsing.Parser.addini:25 of
msgid "Defaults to ``string`` if ``None`` or not passed."
msgstr ""

#: _pytest.config.argparsing.Parser.addini:26 of
msgid "Default value if no ini-file option exists but is queried."
msgstr ""

#: _pytest.config.argparsing.Parser.addini:29 of
msgid "The value of ini-variables can be retrieved via a call to :py:func:`config.getini(name) <pytest.Config.getini>`."
msgstr ""

#: ../../reference/reference.rst:1003
msgid "OptionGroup"
msgstr ""

#: _pytest.config.argparsing.OptionGroup:1 of
msgid "A group of options shown in its own section."
msgstr ""

#: _pytest.config.argparsing.OptionGroup.addoption:1 of
msgid "Add an option to this group."
msgstr ""

#: _pytest.config.argparsing.OptionGroup.addoption:3 of
msgid "If a shortened version of a long option is specified, it will be suppressed in the help. ``addoption('--twowords', '--two-words')`` results in help showing ``--two-words`` only, but ``--twowords`` gets accepted **and** the automatic destination is in ``args.twowords``."
msgstr ""

#: _pytest.config.PytestPluginManager:1 of
msgid "Bases: :py:class:`~pluggy._manager.PluginManager`"
msgstr ""

#: _pytest.config.PytestPluginManager:1 of
msgid "A :py:class:`pluggy.PluginManager <pluggy.PluginManager>` with additional pytest-specific functionality:"
msgstr ""

#: _pytest.config.PytestPluginManager:4 of
msgid "Loading plugins from the command line, ``PYTEST_PLUGINS`` env variable and ``pytest_plugins`` global variables found in plugins being loaded."
msgstr ""

#: _pytest.config.PytestPluginManager:6 of
msgid "``conftest.py`` loading during start-up."
msgstr ""

#: _pytest.config.PytestPluginManager.register:1 of
msgid "Register a plugin and return its name."
msgstr ""

#: _pytest.config.PytestPluginManager.register:3 of
msgid "The name under which to register the plugin. If not specified, a name is generated using :func:`get_canonical_name`."
msgstr ""

#: _pytest.config.PytestPluginManager.register:7 of
msgid "The plugin name. If the name is blocked from registering, returns ``None``."
msgstr ""

#: _pytest.config.PytestPluginManager.register:11 of
msgid "If the plugin is already registered, raises a :exc:`ValueError`."
msgstr ""

#: _pytest.config.PytestPluginManager.hasplugin:1 of
#: pluggy._manager.PluginManager.has_plugin:1
msgid "Return whether a plugin with the given name is registered."
msgstr ""

#: _pytest.config.PytestPluginManager.import_plugin:1 of
msgid "Import a plugin with ``modname``."
msgstr ""

#: _pytest.config.PytestPluginManager.import_plugin:3 of
msgid "If ``consider_entry_points`` is True, entry point names are also considered to find a plugin."
msgstr ""

#: of pluggy._manager.PluginManager.add_hookcall_monitoring:1
msgid "Add before/after tracing functions for all hooks."
msgstr ""

#: of pluggy._manager.PluginManager.add_hookcall_monitoring:3
msgid "Returns an undo function which, when called, removes the added tracers."
msgstr ""

#: of pluggy._manager.PluginManager.add_hookcall_monitoring:5
msgid "``before(hook_name, hook_impls, kwargs)`` will be called ahead of all hook calls and receive a hookcaller instance, a list of HookImpl instances and the keyword arguments for the hook call."
msgstr ""

#: of pluggy._manager.PluginManager.add_hookcall_monitoring:9
msgid "``after(outcome, hook_name, hook_impls, kwargs)`` receives the same arguments as ``before`` but also a :class:`~pluggy.Result` object which represents the result of the overall hook call."
msgstr ""

#: of pluggy._manager.PluginManager.add_hookspecs:1
msgid "Add new hook specifications defined in the given ``module_or_class``."
msgstr ""

#: of pluggy._manager.PluginManager.add_hookspecs:3
msgid "Functions are recognized as hook specifications if they have been decorated with a matching :class:`HookspecMarker`."
msgstr ""

#: of pluggy._manager.PluginManager.check_pending:1
msgid "Verify that all hooks which have not been verified against a hook specification are optional, otherwise raise :exc:`PluginValidationError`."
msgstr ""

#: of pluggy._manager.PluginManager.enable_tracing:1
msgid "Enable tracing of hook calls."
msgstr ""

#: of pluggy._manager.PluginManager.enable_tracing:3
msgid "Returns an undo function which, when called, removes the added tracing."
msgstr ""

#: of pluggy._manager.PluginManager.get_canonical_name:1
msgid "Return a canonical name for a plugin object."
msgstr ""

#: of pluggy._manager.PluginManager.get_canonical_name:3
msgid "Note that a plugin may be registered under a different name specified by the caller of :meth:`register(plugin, name) <register>`. To obtain the name of a registered plugin use :meth:`get_name(plugin) <get_name>` instead."
msgstr ""

#: of pluggy._manager.PluginManager.get_hookcallers:1
msgid "Get all hook callers for the specified plugin."
msgstr ""

#: of pluggy._manager.PluginManager.get_hookcallers:3
msgid "The hook callers, or ``None`` if ``plugin`` is not registered in this plugin manager."
msgstr ""

#: of pluggy._manager.PluginManager.get_name:1
msgid "Return the name the plugin is registered under, or ``None`` if is isn't."
msgstr ""

#: of pluggy._manager.PluginManager.get_plugin:1
msgid "Return the plugin registered under the given name, if any."
msgstr ""

#: of pluggy._manager.PluginManager.get_plugins:1
msgid "Return a set of all registered plugin objects."
msgstr ""

#: of pluggy._manager.PluginManager.is_blocked:1
msgid "Return whether the given plugin name is blocked."
msgstr ""

#: of pluggy._manager.PluginManager.is_registered:1
msgid "Return whether the plugin is already registered."
msgstr ""

#: of pluggy._manager.PluginManager.list_name_plugin:1
msgid "Return a list of (name, plugin) pairs for all registered plugins."
msgstr ""

#: of pluggy._manager.PluginManager.list_plugin_distinfo:1
msgid "Return a list of (plugin, distinfo) pairs for all setuptools-registered plugins."
msgstr ""

#: of pluggy._manager.PluginManager.load_setuptools_entrypoints:1
msgid "Load modules from querying the specified setuptools ``group``."
msgstr ""

#: of pluggy._manager.PluginManager.load_setuptools_entrypoints:3
msgid "Entry point group to load plugins."
msgstr ""

#: of pluggy._manager.PluginManager.load_setuptools_entrypoints:5
msgid "If given, loads only plugins with the given ``name``."
msgstr ""

#: of pluggy._manager.PluginManager.load_setuptools_entrypoints:8
msgid "The number of plugins loaded by this call."
msgstr ""

#: of pluggy._manager.PluginManager.set_blocked:1
msgid "Block registrations of the given name, unregister if already registered."
msgstr ""

#: of pluggy._manager.PluginManager.subset_hook_caller:1
msgid "Return a proxy :class:`~pluggy.HookCaller` instance for the named method which manages calls to all registered plugins except the ones from remove_plugins."
msgstr ""

#: of pluggy._manager.PluginManager.unblock:1
msgid "Unblocks a name."
msgstr ""

#: of pluggy._manager.PluginManager.unblock:3
msgid "Returns whether the name was actually blocked."
msgstr ""

#: of pluggy._manager.PluginManager.unregister:1
msgid "Unregister a plugin and all of its hook implementations."
msgstr ""

#: of pluggy._manager.PluginManager.unregister:3
msgid "The plugin can be specified either by the plugin object or the plugin name. If both are specified, they must agree."
msgstr ""

#: of pluggy._manager.PluginManager.unregister:6
msgid "Returns the unregistered plugin, or ``None`` if not found."
msgstr ""

#: ../../../../docstring of pytest.PytestPluginManager.project_name:1
msgid "The project name."
msgstr ""

#: ../../../../docstring of pytest.PytestPluginManager.hook:1
msgid "The \"hook relay\", used to call a hook on all registered plugins. See :ref:`calling`."
msgstr ""

#: ../../../../docstring of pytest.PytestPluginManager.trace:1
msgid "The tracing entry point. See :ref:`tracing`."
msgstr ""

#: ../../reference/reference.rst:1018
msgid "TestReport"
msgstr ""

#: _pytest.reports.TestReport:1 of
msgid "Basic test report object (also used for setup and teardown calls if they fail)."
msgstr ""

#: ../../../../docstring of pytest.TestReport.location:1
msgid "A (filesystempath, lineno, domaininfo) tuple indicating the actual location of a test item - it might be different from the collected one e.g. if a method is inherited from a different module. The filesystempath may be relative to ``config.rootdir``. The line number is 0-based."
msgstr ""

#: ../../../../docstring of pytest.TestReport.keywords:1
msgid "A name -> value dictionary containing all keywords and markers associated with a test invocation."
msgstr ""

#: ../../../../docstring of pytest.TestReport.when:1
msgid "One of 'setup', 'call', 'teardown' to indicate runtest phase."
msgstr ""

#: ../../../../docstring of pytest.TestReport.user_properties:1
msgid "User properties is a list of tuples (name, value) that holds user defined properties of the test."
msgstr ""

#: ../../../../docstring of pytest.TestReport.duration:1
msgid "Time it took to run just the test."
msgstr ""

#: _pytest.reports.TestReport.from_item_and_call:1 of
msgid "Create and fill a TestReport with standard item and call info."
msgstr ""

#: _pytest.reports.TestReport.from_item_and_call:4 of
msgid "The call info."
msgstr ""

#: ../../reference/reference.rst:1026
msgid "TestShortLogReport"
msgstr ""

#: _pytest.terminal.TestShortLogReport:1 of
#, python-brace-format
msgid "Used to store the test status result category, shortletter and verbose word. For example ``\"rerun\", \"R\", (\"RERUN\", {\"yellow\": True})``."
msgstr ""

#: _pytest.terminal.TestShortLogReport:4 of
msgid "The class of result, for example ``“passed”``, ``“skipped”``, ``“error”``, or the empty string."
msgstr ""

#: _pytest.terminal.TestShortLogReport:7 of
msgid "The short letter shown as testing progresses, for example ``\".\"``, ``\"s\"``, ``\"E\"``, or the empty string."
msgstr ""

#: _pytest.terminal.TestShortLogReport:10 of
msgid "Verbose word is shown as testing progresses in verbose mode, for example ``\"PASSED\"``, ``\"SKIPPED\"``, ``\"ERROR\"``, or the empty string."
msgstr ""

#: ../../../../docstring of pytest.TestShortLogReport.category:1
msgid "Alias for field number 0"
msgstr ""

#: ../../../../docstring of pytest.TestShortLogReport.letter:1
msgid "Alias for field number 1"
msgstr ""

#: ../../../../docstring of pytest.TestShortLogReport.word:1
msgid "Alias for field number 2"
msgstr ""

#: ../../reference/reference.rst:1032
msgid "Result"
msgstr ""

#: ../../reference/reference.rst:1034
msgid "Result object used within :ref:`hook wrappers <hookwrapper>`, see :py:class:`Result in the pluggy documentation <pluggy.Result>` for more information."
msgstr ""

#: _pytest.stash.Stash:1 of
msgid "``Stash`` is a type-safe heterogeneous mutable mapping that allows keys and value types to be defined separately from where it (the ``Stash``) is created."
msgstr ""

#: _pytest.stash.Stash:5 of
msgid "Usually you will be given an object which has a ``Stash``, for example :class:`~pytest.Config` or a :class:`~_pytest.nodes.Node`:"
msgstr ""

#: _pytest.stash.Stash:12 of
msgid "If a module or plugin wants to store data in this ``Stash``, it creates :class:`StashKey`\\s for its keys (at the module level):"
msgstr ""

#: _pytest.stash.Stash:21 of
msgid "To store information:"
msgstr ""

#: _pytest.stash.Stash:29 of
msgid "To retrieve the information:"
msgstr ""

#: _pytest.stash.Stash.__setitem__:1 of
msgid "Set a value for key."
msgstr ""

#: _pytest.stash.Stash.__getitem__:1 of
msgid "Get the value for key."
msgstr ""

#: _pytest.stash.Stash.__delitem__:3 _pytest.stash.Stash.__getitem__:3 of
msgid "Raises ``KeyError`` if the key wasn't set before."
msgstr ""

#: _pytest.stash.Stash.get:1 of
msgid "Get the value for key, or return default if the key wasn't set before."
msgstr ""

#: _pytest.stash.Stash.setdefault:1 of
msgid "Return the value of key if already set, otherwise set the value of key to default and return default."
msgstr ""

#: _pytest.stash.Stash.__delitem__:1 of
msgid "Delete the value for key."
msgstr ""

#: _pytest.stash.Stash.__contains__:1 of
msgid "Return whether key was set."
msgstr ""

#: _pytest.stash.Stash.__len__:1 of
msgid "Return how many items exist in the stash."
msgstr ""

#: _pytest.stash.StashKey:1 of
msgid "Bases: :py:class:`~typing.Generic`\\ [:py:obj:`~_pytest.stash.T`]"
msgstr ""

#: _pytest.stash.StashKey:1 of
msgid "``StashKey`` is an object used as a key to a :class:`Stash`."
msgstr ""

#: _pytest.stash.StashKey:3 of
msgid "A ``StashKey`` is associated with the type ``T`` of the value of the key."
msgstr ""

#: _pytest.stash.StashKey:5 of
msgid "A ``StashKey`` is unique and cannot conflict with another key."
msgstr ""

#: ../../reference/reference.rst:1049
msgid "Global Variables"
msgstr ""

#: ../../reference/reference.rst:1051
msgid "pytest treats some global variables in a special manner when defined in a test module or ``conftest.py`` files."
msgstr ""

#: ../../reference/reference.rst:1057 ../../reference/reference.rst:1069
msgid "**Tutorial**: :ref:`customizing-test-collection`"
msgstr ""

#: ../../reference/reference.rst:1059
msgid "Can be declared in *conftest.py files* to exclude test directories or modules. Needs to be a list of paths (``str``, :class:`pathlib.Path` or any :class:`os.PathLike`)."
msgstr ""

#: ../../reference/reference.rst:1071
msgid "Can be declared in *conftest.py files* to exclude test directories or modules with Unix shell-style wildcards. Needs to be ``list[str]`` where ``str`` can contain glob patterns."
msgstr ""

#: ../../reference/reference.rst:1082
msgid "**Tutorial**: :ref:`available installable plugins`"
msgstr ""

#: ../../reference/reference.rst:1084
msgid "Can be declared at the **global** level in *test modules* and *conftest.py files* to register additional plugins. Can be either a ``str`` or ``Sequence[str]``."
msgstr ""

#: ../../reference/reference.rst:1098
msgid "**Tutorial**: :ref:`scoped-marking`"
msgstr ""

#: ../../reference/reference.rst:1100
msgid "Can be declared at the **global** level in *test modules* to apply one or more :ref:`marks <marks ref>` to all test functions and methods. Can be either a single mark or a list of marks (applied in left-to-right order)."
msgstr ""

#: ../../reference/reference.rst:1118
msgid "Environment Variables"
msgstr ""

#: ../../reference/reference.rst:1120
msgid "Environment variables that can be used to change pytest's behavior."
msgstr ""

#: ../../reference/reference.rst:1124
msgid "When set (regardless of value), pytest acknowledges that is running in a CI process. Alternative to ``BUILD_NUMBER`` variable. See also :ref:`ci-pipelines`."
msgstr ""

#: ../../reference/reference.rst:1128
msgid "When set (regardless of value), pytest acknowledges that is running in a CI process. Alternative to CI variable. See also :ref:`ci-pipelines`."
msgstr ""

#: ../../reference/reference.rst:1132
msgid "This contains a command-line (parsed by the py:mod:`shlex` module) that will be **prepended** to the command line given by the user, see :ref:`adding default options` for more information."
msgstr ""

#: ../../reference/reference.rst:1137
msgid "This environment variable is defined at the start of the pytest session and is undefined afterwards. It contains the value of ``pytest.__version__``, and among other things can be used to easily check if a code is running from within a pytest run."
msgstr ""

#: ../../reference/reference.rst:1142
msgid "This is not meant to be set by users, but is set by pytest internally with the name of the current test so other processes can inspect it, see :ref:`pytest current test env` for more information."
msgstr ""

#: ../../reference/reference.rst:1147
msgid "When set, pytest will print tracing and debug information."
msgstr ""

#: ../../reference/reference.rst:1151
msgid "Root for temporary directories produced by fixtures like :fixture:`tmp_path` as discussed in :ref:`temporary directory location and retention`."
msgstr ""

#: ../../reference/reference.rst:1156
msgid "When set, disables plugin auto-loading through :std:doc:`entry point packaging metadata <packaging:guides/creating-and-discovering-plugins>`. Only explicitly specified plugins will be loaded."
msgstr ""

#: ../../reference/reference.rst:1162
msgid "Contains comma-separated list of modules that should be loaded as plugins:"
msgstr ""

#: ../../reference/reference.rst:1170
msgid "Sets a `pygment style <https://pygments.org/docs/styles/>`_ to use for the code output."
msgstr ""

#: ../../reference/reference.rst:1174
msgid "Sets the :envvar:`PYTEST_THEME` to be either *dark* or *light*."
msgstr ""

#: ../../reference/reference.rst:1178
msgid "When set to ``1``, pytest will use color in terminal output. When set to ``0``, pytest will not use color. ``PY_COLORS`` takes precedence over ``NO_COLOR`` and ``FORCE_COLOR``."
msgstr ""

#: ../../reference/reference.rst:1184
msgid "When set to a non-empty string (regardless of value), pytest will not use color in terminal output. ``PY_COLORS`` takes precedence over ``NO_COLOR``, which takes precedence over ``FORCE_COLOR``. See `no-color.org <https://no-color.org/>`__ for other libraries supporting this community standard."
msgstr ""

#: ../../reference/reference.rst:1190
msgid "When set to a non-empty string (regardless of value), pytest will use color in terminal output. ``PY_COLORS`` and ``NO_COLOR`` take precedence over ``FORCE_COLOR``."
msgstr ""

#: ../../reference/reference.rst:1194
msgid "Exceptions"
msgstr ""

#: _pytest.config.exceptions.UsageError:1 of
msgid "Error in pytest usage or invocation."
msgstr ""

#: _pytest.fixtures.FixtureLookupError:1 of
msgid "Bases: :py:class:`LookupError`"
msgstr ""

#: _pytest.fixtures.FixtureLookupError:1 of
msgid "Could not return a requested fixture (missing or invalid)."
msgstr ""

#: ../../reference/reference.rst:1205
msgid "Warnings"
msgstr ""

#: ../../reference/reference.rst:1207
msgid "Custom warnings generated in some situations such as improper usage or deprecated features."
msgstr ""

#: of pytest.PytestWarning:1
msgid "Bases: :py:class:`UserWarning`"
msgstr ""

#: of pytest.PytestWarning:1
msgid "Base class for all warnings emitted by pytest."
msgstr ""

#: of pytest.PytestAssertRewriteWarning:1 pytest.PytestCacheWarning:1
#: pytest.PytestCollectionWarning:1 pytest.PytestConfigWarning:1
#: pytest.PytestReturnNotNoneWarning:1
#: pytest.PytestUnhandledThreadExceptionWarning:1
#: pytest.PytestUnknownMarkWarning:1 pytest.PytestUnraisableExceptionWarning:1
msgid "Bases: :py:class:`~pytest.PytestWarning`"
msgstr ""

#: of pytest.PytestAssertRewriteWarning:1
msgid "Warning emitted by the pytest assert rewrite module."
msgstr ""

#: of pytest.PytestCacheWarning:1
msgid "Warning emitted by the cache plugin in various situations."
msgstr ""

#: of pytest.PytestCollectionWarning:1
msgid "Warning emitted when pytest is not able to collect a file or symbol in a module."
msgstr ""

#: of pytest.PytestConfigWarning:1
msgid "Warning emitted for configuration issues."
msgstr ""

#: of pytest.PytestDeprecationWarning:1
msgid "Bases: :py:class:`~pytest.PytestWarning`, :py:class:`DeprecationWarning`"
msgstr ""

#: of pytest.PytestDeprecationWarning:1
msgid "Warning class for features that will be removed in a future version."
msgstr ""

#: of pytest.PytestExperimentalApiWarning:1
msgid "Bases: :py:class:`~pytest.PytestWarning`, :py:class:`FutureWarning`"
msgstr ""

#: of pytest.PytestExperimentalApiWarning:1
msgid "Warning category used to denote experiments in pytest."
msgstr ""

#: of pytest.PytestExperimentalApiWarning:3
msgid "Use sparingly as the API might change or even be removed completely in a future version."
msgstr ""

#: of pytest.PytestReturnNotNoneWarning:1
msgid "Warning emitted when a test function is returning value other than None."
msgstr ""

#: of pytest.PytestRemovedIn9Warning:1
msgid "Bases: :py:class:`~pytest.PytestDeprecationWarning`"
msgstr ""

#: of pytest.PytestRemovedIn9Warning:1
msgid "Warning class for features that will be removed in pytest 9."
msgstr ""

#: of pytest.PytestUnhandledCoroutineWarning:1
msgid "Bases: :py:class:`~pytest.PytestReturnNotNoneWarning`"
msgstr ""

#: of pytest.PytestUnhandledCoroutineWarning:1
msgid "Warning emitted for an unhandled coroutine."
msgstr ""

#: of pytest.PytestUnhandledCoroutineWarning:3
msgid "A coroutine was encountered when collecting test functions, but was not handled by any async-aware plugin. Coroutine test functions are not natively supported."
msgstr ""

#: of pytest.PytestUnknownMarkWarning:1
msgid "Warning emitted on use of unknown markers."
msgstr ""

#: of pytest.PytestUnknownMarkWarning:3
msgid "See :ref:`mark` for details."
msgstr ""

#: of pytest.PytestUnraisableExceptionWarning:1
msgid "An unraisable exception was reported."
msgstr ""

#: of pytest.PytestUnraisableExceptionWarning:3
msgid "Unraisable exceptions are exceptions raised in :meth:`__del__ <object.__del__>` implementations and similar situations when the exception cannot be raised as normal."
msgstr ""

#: of pytest.PytestUnhandledThreadExceptionWarning:1
msgid "An unhandled exception occurred in a :class:`~threading.Thread`."
msgstr ""

#: of pytest.PytestUnhandledThreadExceptionWarning:3
msgid "Such exceptions don't propagate normally."
msgstr ""

#: ../../reference/reference.rst:1249
msgid "Consult the :ref:`internal-warnings` section in the documentation for more information."
msgstr ""

#: ../../reference/reference.rst:1255
msgid "Configuration Options"
msgstr ""

#: ../../reference/reference.rst:1257
msgid "Here is a list of builtin configuration options that may be written in a ``pytest.ini`` (or ``.pytest.ini``), ``pyproject.toml``, ``tox.ini``, or ``setup.cfg`` file, usually located at the root of your repository."
msgstr ""

#: ../../reference/reference.rst:1260
msgid "To see each file format in details, see :ref:`config file formats`."
msgstr ""

#: ../../reference/reference.rst:1263
msgid "Usage of ``setup.cfg`` is not recommended except for very simple use cases. ``.cfg`` files use a different parser than ``pytest.ini`` and ``tox.ini`` which might cause hard to track down problems. When possible, it is recommended to use the latter files, or ``pyproject.toml``, to hold your pytest configuration."
msgstr ""

#: ../../reference/reference.rst:1268
msgid "Configuration options may be overwritten in the command-line by using ``-o/--override-ini``, which can also be passed multiple times. The expected format is ``name=value``. For example::"
msgstr ""

#: ../../reference/reference.rst:1276
msgid "Add the specified ``OPTS`` to the set of command line arguments as if they had been specified by the user. Example: if you have this ini file content:"
msgstr ""

#: ../../reference/reference.rst:1285
msgid "issuing ``pytest test_hello.py`` actually means:"
msgstr ""

#: ../../reference/reference.rst:1291
msgid "Default is to add no options."
msgstr ""

#: ../../reference/reference.rst:1296
msgid "Sets the directory where the cache plugin's content is stored. Default directory is ``.pytest_cache`` which is created in :ref:`rootdir <rootdir>`. Directory may be relative or absolute path. If setting relative path, then directory is created relative to :ref:`rootdir <rootdir>`. Additionally, a path may contain environment variables, that will be expanded. For more information about cache plugin please refer to :ref:`cache_provider`."
msgstr ""

#: ../../reference/reference.rst:1305
msgid "Controls if pytest should attempt to identify `namespace packages <https://packaging.python.org/en/latest/guides/packaging-namespace-packages>`__ when collecting Python modules. Default is ``False``."
msgstr ""

#: ../../reference/reference.rst:1308
msgid "Set to ``True`` if the package you are testing is part of a namespace package."
msgstr ""

#: ../../reference/reference.rst:1310
msgid "Only `native namespace packages <https://packaging.python.org/en/latest/guides/packaging-namespace-packages/#native-namespace-packages>`__ are supported, with no plans to support `legacy namespace packages <https://packaging.python.org/en/latest/guides/packaging-namespace-packages/#legacy-namespace-packages>`__."
msgstr ""

#: ../../reference/reference.rst:1317
msgid "Sets the console output style while running tests:"
msgstr ""

#: ../../reference/reference.rst:1319
msgid "``classic``: classic pytest output."
msgstr ""

#: ../../reference/reference.rst:1320
msgid "``progress``: like classic pytest output, but with a progress indicator."
msgstr ""

#: ../../reference/reference.rst:1321
msgid "``progress-even-when-capture-no``: allows the use of the progress indicator even when ``capture=no``."
msgstr ""

#: ../../reference/reference.rst:1322
msgid "``count``: like progress, but shows progress as the number of tests completed instead of a percent."
msgstr ""

#: ../../reference/reference.rst:1324
msgid "The default is ``progress``, but you can fallback to ``classic`` if you prefer or the new mode is causing unexpected problems:"
msgstr ""

#: ../../reference/reference.rst:1338
msgid "Default encoding to use to decode text files with docstrings. :ref:`See how pytest handles doctests <doctest>`."
msgstr ""

#: ../../reference/reference.rst:1344
msgid "One or more doctest flag names from the standard ``doctest`` module. :ref:`See how pytest handles doctests <doctest>`."
msgstr ""

#: ../../reference/reference.rst:1352
msgid "Allows to pick the action for empty parametersets in parameterization"
msgstr ""

#: ../../reference/reference.rst:1354
msgid "``skip`` skips tests with an empty parameterset (default)"
msgstr ""

#: ../../reference/reference.rst:1355
msgid "``xfail`` marks tests with an empty parameterset as xfail(run=False)"
msgstr ""

#: ../../reference/reference.rst:1356
msgid "``fail_at_collect`` raises an exception if parametrize collects an empty parameter set"
msgstr ""

#: ../../reference/reference.rst:1366
msgid "The default value of this option is planned to change to ``xfail`` in future releases as this is considered less error prone, see :issue:`3155` for more details."
msgstr ""

#: ../../reference/reference.rst:1372
msgid "Dumps the tracebacks of all threads if a test takes longer than ``X`` seconds to run (including fixture setup and teardown). Implemented using the :func:`faulthandler.dump_traceback_later` function, so all caveats there apply."
msgstr ""

#: ../../reference/reference.rst:1382
msgid "For more information please refer to :ref:`faulthandler`."
msgstr ""

#: ../../reference/reference.rst:1388
msgid "Sets a list of filters and actions that should be taken for matched warnings. By default all warnings emitted during the test session will be displayed in a summary at the end of the test session."
msgstr ""

#: ../../reference/reference.rst:1400
msgid "This tells pytest to ignore deprecation warnings and turn all other warnings into errors. For more information please refer to :ref:`warnings`."
msgstr ""

#: ../../reference/reference.rst:1408
msgid "Configures how durations are recorded into the JUnit XML report:"
msgstr ""

#: ../../reference/reference.rst:1410
msgid "``total`` (the default): duration times reported include setup, call, and teardown times."
msgstr ""

#: ../../reference/reference.rst:1411
msgid "``call``: duration times reported include only call times, excluding setup and teardown."
msgstr ""

#: ../../reference/reference.rst:1422
msgid "Default changed to ``xunit2``."
msgstr ""

#: ../../reference/reference.rst:1425
msgid "Configures the format of the generated JUnit XML file. The possible options are:"
msgstr ""

#: ../../reference/reference.rst:1427
msgid "``xunit1`` (or ``legacy``): produces old style output, compatible with the xunit 1.0 format."
msgstr ""

#: ../../reference/reference.rst:1428
msgid "``xunit2``: produces `xunit 2.0 style output <https://github.com/jenkinsci/xunit-plugin/blob/xunit-2.3.2/src/main/resources/org/jenkinsci/plugins/xunit/types/model/xsd/junit-10.xsd>`__, which should be more compatible with latest Jenkins versions.  **This is the default**."
msgstr ""

#: ../../reference/reference.rst:1439
msgid "``log``, ``all``, ``out-err`` options added."
msgstr ""

#: ../../reference/reference.rst:1442
msgid "Configures if captured output should be written to the JUnit XML file. Valid values are:"
msgstr ""

#: ../../reference/reference.rst:1444
msgid "``log``: write only ``logging`` captured output."
msgstr ""

#: ../../reference/reference.rst:1445
msgid "``system-out``: write captured ``stdout`` contents."
msgstr ""

#: ../../reference/reference.rst:1446
msgid "``system-err``: write captured ``stderr`` contents."
msgstr ""

#: ../../reference/reference.rst:1447
msgid "``out-err``: write both captured ``stdout`` and ``stderr`` contents."
msgstr ""

#: ../../reference/reference.rst:1448
msgid "``all``: write captured ``logging``, ``stdout`` and ``stderr`` contents."
msgstr ""

#: ../../reference/reference.rst:1449
msgid "``no`` (the default): no captured output is written."
msgstr ""

#: ../../reference/reference.rst:1461
msgid "If ``junit_logging != \"no\"``, configures if the captured output should be written to the JUnit XML file for **passing** tests. Default is ``True``."
msgstr ""

#: ../../reference/reference.rst:1472
msgid "To set the name of the root test suite xml item, you can configure the ``junit_suite_name`` option in your config file:"
msgstr ""

#: ../../reference/reference.rst:1481
msgid "Allow selective auto-indentation of multiline log messages."
msgstr ""

#: ../../reference/reference.rst:1483
msgid "Supports command line option ``--log-auto-indent [value]`` and config option ``log_auto_indent = [value]`` to set the auto-indentation behavior for all logging."
msgstr ""

#: ../../reference/reference.rst:1487
msgid "``[value]`` can be:"
msgstr ""

#: ../../reference/reference.rst:1488
msgid "True or \"On\" - Dynamically auto-indent multiline log messages"
msgstr ""

#: ../../reference/reference.rst:1489
msgid "False or \"Off\" or 0 - Do not auto-indent multiline log messages (the default behavior)"
msgstr ""

#: ../../reference/reference.rst:1490
msgid "[positive integer] - auto-indent multiline log messages by [value] spaces"
msgstr ""

#: ../../reference/reference.rst:1497
#, python-brace-format
msgid "Supports passing kwarg ``extra={\"auto_indent\": [value]}`` to calls to ``logging.log()`` to specify auto-indentation behavior for a specific entry in the log. ``extra`` kwarg overrides the value specified on the command line or in the config."
msgstr ""

#: ../../reference/reference.rst:1504
msgid "Enable log display during test run (also known as :ref:`\"live logging\" <live_logs>`). The default is ``False``."
msgstr ""

#: ../../reference/reference.rst:1516
msgid "Sets a :py:func:`time.strftime`-compatible string that will be used when formatting dates for live logging."
msgstr ""

#: ../../reference/reference.rst:1523 ../../reference/reference.rst:1536
#: ../../reference/reference.rst:1551
msgid "For more information, see :ref:`live_logs`."
msgstr ""

#: ../../reference/reference.rst:1529
msgid "Sets a :py:mod:`logging`-compatible string used to format live logging messages."
msgstr ""

#: ../../reference/reference.rst:1543
msgid "Sets the minimum log message level that should be captured for live logging. The integer value or the names of the levels can be used."
msgstr ""

#: ../../reference/reference.rst:1558
msgid "Sets a :py:func:`time.strftime`-compatible string that will be used when formatting dates for logging capture."
msgstr ""

#: ../../reference/reference.rst:1565 ../../reference/reference.rst:1580
#: ../../reference/reference.rst:1594 ../../reference/reference.rst:1607
#: ../../reference/reference.rst:1621 ../../reference/reference.rst:1635
#: ../../reference/reference.rst:1650
msgid "For more information, see :ref:`logging`."
msgstr ""

#: ../../reference/reference.rst:1572
msgid "Sets a file name relative to the current working directory where log messages should be written to, in addition to the other logging facilities that are active."
msgstr ""

#: ../../reference/reference.rst:1587
msgid "Sets a :py:func:`time.strftime`-compatible string that will be used when formatting dates for the logging file."
msgstr ""

#: ../../reference/reference.rst:1600
msgid "Sets a :py:mod:`logging`-compatible string used to format logging messages redirected to the logging file."
msgstr ""

#: ../../reference/reference.rst:1613
msgid "Sets the minimum log message level that should be captured for the logging file. The integer value or the names of the levels can be used."
msgstr ""

#: ../../reference/reference.rst:1628
msgid "Sets a :py:mod:`logging`-compatible string used to format captured logging messages."
msgstr ""

#: ../../reference/reference.rst:1642
msgid "Sets the minimum log message level that should be captured for logging capture. The integer value or the names of the levels can be used."
msgstr ""

#: ../../reference/reference.rst:1655
msgid "When the ``--strict-markers`` or ``--strict`` command-line arguments are used, only known markers - defined in code by core pytest or some plugin - are allowed."
msgstr ""

#: ../../reference/reference.rst:1658
msgid "You can list additional markers in this setting to add them to the whitelist, in which case you probably want to add ``--strict-markers`` to ``addopts`` to avoid future regressions:"
msgstr ""

#: ../../reference/reference.rst:1671
msgid "The use of ``--strict-markers`` is highly preferred. ``--strict`` was kept for backward compatibility only and may be confusing for others as it only applies to markers and not to other options."
msgstr ""

#: ../../reference/reference.rst:1677
msgid "Specifies a minimal pytest version required for running tests."
msgstr ""

#: ../../reference/reference.rst:1688
msgid "Set the directory basename patterns to avoid when recursing for test discovery.  The individual (fnmatch-style) patterns are applied to the basename of a directory to decide if to recurse into it. Pattern matching characters::"
msgstr ""

#: ../../reference/reference.rst:1698
#, python-brace-format
msgid "Default patterns are ``'*.egg'``, ``'.*'``, ``'_darcs'``, ``'build'``, ``'CVS'``, ``'dist'``, ``'node_modules'``, ``'venv'``, ``'{arch}'``. Setting a ``norecursedirs`` replaces the default.  Here is an example of how to avoid certain directories:"
msgstr ""

#: ../../reference/reference.rst:1708
msgid "This would tell ``pytest`` to not look into typical subversion or sphinx-build directories or into any ``tmp`` prefixed directory."
msgstr ""

#: ../../reference/reference.rst:1711
msgid "Additionally, ``pytest`` will attempt to intelligently identify and ignore a virtualenv.  Any directory deemed to be the root of a virtual environment will not be considered during test collection unless ``--collect-in-virtualenv`` is given.  Note also that ``norecursedirs`` takes precedence over ``--collect-in-virtualenv``; e.g. if you intend to run tests in a virtualenv with a base directory that matches ``'.*'`` you *must* override ``norecursedirs`` in addition to using the ``--collect-in-virtualenv`` flag."
msgstr ""

#: ../../reference/reference.rst:1723
msgid "One or more name prefixes or glob-style patterns determining which classes are considered for test collection. Search for multiple glob patterns by adding a space between patterns. By default, pytest will consider any class prefixed with ``Test`` as a test collection.  Here is an example of how to collect tests from classes that end in ``Suite``:"
msgstr ""

#: ../../reference/reference.rst:1734
msgid "Note that ``unittest.TestCase`` derived classes are always collected regardless of this option, as ``unittest``'s own collection framework is used to collect those tests."
msgstr ""

#: ../../reference/reference.rst:1741
msgid "One or more Glob-style file patterns determining which python files are considered as test modules. Search for multiple glob patterns by adding a space between patterns:"
msgstr ""

#: ../../reference/reference.rst:1750
msgid "Or one per line:"
msgstr ""

#: ../../reference/reference.rst:1760
msgid "By default, files matching ``test_*.py`` and ``*_test.py`` will be considered test modules."
msgstr ""

#: ../../reference/reference.rst:1766
msgid "One or more name prefixes or glob-patterns determining which test functions and methods are considered tests. Search for multiple glob patterns by adding a space between patterns. By default, pytest will consider any function prefixed with ``test`` as a test.  Here is an example of how to collect test functions and methods that end in ``_test``:"
msgstr ""

#: ../../reference/reference.rst:1777
msgid "Note that this has no effect on methods that live on a ``unittest.TestCase`` derived class, as ``unittest``'s own collection framework is used to collect those tests."
msgstr ""

#: ../../reference/reference.rst:1781
msgid "See :ref:`change naming conventions` for more detailed examples."
msgstr ""

#: ../../reference/reference.rst:1786
msgid "Sets list of directories that should be added to the python search path. Directories will be added to the head of :data:`sys.path`. Similar to the :envvar:`PYTHONPATH` environment variable, the directories will be included in where Python will look for imported modules. Paths are relative to the :ref:`rootdir <rootdir>` directory. Directories remain in path for the duration of the test session."
msgstr ""

#: ../../reference/reference.rst:1800
msgid "``pythonpath`` does not affect some imports that happen very early, most notably plugins loaded using the ``-p`` command line option."
msgstr ""

#: ../../reference/reference.rst:1806
msgid "A space separated list of plugins that must be present for pytest to run. Plugins can be listed with or without version specifiers directly following their name. Whitespace between different version specifiers is not allowed. If any one of the plugins is not found, emit an error."
msgstr ""

#: ../../reference/reference.rst:1819
msgid "Sets list of directories that should be searched for tests when no specific directories, files or test ids are given in the command line when executing pytest from the :ref:`rootdir <rootdir>` directory. File system paths may use shell-style wildcards, including the recursive ``**`` pattern."
msgstr ""

#: ../../reference/reference.rst:1825
msgid "Useful when all project tests are in a known location to speed up test collection and to avoid picking up undesired tests by accident."
msgstr ""

#: ../../reference/reference.rst:1833
msgid "This configuration means that executing:"
msgstr ""

#: ../../reference/reference.rst:1839
msgid "has the same practical effects as executing:"
msgstr ""

#: ../../reference/reference.rst:1850
msgid "How many sessions should we keep the `tmp_path` directories, according to `tmp_path_retention_policy`."
msgstr ""

#: ../../reference/reference.rst:1858
msgid "Default: ``3``"
msgstr ""

#: ../../reference/reference.rst:1865
msgid "Controls which directories created by the `tmp_path` fixture are kept around, based on test outcome."
msgstr ""

#: ../../reference/reference.rst:1868
msgid "`all`: retains directories for all tests, regardless of the outcome."
msgstr ""

#: ../../reference/reference.rst:1869
msgid "`failed`: retains directories only for tests with outcome `error` or `failed`."
msgstr ""

#: ../../reference/reference.rst:1870
msgid "`none`: directories are always removed after each test ends, regardless of the outcome."
msgstr ""

#: ../../reference/reference.rst:1877
msgid "Default: ``all``"
msgstr ""

#: ../../reference/reference.rst:1882
msgid "List of fixtures that will be applied to all test functions; this is semantically the same to apply the ``@pytest.mark.usefixtures`` marker to all test functions."
msgstr ""

#: ../../reference/reference.rst:1895
msgid "Set a verbosity level specifically for assertion related output, overriding the application wide level."
msgstr ""

#: ../../reference/reference.rst:1902 ../../reference/reference.rst:1915
msgid "Defaults to application wide verbosity level (via the ``-v`` command-line option). A special value of \"auto\" can be used to explicitly use the global verbosity level."
msgstr ""

#: ../../reference/reference.rst:1908
msgid "Set a verbosity level specifically for test case execution related output, overriding the application wide level."
msgstr ""

#: ../../reference/reference.rst:1921
msgid "If set to ``True``, tests marked with ``@pytest.mark.xfail`` that actually succeed will by default fail the test suite. For more information, see :ref:`xfail strict tutorial`."
msgstr ""

#: ../../reference/reference.rst:1935
msgid "Command-line Flags"
msgstr ""

#: ../../reference/reference.rst:1937
msgid "All the command-line flags can be obtained by running ``pytest --help``::"
msgstr ""

