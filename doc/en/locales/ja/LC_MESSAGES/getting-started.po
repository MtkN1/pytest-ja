# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, holger krekel and pytest-dev team
# This file is distributed under the same license as the pytest package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pytest 0.1.dev16209\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-05 00:52+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../getting-started.rst:4
msgid "Get Started"
msgstr "はじめに"

#: ../../getting-started.rst:10
msgid "Install ``pytest``"
msgstr "``pytest`` のインストール"

#: ../../getting-started.rst:12
msgid "``pytest`` requires: Python 3.8+ or PyPy3."
msgstr "``pytest`` の要件: Python 3.8+ または PyPy3。"

#: ../../getting-started.rst:14
msgid "Run the following command in your command line:"
msgstr "コマンドラインで次のコマンドを実行します:"

#: ../../getting-started.rst:20
msgid "Check that you installed the correct version:"
msgstr "正しいバージョンがインストールされたことを確認します:"

#: ../../getting-started.rst:30
msgid "Create your first test"
msgstr "最初のテストを作成する"

#: ../../getting-started.rst:32
msgid "Create a new file called ``test_sample.py``, containing a function, and a test:"
msgstr "``test_sample.py`` という新しいファイルを作成し、関数とテストを含めます:"

#: ../../getting-started.rst:44
msgid "The test"
msgstr "テスト"

#: ../../getting-started.rst:69
msgid "The ``[100%]`` refers to the overall progress of running all test cases. After it finishes, pytest then shows a failure report because ``func(3)`` does not return ``5``."
msgstr "``[100%]`` は、すべてのテストケースの実行全体の進行状況を示しています。終了後、pytest は ``func(3)`` が ``5`` を返さないため、失敗レポートを表示します。"

#: ../../getting-started.rst:73
msgid "You can use the ``assert`` statement to verify test expectations. pytest’s :ref:`Advanced assertion introspection <python:assert>` will intelligently report intermediate values of the assert expression so you can avoid the many names :ref:`of JUnit legacy methods <testcase-objects>`."
msgstr "``assert`` ステートメントを使用してテストの期待値を検証できます。pytest の :ref:`高度なアサーションイントロスペクション <python:assert>` は、アサーション式の中間値をインテリジェントに報告するため、:ref:`JUnit のレガシーメソッド <testcase-objects>` の多くの名前を避けることができます。"

#: ../../getting-started.rst:76
msgid "Run multiple tests"
msgstr "複数のテストを実行する"

#: ../../getting-started.rst:78
msgid "``pytest`` will run all files of the form test_*.py or \\*_test.py in the current directory and its subdirectories. More generally, it follows :ref:`standard test discovery rules <test discovery>`."
msgstr "``pytest`` は、現在のディレクトリおよびそのサブディレクトリ内の test_*.py または \\*_test.py 形式のすべてのファイルを実行します。より一般的には、:ref:`標準のテスト検出ルール <test discovery>` に従います。"

#: ../../getting-started.rst:82
msgid "Assert that a certain exception is raised"
msgstr "特定の例外が発生することをアサートする"

#: ../../getting-started.rst:84
msgid "Use the :ref:`raises <assertraises>` helper to assert that some code raises an exception:"
msgstr ":ref:`raises <assertraises>` ヘルパーを使用して、コードが例外を発生させることをアサートします:"

#: ../../getting-started.rst:100
msgid "You can also use the context provided by :ref:`raises <assertraises>` to assert that an expected exception is part of a raised :class:`ExceptionGroup`:"
msgstr ":ref:`raises <assertraises>` によって提供されるコンテキストを使用して、予期される例外が発生した :class:`ExceptionGroup` の一部であることをアサートすることもできます:"

#: ../../getting-started.rst:124
msgid "Execute the test function with “quiet” reporting mode:"
msgstr "“quiet” レポートモードでテスト関数を実行します:"

#: ../../getting-started.rst:134
msgid "The ``-q/--quiet`` flag keeps the output brief in this and following examples."
msgstr "``-q/--quiet`` フラグは、この例および次の例で出力を簡潔に保ちます。"

#: ../../getting-started.rst:137
msgid "Group multiple tests in a class"
msgstr "複数のテストをクラスにグループ化する"

#: ../../getting-started.rst:141
msgid "Once you develop multiple tests, you may want to group them into a class. pytest makes it easy to create a class containing more than one test:"
msgstr "複数のテストを開発したら、それらをクラスにグループ化することをお勧めします。pytest を使用すると、複数のテストを含むクラスを簡単に作成できます:"

#: ../../getting-started.rst:155
msgid "``pytest`` discovers all tests following its :ref:`Conventions for Python test discovery <test discovery>`, so it finds both ``test_`` prefixed functions. There is no need to subclass anything, but make sure to prefix your class with ``Test`` otherwise the class will be skipped. We can simply run the module by passing its filename:"
msgstr "``pytest`` は、:ref:`Python テスト検出の規約 <test discovery>` に従ってすべてのテストを検出するため、``test_`` プレフィックス付きの関数の両方を見つけます。何もサブクラス化する必要はありませんが、クラスに ``Test`` プレフィックスを付けることを確認してください。そうしないと、クラスがスキップされます。ファイル名を渡してモジュールを実行するだけです:"

#: ../../getting-started.rst:177
msgid "The first test passed and the second failed. You can easily see the intermediate values in the assertion to help you understand the reason for the failure."
msgstr "最初のテストは成功し、2 番目のテストは失敗しました。アサーションの中間値を簡単に確認できるため、失敗の理由を理解するのに役立ちます。"

#: ../../getting-started.rst:179
msgid "Grouping tests in classes can be beneficial for the following reasons:"
msgstr "テストをクラスにグループ化することには、次のような利点があります:"

#: ../../getting-started.rst:181
msgid "Test organization"
msgstr "テストの整理"

#: ../../getting-started.rst:182
msgid "Sharing fixtures for tests only in that particular class"
msgstr "特定のクラス内のテストのみのフィクスチャの共有"

#: ../../getting-started.rst:183
msgid "Applying marks at the class level and having them implicitly apply to all tests"
msgstr "クラスレベルでマークを適用し、それらをすべてのテストに暗黙的に適用する"

#: ../../getting-started.rst:185
msgid "Something to be aware of when grouping tests inside classes is that each test has a unique instance of the class. Having each test share the same class instance would be very detrimental to test isolation and would promote poor test practices. This is outlined below:"
msgstr "クラス内でテストをグループ化する際に注意すべき点は、各テストがクラスの一意のインスタンスを持つことです。各テストが同じクラスインスタンスを共有することは、テストの分離に非常に有害であり、悪いテストプラクティスを助長します。以下に概説します:"

#: ../../getting-started.rst:224
msgid "Note that attributes added at class level are *class attributes*, so they will be shared between tests."
msgstr "クラスレベルで追加された属性は *クラス属性* であるため、テスト間で共有されることに注意してください。"

#: ../../getting-started.rst:227
msgid "Request a unique temporary directory for functional tests"
msgstr "機能テストのために一意の一時ディレクトリを要求する"

#: ../../getting-started.rst:229
msgid "``pytest`` provides :std:doc:`Builtin fixtures/function arguments <builtin>` to request arbitrary resources, like a unique temporary directory:"
msgstr "``pytest`` は、一意の一時ディレクトリなどの任意のリソースを要求するための :std:doc:`組み込みフィクスチャ/関数引数 <builtin>` を提供します:"

#: ../../getting-started.rst:238
msgid "List the name ``tmp_path`` in the test function signature and ``pytest`` will lookup and call a fixture factory to create the resource before performing the test function call. Before the test runs, ``pytest`` creates a unique-per-test-invocation temporary directory:"
msgstr "テスト関数のシグネチャに ``tmp_path`` の名前をリストし、``pytest`` はテスト関数の呼び出しを実行する前にリソースを作成するためにフィクスチャファクトリを検索して呼び出します。テストが実行される前に、``pytest`` はテスト呼び出しごとに一意の一時ディレクトリを作成します:"

#: ../../getting-started.rst:261
msgid "More info on temporary directory handling is available at :ref:`Temporary directories and files <tmp_path handling>`."
msgstr "一時ディレクトリの処理に関する詳細情報は、:ref:`一時ディレクトリとファイル <tmp_path handling>` で確認できます。"

#: ../../getting-started.rst:263
msgid "Find out what kind of builtin :ref:`pytest fixtures <fixtures>` exist with the command:"
msgstr "次のコマンドを使用して、どのような組み込みの :ref:`pytest フィクスチャ <fixtures>` が存在するかを確認します:"

#: ../../getting-started.rst:269
msgid "Note that this command omits fixtures with leading ``_`` unless the ``-v`` option is added."
msgstr "このコマンドは、``-v`` オプションが追加されない限り、先頭に ``_`` が付いたフィクスチャを省略します。"

#: ../../getting-started.rst:272
msgid "Continue reading"
msgstr "読み続ける"

#: ../../getting-started.rst:274
msgid "Check out additional pytest resources to help you customize tests for your unique workflow:"
msgstr "独自のワークフローに合わせてテストをカスタマイズするのに役立つ追加の pytest リソースを確認してください:"

#: ../../getting-started.rst:276
msgid "\":ref:`usage`\" for command line invocation examples"
msgstr "コマンドライン呼び出しの例については \":ref:`usage`\" を参照してください"

#: ../../getting-started.rst:277
msgid "\":ref:`existingtestsuite`\" for working with preexisting tests"
msgstr "既存のテストを使用する場合は \":ref:`existingtestsuite`\" を参照してください"

#: ../../getting-started.rst:278
msgid "\":ref:`mark`\" for information on the ``pytest.mark`` mechanism"
msgstr "``pytest.mark`` メカニズムの情報については \":ref:`mark`\" を参照してください"

#: ../../getting-started.rst:279
msgid "\":ref:`fixtures`\" for providing a functional baseline to your tests"
msgstr "テストに機能的なベースラインを提供するには \":ref:`fixtures`\" を参照してください"

#: ../../getting-started.rst:280
msgid "\":ref:`plugins`\" for managing and writing plugins"
msgstr "プラグインの管理と作成については \":ref:`plugins`\" を参照してください"

#: ../../getting-started.rst:281
msgid "\":ref:`goodpractices`\" for virtualenv and test layouts"
msgstr "virtualenv とテストレイアウトについては \":ref:`goodpractices`\" を参照してください"

