# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, holger krekel and pytest-dev team
# This file is distributed under the same license as the pytest package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pytest 0.1.dev16209\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-05 00:52+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../how-to/output.rst:4
msgid "Managing pytest's output"
msgstr ""

#: ../../how-to/output.rst:9
msgid "Modifying Python traceback printing"
msgstr ""

#: ../../how-to/output.rst:11
msgid "Examples for modifying traceback printing:"
msgstr ""

#: ../../how-to/output.rst:33
msgid "The ``--full-trace`` causes very long traces to be printed on error (longer than ``--tb=long``). It also ensures that a stack trace is printed on **KeyboardInterrupt** (Ctrl+C). This is very useful if the tests are taking too long and you interrupt them with Ctrl+C to find out where the tests are *hanging*. By default no output will be shown (because KeyboardInterrupt is caught by pytest). By using this option you make sure a trace is shown."
msgstr ""

#: ../../how-to/output.rst:43
msgid "Verbosity"
msgstr ""

#: ../../how-to/output.rst:45
msgid "Examples for modifying printing verbosity:"
msgstr ""

#: ../../how-to/output.rst:55
msgid "The ``-v`` flag controls the verbosity of pytest output in various aspects: test session progress, assertion details when tests fail, fixtures details with ``--fixtures``, etc."
msgstr ""

#: ../../how-to/output.rst:60
msgid "Consider this simple file:"
msgstr ""

#: ../../how-to/output.rst:85
msgid "Executing pytest normally gives us this output (we are skipping the header to focus on the rest):"
msgstr ""

#: ../../how-to/output.rst:138
msgid "Notice that:"
msgstr ""

#: ../../how-to/output.rst:140
msgid "Each test inside the file is shown by a single character in the output: ``.`` for passing, ``F`` for failure."
msgstr ""

#: ../../how-to/output.rst:141
msgid "``test_words_fail`` failed, and we are shown a short summary indicating the index 2 of the two lists differ."
msgstr ""

#: ../../how-to/output.rst:142
msgid "``test_numbers_fail`` failed, and we are shown a summary of left/right differences on dictionary items. Identical items are omitted."
msgstr ""

#: ../../how-to/output.rst:143
msgid "``test_long_text_fail`` failed, and the right hand side of the ``in`` statement is truncated using ``...``` because it is longer than an internal threshold (240 characters currently)."
msgstr ""

#: ../../how-to/output.rst:146
msgid "Now we can increase pytest's verbosity:"
msgstr ""

#: ../../how-to/output.rst:210 ../../how-to/output.rst:340
msgid "Notice now that:"
msgstr ""

#: ../../how-to/output.rst:212 ../../how-to/output.rst:342
msgid "Each test inside the file gets its own line in the output."
msgstr ""

#: ../../how-to/output.rst:213
msgid "``test_words_fail`` now shows the two failing lists in full, in addition to which index differs."
msgstr ""

#: ../../how-to/output.rst:214
msgid "``test_numbers_fail`` now shows a text diff of the two dictionaries, truncated."
msgstr ""

#: ../../how-to/output.rst:215
msgid "``test_long_text_fail`` no longer truncates the right hand side of the ``in`` statement, because the internal threshold for truncation is larger now (2400 characters currently)."
msgstr ""

#: ../../how-to/output.rst:218
msgid "Now if we increase verbosity even more:"
msgstr ""

#: ../../how-to/output.rst:343
msgid "``test_words_fail`` gives the same output as before in this case."
msgstr ""

#: ../../how-to/output.rst:344
msgid "``test_numbers_fail`` now shows a full text diff of the two dictionaries."
msgstr ""

#: ../../how-to/output.rst:345
msgid "``test_long_text_fail`` also doesn't truncate on the right hand side as before, but now pytest won't truncate any text at all, regardless of its size."
msgstr ""

#: ../../how-to/output.rst:348
msgid "Those were examples of how verbosity affects normal test session output, but verbosity also is used in other situations, for example you are shown even fixtures that start with ``_`` if you use ``pytest --fixtures -v``."
msgstr ""

#: ../../how-to/output.rst:351
msgid "Using higher verbosity levels (``-vvv``, ``-vvvv``, ...) is supported, but has no effect in pytest itself at the moment, however some plugins might make use of higher verbosity."
msgstr ""

#: ../../how-to/output.rst:357
msgid "Fine-grained verbosity"
msgstr ""

#: ../../how-to/output.rst:359
msgid "In addition to specifying the application wide verbosity level, it is possible to control specific aspects independently. This is done by setting a verbosity level in the configuration file for the specific aspect of the output."
msgstr ""

#: ../../how-to/output.rst:362
msgid ":confval:`verbosity_assertions`: Controls how verbose the assertion output should be when pytest is executed. Running ``pytest --no-header`` with a value of ``2`` would have the same output as the previous example, but each test inside the file is shown by a single character in the output."
msgstr ""

#: ../../how-to/output.rst:366
msgid ":confval:`verbosity_test_cases`: Controls how verbose the test execution output should be when pytest is executed. Running ``pytest --no-header`` with a value of ``2`` would have the same output as the first verbosity example, but each test inside the file gets its own line in the output."
msgstr ""

#: ../../how-to/output.rst:373
msgid "Producing a detailed summary report"
msgstr ""

#: ../../how-to/output.rst:375
msgid "The ``-r`` flag can be used to display a \"short test summary info\" at the end of the test session, making it easy in large test suites to get a clear picture of all failures, skips, xfails, etc."
msgstr ""

#: ../../how-to/output.rst:378
msgid "It defaults to ``fE`` to list failures and errors."
msgstr ""

#: ../../how-to/output.rst:382
msgid "Example:"
msgstr ""

#: ../../how-to/output.rst:456
msgid "The ``-r`` options accepts a number of characters after it, with ``a`` used above meaning \"all except passes\"."
msgstr ""

#: ../../how-to/output.rst:459
msgid "Here is the full list of available characters that can be used:"
msgstr ""

#: ../../how-to/output.rst:461
msgid "``f`` - failed"
msgstr ""

#: ../../how-to/output.rst:462
msgid "``E`` - error"
msgstr ""

#: ../../how-to/output.rst:463
msgid "``s`` - skipped"
msgstr ""

#: ../../how-to/output.rst:464
msgid "``x`` - xfailed"
msgstr ""

#: ../../how-to/output.rst:465
msgid "``X`` - xpassed"
msgstr ""

#: ../../how-to/output.rst:466
msgid "``p`` - passed"
msgstr ""

#: ../../how-to/output.rst:467
msgid "``P`` - passed with output"
msgstr ""

#: ../../how-to/output.rst:469
msgid "Special characters for (de)selection of groups:"
msgstr ""

#: ../../how-to/output.rst:471
msgid "``a`` - all except ``pP``"
msgstr ""

#: ../../how-to/output.rst:472
msgid "``A`` - all"
msgstr ""

#: ../../how-to/output.rst:473
msgid "``N`` - none, this can be used to display nothing (since ``fE`` is the default)"
msgstr ""

#: ../../how-to/output.rst:475
msgid "More than one character can be used, so for example to only see failed and skipped tests, you can execute:"
msgstr ""

#: ../../how-to/output.rst:509
msgid "Using ``p`` lists the passing tests, whilst ``P`` adds an extra section \"PASSES\" with those tests that passed but had captured output:"
msgstr ""

#: ../../how-to/output.rst:549
msgid "By default, parametrized variants of skipped tests are grouped together if they share the same skip reason. You can use ``--no-fold-skipped`` to print each skipped test separately."
msgstr ""

#: ../../how-to/output.rst:553
msgid "Creating resultlog format files"
msgstr ""

#: ../../how-to/output.rst:555
msgid "To create plain-text machine-readable result files you can issue:"
msgstr ""

#: ../../how-to/output.rst:561
msgid "and look at the content at the ``path`` location.  Such files are used e.g. by the `PyPy-test`_ web page to show test results over several revisions."
msgstr ""

#: ../../how-to/output.rst:566
msgid "This option is rarely used and is scheduled for removal in pytest 6.0."
msgstr ""

#: ../../how-to/output.rst:568
msgid "If you use this option, consider using the new `pytest-reportlog <https://github.com/pytest-dev/pytest-reportlog>`__ plugin instead."
msgstr ""

#: ../../how-to/output.rst:570
msgid "See :ref:`the deprecation docs <resultlog deprecated>` for more information."
msgstr ""

#: ../../how-to/output.rst:577
msgid "Creating JUnitXML format files"
msgstr ""

#: ../../how-to/output.rst:579
msgid "To create result files which can be read by Jenkins_ or other Continuous integration servers, use this invocation:"
msgstr ""

#: ../../how-to/output.rst:586
msgid "to create an XML file at ``path``."
msgstr ""

#: ../../how-to/output.rst:590
msgid "To set the name of the root test suite xml item, you can configure the ``junit_suite_name`` option in your config file:"
msgstr ""

#: ../../how-to/output.rst:599
msgid "JUnit XML specification seems to indicate that ``\"time\"`` attribute should report total test execution times, including setup and teardown (`1 <http://windyroad.com.au/dl/Open%20Source/JUnit.xsd>`_, `2 <https://www.ibm.com/support/knowledgecenter/en/SSQ2R2_14.1.0/com.ibm.rsar.analysis.codereview.cobol.doc/topics/cac_useresults_junit.html>`_). It is the default pytest behavior. To report just call durations instead, configure the ``junit_duration_report`` option like this:"
msgstr ""

#: ../../how-to/output.rst:614
msgid "record_property"
msgstr ""

#: ../../how-to/output.rst:616
msgid "If you want to log additional information for a test, you can use the ``record_property`` fixture:"
msgstr ""

#: ../../how-to/output.rst:625
msgid "This will add an extra property ``example_key=\"1\"`` to the generated ``testcase`` tag:"
msgstr ""

#: ../../how-to/output.rst:636
msgid "Alternatively, you can integrate this functionality with custom markers:"
msgstr ""

#: ../../how-to/output.rst:649
msgid "And in your tests:"
msgstr ""

#: ../../how-to/output.rst:661
msgid "Will result in:"
msgstr ""

#: ../../how-to/output.rst:673 ../../how-to/output.rst:737
msgid "Please note that using this feature will break schema verifications for the latest JUnitXML schema. This might be a problem when used with some CI servers."
msgstr ""

#: ../../how-to/output.rst:678
msgid "record_xml_attribute"
msgstr ""

#: ../../how-to/output.rst:680
msgid "To add an additional xml attribute to a testcase element, you can use ``record_xml_attribute`` fixture. This can also be used to override existing values:"
msgstr ""

#: ../../how-to/output.rst:691
msgid "Unlike ``record_property``, this will not add a new child element. Instead, this will add an attribute ``assertions=\"REQ-1234\"`` inside the generated ``testcase`` tag and override the default ``classname`` with ``\"classname=custom_classname\"``:"
msgstr ""

#: ../../how-to/output.rst:705
msgid "``record_xml_attribute`` is an experimental feature, and its interface might be replaced by something more powerful and general in future versions. The functionality per-se will be kept, however."
msgstr ""

#: ../../how-to/output.rst:709
msgid "Using this over ``record_xml_property`` can help when using ci tools to parse the xml report. However, some parsers are quite strict about the elements and attributes that are allowed. Many tools use an xsd schema (like the example below) to validate incoming xml. Make sure you are using attribute names that are allowed by your parser."
msgstr ""

#: ../../how-to/output.rst:714
msgid "Below is the Scheme used by Jenkins to validate the XML report:"
msgstr ""

#: ../../how-to/output.rst:743
msgid "record_testsuite_property"
msgstr ""

#: ../../how-to/output.rst:747
msgid "If you want to add a properties node at the test-suite level, which may contains properties that are relevant to all tests, you can use the ``record_testsuite_property`` session-scoped fixture:"
msgstr ""

#: ../../how-to/output.rst:750
msgid "The ``record_testsuite_property`` session-scoped fixture can be used to add properties relevant to all tests."
msgstr ""

#: ../../how-to/output.rst:768
msgid "The fixture is a callable which receives ``name`` and ``value`` of a ``<property>`` tag added at the test-suite level of the generated xml:"
msgstr ""

#: ../../how-to/output.rst:781
msgid "``name`` must be a string, ``value`` will be converted to a string and properly xml-escaped."
msgstr ""

#: ../../how-to/output.rst:783
msgid "The generated XML is compatible with the latest ``xunit`` standard, contrary to `record_property`_ and `record_xml_attribute`_."
msgstr ""

#: ../../how-to/output.rst:788
msgid "Sending test report to an online pastebin service"
msgstr ""

#: ../../how-to/output.rst:790
msgid "**Creating a URL for each test failure**:"
msgstr ""

#: ../../how-to/output.rst:796
msgid "This will submit test run information to a remote Paste service and provide a URL for each failure.  You may select tests as usual or add for example ``-x`` if you only want to send one particular failure."
msgstr ""

#: ../../how-to/output.rst:800
msgid "**Creating a URL for a whole test session log**:"
msgstr ""

#: ../../how-to/output.rst:806
msgid "Currently only pasting to the https://bpaste.net/ service is implemented."
msgstr ""

#: ../../how-to/output.rst:810
msgid "If creating the URL fails for any reason, a warning is generated instead of failing the entire test suite."
msgstr ""

