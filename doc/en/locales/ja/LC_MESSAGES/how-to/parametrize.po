# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, holger krekel and pytest-dev team
# This file is distributed under the same license as the pytest package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pytest 0.1.dev16209\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-05 00:52+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../how-to/parametrize.rst:10
msgid "How to parametrize fixtures and test functions"
msgstr ""

#: ../../how-to/parametrize.rst:12
msgid "pytest enables test parametrization at several levels:"
msgstr ""

#: ../../how-to/parametrize.rst:14
msgid ":py:func:`pytest.fixture` allows one to :ref:`parametrize fixture functions <fixture-parametrize>`."
msgstr ""

#: ../../how-to/parametrize.rst:17
msgid "`@pytest.mark.parametrize`_ allows one to define multiple sets of arguments and fixtures at the test function or class."
msgstr ""

#: ../../how-to/parametrize.rst:20
msgid "`pytest_generate_tests`_ allows one to define custom parametrization schemes or extensions."
msgstr ""

#: ../../how-to/parametrize.rst:28
msgid "``@pytest.mark.parametrize``: parametrizing test functions"
msgstr ""

#: ../../how-to/parametrize.rst:36
msgid "The builtin :ref:`pytest.mark.parametrize ref` decorator enables parametrization of arguments for a test function.  Here is a typical example of a test function that implements checking that a certain input leads to an expected output:"
msgstr ""

#: ../../how-to/parametrize.rst:51
msgid "Here, the ``@parametrize`` decorator defines three different ``(test_input,expected)`` tuples so that the ``test_eval`` function will run three times using them in turn:"
msgstr ""

#: ../../how-to/parametrize.rst:83
msgid "Parameter values are passed as-is to tests (no copy whatsoever)."
msgstr ""

#: ../../how-to/parametrize.rst:85
msgid "For example, if you pass a list or a dict as a parameter value, and the test case code mutates it, the mutations will be reflected in subsequent test case calls."
msgstr ""

#: ../../how-to/parametrize.rst:91
msgid "pytest by default escapes any non-ascii characters used in unicode strings for the parametrization because it has several downsides. If however you would like to use unicode strings in parametrization and see them in the terminal as is (non-escaped), use this option in your ``pytest.ini``:"
msgstr ""

#: ../../how-to/parametrize.rst:102
msgid "Keep in mind however that this might cause unwanted side effects and even bugs depending on the OS used and plugins currently installed, so use it at your own risk."
msgstr ""

#: ../../how-to/parametrize.rst:107
msgid "As designed in this example, only one pair of input/output values fails the simple test function.  And as usual with test function arguments, you can see the ``input`` and ``output`` values in the traceback."
msgstr ""

#: ../../how-to/parametrize.rst:111
msgid "Note that you could also use the parametrize marker on a class or a module (see :ref:`mark`) which would invoke several functions with the argument sets, for instance:"
msgstr ""

#: ../../how-to/parametrize.rst:130
msgid "To parametrize all tests in a module, you can assign to the :globalvar:`pytestmark` global variable:"
msgstr ""

#: ../../how-to/parametrize.rst:148
msgid "It is also possible to mark individual test instances within parametrize, for example with the builtin ``mark.xfail``:"
msgstr ""

#: ../../how-to/parametrize.rst:164
msgid "Let's run this:"
msgstr ""

#: ../../how-to/parametrize.rst:178
msgid "The one parameter set which caused a failure previously now shows up as an \"xfailed\" (expected to fail) test."
msgstr ""

#: ../../how-to/parametrize.rst:181
msgid "In case the values provided to ``parametrize`` result in an empty list - for example, if they're dynamically generated by some function - the behaviour of pytest is defined by the :confval:`empty_parameter_set_mark` option."
msgstr ""

#: ../../how-to/parametrize.rst:185
msgid "To get all combinations of multiple parametrized arguments you can stack ``parametrize`` decorators:"
msgstr ""

#: ../../how-to/parametrize.rst:198
msgid "This will run the test with the arguments set to ``x=0/y=2``, ``x=1/y=2``, ``x=0/y=3``, and ``x=1/y=3`` exhausting parameters in the order of the decorators."
msgstr ""

#: ../../how-to/parametrize.rst:204
msgid "Basic ``pytest_generate_tests`` example"
msgstr ""

#: ../../how-to/parametrize.rst:206
msgid "Sometimes you may want to implement your own parametrization scheme or implement some dynamism for determining the parameters or scope of a fixture.   For this, you can use the ``pytest_generate_tests`` hook which is called when collecting a test function.  Through the passed in ``metafunc`` object you can inspect the requesting test context and, most importantly, you can call ``metafunc.parametrize()`` to cause parametrization."
msgstr ""

#: ../../how-to/parametrize.rst:214
msgid "For example, let's say we want to run a test taking string inputs which we want to set via a new ``pytest`` command line option.  Let's first write a simple test accepting a ``stringinput`` fixture function argument:"
msgstr ""

#: ../../how-to/parametrize.rst:226
msgid "Now we add a ``conftest.py`` file containing the addition of a command line option and the parametrization of our test function:"
msgstr ""

#: ../../how-to/parametrize.rst:247
msgid "If we now pass two stringinput values, our test will run twice:"
msgstr ""

#: ../../how-to/parametrize.rst:255
msgid "Let's also run with a stringinput that will lead to a failing test:"
msgstr ""

#: ../../how-to/parametrize.rst:277
msgid "As expected our test function fails."
msgstr ""

#: ../../how-to/parametrize.rst:279
msgid "If you don't specify a stringinput it will be skipped because ``metafunc.parametrize()`` will be called with an empty parameter list:"
msgstr ""

#: ../../how-to/parametrize.rst:291
msgid "Note that when calling ``metafunc.parametrize`` multiple times with different parameter sets, all parameter names across those sets cannot be duplicated, otherwise an error will be raised."
msgstr ""

#: ../../how-to/parametrize.rst:295
msgid "More examples"
msgstr ""

#: ../../how-to/parametrize.rst:297
msgid "For further examples, you might want to look at :ref:`more parametrization examples <paramexamples>`."
msgstr ""

