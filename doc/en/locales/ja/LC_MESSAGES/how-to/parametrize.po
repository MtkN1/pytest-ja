# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, holger krekel and pytest-dev team
# This file is distributed under the same license as the pytest package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pytest 0.1.dev16209\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-05 00:52+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../how-to/parametrize.rst:10
msgid "How to parametrize fixtures and test functions"
msgstr "フィクスチャとテスト関数をパラメータ化する方法"

#: ../../how-to/parametrize.rst:12
msgid "pytest enables test parametrization at several levels:"
msgstr "pytest は複数のレベルでテストのパラメータ化を可能にします："

#: ../../how-to/parametrize.rst:14
msgid ":py:func:`pytest.fixture` allows one to :ref:`parametrize fixture functions <fixture-parametrize>`."
msgstr ":py:func:`pytest.fixture` を使用すると、:ref:`フィクスチャ関数をパラメータ化 <fixture-parametrize>` できます。"

#: ../../how-to/parametrize.rst:17
msgid "`@pytest.mark.parametrize`_ allows one to define multiple sets of arguments and fixtures at the test function or class."
msgstr "`@pytest.mark.parametrize`_ を使用すると、テスト関数やクラスで複数の引数セットやフィクスチャを定義できます。"

#: ../../how-to/parametrize.rst:20
msgid "`pytest_generate_tests`_ allows one to define custom parametrization schemes or extensions."
msgstr "`pytest_generate_tests`_ を使用すると、カスタムパラメータ化スキームや拡張を定義できます。"

#: ../../how-to/parametrize.rst:28
msgid "``@pytest.mark.parametrize``: parametrizing test functions"
msgstr "``@pytest.mark.parametrize``：テスト関数のパラメータ化"

#: ../../how-to/parametrize.rst:36
msgid "The builtin :ref:`pytest.mark.parametrize ref` decorator enables parametrization of arguments for a test function.  Here is a typical example of a test function that implements checking that a certain input leads to an expected output:"
msgstr "組み込みの :ref:`pytest.mark.parametrize ref` デコレータを使用すると、テスト関数の引数をパラメータ化できます。以下は、特定の入力が期待される出力をもたらすことを確認するテスト関数の典型的な例です："

#: ../../how-to/parametrize.rst:51
msgid "Here, the ``@parametrize`` decorator defines three different ``(test_input,expected)`` tuples so that the ``test_eval`` function will run three times using them in turn:"
msgstr "ここでは、``@parametrize`` デコレータが3つの異なる ``(test_input,expected)`` タプルを定義しており、``test_eval`` 関数はそれらを順に使用して3回実行されます："

#: ../../how-to/parametrize.rst:83
msgid "Parameter values are passed as-is to tests (no copy whatsoever)."
msgstr "パラメータ値はそのままテストに渡されます（コピーは一切行われません）。"

#: ../../how-to/parametrize.rst:85
msgid "For example, if you pass a list or a dict as a parameter value, and the test case code mutates it, the mutations will be reflected in subsequent test case calls."
msgstr "例えば、リストや辞書をパラメータ値として渡し、テストケースコードがそれを変更した場合、その変更は後続のテストケース呼び出しに反映されます。"

#: ../../how-to/parametrize.rst:91
msgid "pytest by default escapes any non-ascii characters used in unicode strings for the parametrization because it has several downsides. If however you would like to use unicode strings in parametrization and see them in the terminal as is (non-escaped), use this option in your ``pytest.ini``:"
msgstr "pytest はデフォルトでパラメータ化に使用されるユニコード文字列の非ASCII文字をエスケープしますが、これはいくつかの欠点があります。ただし、パラメータ化でユニコード文字列を使用し、ターミナルでそのまま（エスケープされずに）表示したい場合は、``pytest.ini`` にこのオプションを使用してください："

#: ../../how-to/parametrize.rst:102
msgid "Keep in mind however that this might cause unwanted side effects and even bugs depending on the OS used and plugins currently installed, so use it at your own risk."
msgstr "ただし、これにより使用するOSや現在インストールされているプラグインによっては望ましくない副作用やバグが発生する可能性があるため、自己責任で使用してください。"

#: ../../how-to/parametrize.rst:107
msgid "As designed in this example, only one pair of input/output values fails the simple test function.  And as usual with test function arguments, you can see the ``input`` and ``output`` values in the traceback."
msgstr "この例で設計されているように、入力/出力値のペアのうち1つだけが単純なテスト関数に失敗します。そして、通常のテスト関数の引数と同様に、トレースバックで ``input`` と ``output`` の値を確認できます。"

#: ../../how-to/parametrize.rst:111
msgid "Note that you could also use the parametrize marker on a class or a module (see :ref:`mark`) which would invoke several functions with the argument sets, for instance:"
msgstr "クラスやモジュールにパラメータ化マーカーを使用することもでき（:ref:`mark` を参照）、引数セットで複数の関数を呼び出すことができます。例えば："

#: ../../how-to/parametrize.rst:130
msgid "To parametrize all tests in a module, you can assign to the :globalvar:`pytestmark` global variable:"
msgstr "モジュール内のすべてのテストをパラメータ化するには、:globalvar:`pytestmark` グローバル変数に割り当てることができます："

#: ../../how-to/parametrize.rst:148
msgid "It is also possible to mark individual test instances within parametrize, for example with the builtin ``mark.xfail``:"
msgstr "また、パラメータ化内で個々のテストインスタンスにマークを付けることも可能です。例えば、組み込みの ``mark.xfail`` を使用します："

#: ../../how-to/parametrize.rst:164
msgid "Let's run this:"
msgstr "これを実行してみましょう："

#: ../../how-to/parametrize.rst:178
msgid "The one parameter set which caused a failure previously now shows up as an \"xfailed\" (expected to fail) test."
msgstr "以前に失敗を引き起こしたパラメータセットが、現在は「xfailed」（失敗することが予想される）テストとして表示されます。"

#: ../../how-to/parametrize.rst:181
msgid "In case the values provided to ``parametrize`` result in an empty list - for example, if they're dynamically generated by some function - the behaviour of pytest is defined by the :confval:`empty_parameter_set_mark` option."
msgstr "``parametrize`` に提供された値が空のリストになる場合 - 例えば、何らかの関数によって動的に生成される場合 - pytest の動作は :confval:`empty_parameter_set_mark` オプションによって定義されます。"

#: ../../how-to/parametrize.rst:185
msgid "To get all combinations of multiple parametrized arguments you can stack ``parametrize`` decorators:"
msgstr "複数のパラメータ化された引数のすべての組み合わせを取得するには、``parametrize`` デコレータを積み重ねることができます："

#: ../../how-to/parametrize.rst:198
msgid "This will run the test with the arguments set to ``x=0/y=2``, ``x=1/y=2``, ``x=0/y=3``, and ``x=1/y=3`` exhausting parameters in the order of the decorators."
msgstr "これにより、引数が ``x=0/y=2``, ``x=1/y=2``, ``x=0/y=3``, ``x=1/y=3`` に設定されたテストが、デコレータの順序でパラメータを使い果たして実行されます。"

#: ../../how-to/parametrize.rst:204
msgid "Basic ``pytest_generate_tests`` example"
msgstr "基本的な ``pytest_generate_tests`` の例"

#: ../../how-to/parametrize.rst:206
msgid "Sometimes you may want to implement your own parametrization scheme or implement some dynamism for determining the parameters or scope of a fixture.   For this, you can use the ``pytest_generate_tests`` hook which is called when collecting a test function.  Through the passed in ``metafunc`` object you can inspect the requesting test context and, most importantly, you can call ``metafunc.parametrize()`` to cause parametrization."
msgstr "場合によっては、独自のパラメータ化スキームを実装したり、フィクスチャのパラメータやスコープを決定するための動的な要素を実装したりすることがあるかもしれません。そのためには、テスト関数を収集する際に呼び出される ``pytest_generate_tests`` フックを使用できます。渡された ``metafunc`` オブジェクトを通じて、要求されたテストコンテキストを検査し、最も重要なこととして、``metafunc.parametrize()`` を呼び出してパラメータ化を引き起こすことができます。"

#: ../../how-to/parametrize.rst:214
msgid "For example, let's say we want to run a test taking string inputs which we want to set via a new ``pytest`` command line option.  Let's first write a simple test accepting a ``stringinput`` fixture function argument:"
msgstr "例えば、新しい ``pytest`` コマンドラインオプションを介して設定したい文字列入力を受け取るテストを実行したいとしましょう。まず、``stringinput`` フィクスチャ関数引数を受け入れる簡単なテストを書いてみましょう："

#: ../../how-to/parametrize.rst:226
msgid "Now we add a ``conftest.py`` file containing the addition of a command line option and the parametrization of our test function:"
msgstr "次に、コマンドラインオプションの追加とテスト関数のパラメータ化を含む ``conftest.py`` ファイルを追加します："

#: ../../how-to/parametrize.rst:247
msgid "If we now pass two stringinput values, our test will run twice:"
msgstr "今、2つの stringinput 値を渡すと、テストは2回実行されます："

#: ../../how-to/parametrize.rst:255
msgid "Let's also run with a stringinput that will lead to a failing test:"
msgstr "失敗するテストにつながる stringinput で実行してみましょう："

#: ../../how-to/parametrize.rst:277
msgid "As expected our test function fails."
msgstr "予想通り、テスト関数は失敗します。"

#: ../../how-to/parametrize.rst:279
msgid "If you don't specify a stringinput it will be skipped because ``metafunc.parametrize()`` will be called with an empty parameter list:"
msgstr "stringinput を指定しない場合、``metafunc.parametrize()`` が空のパラメータリストで呼び出されるため、スキップされます："

#: ../../how-to/parametrize.rst:291
msgid "Note that when calling ``metafunc.parametrize`` multiple times with different parameter sets, all parameter names across those sets cannot be duplicated, otherwise an error will be raised."
msgstr "異なるパラメータセットで ``metafunc.parametrize`` を複数回呼び出す場合、それらのセット全体でパラメータ名を重複させることはできません。そうしないとエラーが発生します。"

#: ../../how-to/parametrize.rst:295
msgid "More examples"
msgstr "さらに例を示します"

#: ../../how-to/parametrize.rst:297
msgid "For further examples, you might want to look at :ref:`more parametrization examples <paramexamples>`."
msgstr "さらに例を見たい場合は、:ref:`パラメータ化の例 <paramexamples>` を参照してください。"

