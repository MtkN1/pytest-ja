# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, holger krekel and pytest-dev team
# This file is distributed under the same license as the pytest package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pytest 0.1.dev16209\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-05 00:52+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../how-to/cache.rst:6
msgid "How to re-run failed tests and maintain state between test runs"
msgstr "失敗したテストを再実行し、テスト実行間で状態を維持する方法"

#: ../../how-to/cache.rst:11
msgid "Usage"
msgstr "使用法"

#: ../../how-to/cache.rst:13
msgid "The plugin provides two command line options to rerun failures from the last ``pytest`` invocation:"
msgstr "プラグインは、最後の ``pytest`` 呼び出しから失敗を再実行するための 2 つのコマンドラインオプションを提供します:"

#: ../../how-to/cache.rst:16
msgid "``--lf``, ``--last-failed`` - to only re-run the failures."
msgstr "``--lf``, ``--last-failed`` - 失敗のみを再実行します。"

#: ../../how-to/cache.rst:17
msgid "``--ff``, ``--failed-first`` - to run the failures first and then the rest of the tests."
msgstr "``--ff``, ``--failed-first`` - 失敗を最初に実行し、その後に残りのテストを実行します。"

#: ../../how-to/cache.rst:20
msgid "For cleanup (usually not needed), a ``--cache-clear`` option allows to remove all cross-session cache contents ahead of a test run."
msgstr "クリーンアップのために (通常は不要) 、``--cache-clear`` オプションを使用すると、テスト実行前にすべてのセッション間キャッシュ内容を削除できます。"

#: ../../how-to/cache.rst:23
msgid "Other plugins may access the `config.cache`_ object to set/get **json encodable** values between ``pytest`` invocations."
msgstr "他のプラグインは、``pytest`` 呼び出し間で **json エンコード可能** な値を設定/取得するために `config.cache`_ オブジェクトにアクセスする場合があります。"

#: ../../how-to/cache.rst:28
msgid "This plugin is enabled by default, but can be disabled if needed: see :ref:`cmdunregister` (the internal name for this plugin is ``cacheprovider``)."
msgstr "このプラグインはデフォルトで有効になっていますが、必要に応じて無効にすることができます: :ref:`cmdunregister` を参照してください (このプラグインの内部名は ``cacheprovider`` です) 。"

#: ../../how-to/cache.rst:34
msgid "Rerunning only failures or failures first"
msgstr "失敗のみを再実行するか、失敗を最初に実行する"

#: ../../how-to/cache.rst:36
msgid "First, let's create 50 test invocation of which only 2 fail:"
msgstr "まず、50 のテスト呼び出しを作成し、そのうち 2 つだけが失敗するようにしましょう:"

#: ../../how-to/cache.rst:49
msgid "If you run this for the first time you will see two failures:"
msgstr "これを初めて実行すると、2 つの失敗が表示されます:"

#: ../../how-to/cache.rst:83
msgid "If you then run it with ``--lf``:"
msgstr "次に、``--lf`` を使用して実行すると:"

#: ../../how-to/cache.rst:124
msgid "You have run only the two failing tests from the last run, while the 48 passing tests have not been run (\"deselected\")."
msgstr "前回の実行から失敗した 2 つのテストのみを実行し、48 の合格したテストは実行されていません (「選択解除」) 。"

#: ../../how-to/cache.rst:127
msgid "Now, if you run with the ``--ff`` option, all tests will be run but the first previous failures will be executed first (as can be seen from the series of ``FF`` and dots):"
msgstr "次に、``--ff`` オプションを使用して実行すると、すべてのテストが実行されますが、最初の以前の失敗が最初に実行されます (``FF`` とドットの一連の表示からわかるように) 。"

#: ../../how-to/cache.rst:172
msgid "New ``--nf``, ``--new-first`` options: run new tests first followed by the rest of the tests, in both cases tests are also sorted by the file modified time, with more recent files coming first."
msgstr "新しい ``--nf``, ``--new-first`` オプション: 新しいテストを最初に実行し、その後に残りのテストを実行します。どちらの場合も、テストはファイルの変更時間でソートされ、最新のファイルが最初に表示されます。"

#: ../../how-to/cache.rst:177
msgid "Behavior when no tests failed in the last run"
msgstr "前回の実行でテストが失敗しなかった場合の動作"

#: ../../how-to/cache.rst:179
msgid "The ``--lfnf/--last-failed-no-failures`` option governs the behavior of ``--last-failed``. Determines whether to execute tests when there are no previously (known) failures or when no cached ``lastfailed`` data was found."
msgstr "``--lfnf/--last-failed-no-failures`` オプションは ``--last-failed`` の動作を制御します。以前に (既知の) 失敗がない場合や、キャッシュされた ``lastfailed`` データが見つからなかった場合にテストを実行するかどうかを決定します。"

#: ../../how-to/cache.rst:183
msgid "There are two options:"
msgstr "2 つのオプションがあります:"

#: ../../how-to/cache.rst:185
msgid "``all``:  when there are no known test failures, runs all tests (the full test suite). This is the default."
msgstr "``all``: 既知のテスト失敗がない場合、すべてのテスト (完全なテストスイート) を実行します。これがデフォルトです。"

#: ../../how-to/cache.rst:186
msgid "``none``: when there are no known test failures, just emits a message stating this and exit successfully."
msgstr "``none``: 既知のテスト失敗がない場合、このことを示すメッセージを出力し、正常に終了します。"

#: ../../how-to/cache.rst:188
msgid "Example:"
msgstr "例:"

#: ../../how-to/cache.rst:196
msgid "The new config.cache object"
msgstr "新しい config.cache オブジェクト"

#: ../../how-to/cache.rst:200
msgid "Plugins or conftest.py support code can get a cached value using the pytest ``config`` object.  Here is a basic example plugin which implements a :ref:`fixture <fixture>` which re-uses previously created state across pytest invocations:"
msgstr "プラグインや conftest.py サポートコードは、pytest ``config`` オブジェクトを使用してキャッシュされた値を取得できます。ここに、pytest 呼び出し間で以前に作成された状態を再利用する :ref:`fixture <fixture>` を実装する基本的な例のプラグインがあります:"

#: ../../how-to/cache.rst:228
msgid "If you run this command for the first time, you can see the print statement:"
msgstr "このコマンドを初めて実行すると、print 文が表示されます:"

#: ../../how-to/cache.rst:250
msgid "If you run it a second time, the value will be retrieved from the cache and nothing will be printed:"
msgstr "2 回目に実行すると、値はキャッシュから取得され、何も表示されません:"

#: ../../how-to/cache.rst:271
msgid "See the :fixture:`config.cache fixture <cache>` for more details."
msgstr "詳細については :fixture:`config.cache fixture <cache>` を参照してください。"

#: ../../how-to/cache.rst:275
msgid "Inspecting Cache content"
msgstr "キャッシュ内容の検査"

#: ../../how-to/cache.rst:277
msgid "You can always peek at the content of the cache using the ``--cache-show`` command line option:"
msgstr "``--cache-show`` コマンドラインオプションを使用して、キャッシュの内容を常に確認できます:"

#: ../../how-to/cache.rst:299
msgid "``--cache-show`` takes an optional argument to specify a glob pattern for filtering:"
msgstr "``--cache-show`` は、フィルタリングのためのグロブパターンを指定するオプション引数を受け取ります:"

#: ../../how-to/cache.rst:316
msgid "Clearing Cache content"
msgstr "キャッシュ内容のクリア"

#: ../../how-to/cache.rst:318
msgid "You can instruct pytest to clear all cache files and values by adding the ``--cache-clear`` option like this:"
msgstr "次のように ``--cache-clear`` オプションを追加して、pytest にすべてのキャッシュファイルと値をクリアするように指示できます:"

#: ../../how-to/cache.rst:325
msgid "This is recommended for invocations from Continuous Integration servers where isolation and correctness is more important than speed."
msgstr "これは、速度よりも分離と正確性が重要な継続的インテグレーションサーバーからの呼び出しに推奨されます。"

#: ../../how-to/cache.rst:333
msgid "Stepwise"
msgstr "ステップワイズ"

#: ../../how-to/cache.rst:335
msgid "As an alternative to ``--lf -x``, especially for cases where you expect a large part of the test suite will fail, ``--sw``, ``--stepwise`` allows you to fix them one at a time. The test suite will run until the first failure and then stop. At the next invocation, tests will continue from the last failing test and then run until the next failing test. You may use the ``--stepwise-skip`` option to ignore one failing test and stop the test execution on the second failing test instead. This is useful if you get stuck on a failing test and just want to ignore it until later.  Providing ``--stepwise-skip`` will also enable ``--stepwise`` implicitly."
msgstr "``--lf -x`` の代替として、特にテストスイートの大部分が失敗すると予想される場合、``--sw``, ``--stepwise`` を使用すると、1 つずつ修正できます。テストスイートは最初の失敗まで実行され、その後停止します。次の呼び出しでは、テストは最後の失敗したテストから続行され、次の失敗したテストまで実行されます。``--stepwise-skip`` オプションを使用して、1 つの失敗したテストを無視し、2 番目の失敗したテストでテスト実行を停止することができます。これは、失敗したテストで行き詰まり、それを後回しにしたい場合に便利です。``--stepwise-skip`` を指定すると、``--stepwise`` も暗黙的に有効になります。"
