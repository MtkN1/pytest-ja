# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, holger krekel and pytest-dev team
# This file is distributed under the same license as the pytest package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pytest 0.1.dev16209\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-05 00:52+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../how-to/capture-warnings.rst:4
msgid "How to capture warnings"
msgstr "警告をキャプチャする方法"

#: ../../how-to/capture-warnings.rst:8
msgid "Starting from version ``3.1``, pytest now automatically catches warnings during test execution and displays them at the end of the session:"
msgstr "バージョン ``3.1`` から、pytest はテスト実行中に警告を自動的にキャッチし、セッションの最後に表示します:"

#: ../../how-to/capture-warnings.rst:25
msgid "Running pytest now produces this output:"
msgstr "pytest を実行すると、次の出力が生成されます:"

#: ../../how-to/capture-warnings.rst:48
msgid "Controlling warnings"
msgstr "警告の制御"

#: ../../how-to/capture-warnings.rst:50
msgid "Similar to Python's `warning filter`_ and :option:`-W option <python:-W>` flag, pytest provides its own ``-W`` flag to control which warnings are ignored, displayed, or turned into errors. See the `warning filter`_ documentation for more advanced use-cases."
msgstr "Python の `warning filter`_ および :option:`-W option <python:-W>` フラグと同様に、pytest は独自の ``-W`` フラグを提供して、無視される警告、表示される警告、エラーに変換される警告を制御します。より高度な使用例については、`warning filter`_ ドキュメントを参照してください。"

#: ../../how-to/capture-warnings.rst:57
msgid "This code sample shows how to treat any ``UserWarning`` category class of warning as an error:"
msgstr "このコードサンプルは、任意の ``UserWarning`` カテゴリの警告クラスをエラーとして扱う方法を示しています:"

#: ../../how-to/capture-warnings.rst:82
msgid "The same option can be set in the ``pytest.ini`` or ``pyproject.toml`` file using the ``filterwarnings`` ini option. For example, the configuration below will ignore all user warnings and specific deprecation warnings matching a regex, but will transform all other warnings into errors."
msgstr "同じオプションは、``pytest.ini`` または ``pyproject.toml`` ファイルで ``filterwarnings`` ini オプションを使用して設定できます。たとえば、以下の構成では、すべてのユーザー警告と正規表現に一致する特定の非推奨警告を無視しますが、他のすべての警告をエラーに変換します。"

#: ../../how-to/capture-warnings.rst:108
msgid "When a warning matches more than one option in the list, the action for the last matching option is performed."
msgstr "警告がリスト内の複数のオプションに一致する場合、最後に一致したオプションのアクションが実行されます。"

#: ../../how-to/capture-warnings.rst:114
msgid "The ``-W`` flag and the ``filterwarnings`` ini option use warning filters that are similar in structure, but each configuration option interprets its filter differently. For example, *message* in ``filterwarnings`` is a string containing a regular expression that the start of the warning message must match, case-insensitively, while *message* in ``-W`` is a literal string that the start of the warning message must contain (case-insensitively), ignoring any whitespace at the start or end of message. Consult the `warning filter`_ documentation for more details."
msgstr "``-W`` フラグと ``filterwarnings`` ini オプションは、構造が似た警告フィルタを使用しますが、各構成オプションはフィルタを異なる方法で解釈します。たとえば、``filterwarnings`` の *message* は、警告メッセージの先頭が一致する必要がある正規表現を含む文字列（大文字と小文字を区別しない）ですが、``-W`` の *message* は、警告メッセージの先頭に含まれる必要があるリテラル文字列（大文字と小文字を区別しない）であり、メッセージの先頭または末尾の空白を無視します。詳細については、`warning filter`_ ドキュメントを参照してください。"

#: ../../how-to/capture-warnings.rst:127
msgid "``@pytest.mark.filterwarnings``"
msgstr "``@pytest.mark.filterwarnings``"

#: ../../how-to/capture-warnings.rst:131
msgid "You can use the :ref:`@pytest.mark.filterwarnings <pytest.mark.filterwarnings ref>` mark to add warning filters to specific test items, allowing you to have finer control of which warnings should be captured at test, class or even module level:"
msgstr ":ref:`@pytest.mark.filterwarnings <pytest.mark.filterwarnings ref>` マークを使用して特定のテストアイテムに警告フィルタを追加し、テスト、クラス、さらにはモジュールレベルでキャプチャする警告をより細かく制御できます:"

#: ../../how-to/capture-warnings.rst:150
msgid "You can specify multiple filters with separate decorators:"
msgstr "複数のフィルタを個別のデコレータで指定できます:"

#: ../../how-to/capture-warnings.rst:162
msgid "Regarding decorator order and filter precedence: it's important to remember that decorators are evaluated in reverse order, so you have to list the warning filters in the reverse order compared to traditional :py:func:`warnings.filterwarnings` and :option:`-W option <python:-W>` usage. This means in practice that filters from earlier :ref:`@pytest.mark.filterwarnings <pytest.mark.filterwarnings ref>` decorators take precedence over filters from later decorators, as illustrated in the example above."
msgstr "デコレータの順序とフィルタの優先順位に関して: デコレータは逆順で評価されるため、従来の :py:func:`warnings.filterwarnings` および :option:`-W option <python:-W>` の使用と比較して、警告フィルタを逆順にリストする必要があることを覚えておくことが重要です。これは実際には、上記の例に示されているように、以前の :ref:`@pytest.mark.filterwarnings <pytest.mark.filterwarnings ref>` デコレータからのフィルタが後のデコレータからのフィルタよりも優先されることを意味します。"

#: ../../how-to/capture-warnings.rst:170
msgid "Filters applied using a mark take precedence over filters passed on the command line or configured by the :confval:`filterwarnings` ini option."
msgstr "マークを使用して適用されたフィルタは、コマンドラインで渡されたフィルタや :confval:`filterwarnings` ini オプションで構成されたフィルタよりも優先されま��。"

#: ../../how-to/capture-warnings.rst:173
msgid "You may apply a filter to all tests of a class by using the :ref:`filterwarnings <pytest.mark.filterwarnings ref>` mark as a class decorator or to all tests in a module by setting the :globalvar:`pytestmark` variable:"
msgstr ":ref:`filterwarnings <pytest.mark.filterwarnings ref>` マークをクラスデコレータとして使用するか、:globalvar:`pytestmark` 変数を設定してモジュール内のすべてのテストにフィルタを適用できます:"

#: ../../how-to/capture-warnings.rst:184
msgid "If you want to apply multiple filters (by assigning a list of :ref:`filterwarnings <pytest.mark.filterwarnings ref>` mark to :globalvar:`pytestmark`), you must use the traditional :py:func:`warnings.filterwarnings` ordering approach (later filters take precedence), which is the reverse of the decorator approach mentioned above."
msgstr "複数のフィルタを適用する場合（:ref:`filterwarnings <pytest.mark.filterwarnings ref>` マークのリストを :globalvar:`pytestmark` に割り当てることによって）、従来の :py:func:`warnings.filterwarnings` の順序付けアプローチ（後のフィルタが優先される）を使用する必要があります。これは、上記のデコレータアプローチの逆です。"

#: ../../how-to/capture-warnings.rst:190
msgid "*Credits go to Florian Schulze for the reference implementation in the* `pytest-warnings`_ *plugin.*"
msgstr "*`pytest-warnings`_ プラグインのリファレンス実装に対する Florian Schulze の功績に感謝します。*"

#: ../../how-to/capture-warnings.rst:196
msgid "Disabling warnings summary"
msgstr "警告サマリーの無効化"

#: ../../how-to/capture-warnings.rst:198
msgid "Although not recommended, you can use the ``--disable-warnings`` command-line option to suppress the warning summary entirely from the test run output."
msgstr "推奨されませんが、``--disable-warnings`` コマンドラインオプションを使用して、テスト実行出力から警告サマリーを完全に抑制することができます。"

#: ../../how-to/capture-warnings.rst:202
msgid "Disabling warning capture entirely"
msgstr "警告キャプチャを完全に無効にする"

#: ../../how-to/capture-warnings.rst:204
msgid "This plugin is enabled by default but can be disabled entirely in your ``pytest.ini`` file with:"
msgstr "このプラグインはデフォルトで有効になっていますが、``pytest.ini`` ファイルで完全に無効にすることができます:"

#: ../../how-to/capture-warnings.rst:211
msgid "Or passing ``-p no:warnings`` in the command-line. This might be useful if your test suites handles warnings using an external system."
msgstr "または、コマンドラインで ``-p no:warnings`` を渡します。これは、テストスイートが外部システムを使用して警告を処理する場合に役立つ場合があります。"

#: ../../how-to/capture-warnings.rst:218
msgid "DeprecationWarning and PendingDeprecationWarning"
msgstr "DeprecationWarning と PendingDeprecationWarning"

#: ../../how-to/capture-warnings.rst:220
msgid "By default pytest will display ``DeprecationWarning`` and ``PendingDeprecationWarning`` warnings from user code and third-party libraries, as recommended by :pep:`565`. This helps users keep their code modern and avoid breakages when deprecated warnings are effectively removed."
msgstr "デフォルトでは、pytest は :pep:`565` の推奨に従って、ユーザーコードおよびサードパーティライブラリからの ``DeprecationWarning`` および ``PendingDeprecationWarning`` 警告を表示します。これにより、ユーザーはコードを最新の状態に保ち、非推奨の警告が実際に削除されたときに発生する破損を回避できます。"

#: ../../how-to/capture-warnings.rst:224
msgid "However, in the specific case where users capture any type of warnings in their test, either with :func:`pytest.warns`, :func:`pytest.deprecated_call` or using the :fixture:`recwarn` fixture, no warning will be displayed at all."
msgstr "ただし、ユーザーがテストで :func:`pytest.warns`、:func:`pytest.deprecated_call`、または :fixture:`recwarn` フィクスチャを使用して任意の種類の警告をキャプチャする特定のケースでは、警告はまったく表示されません。"

#: ../../how-to/capture-warnings.rst:228
msgid "Sometimes it is useful to hide some specific deprecation warnings that happen in code that you have no control over (such as third-party libraries), in which case you might use the warning filters options (ini or marks) to ignore those warnings."
msgstr "コード内で発生する特定の非推奨警告（サードパーティライブラリなど）を非表示にすることが有用な場合があります。その場合、警告フィルタオプション（ini またはマーク）を使用してそれらの警告を無視することができます。"

#: ../../how-to/capture-warnings.rst:232
msgid "For example:"
msgstr "例えば:"

#: ../../how-to/capture-warnings.rst:241
msgid "This will ignore all warnings of type ``DeprecationWarning`` where the start of the message matches the regular expression ``\".*U.*mode is deprecated\"``."
msgstr "これにより、メッセージの先頭が正規表現 ``\".*U.*mode is deprecated\"`` に一致するすべての ``DeprecationWarning`` タイプの警告が無視されます。"

#: ../../how-to/capture-warnings.rst:244
msgid "See :ref:`@pytest.mark.filterwarnings <filterwarnings>` and :ref:`Controlling warnings <controlling-warnings>` for more examples."
msgstr "詳細な例については、:ref:`@pytest.mark.filterwarnings <filterwarnings>` および :ref:`Controlling warnings <controlling-warnings>` を参照してください。"

#: ../../how-to/capture-warnings.rst:249
msgid "If warnings are configured at the interpreter level, using the :envvar:`python:PYTHONWARNINGS` environment variable or the ``-W`` command-line option, pytest will not configure any filters by default."
msgstr "警告がインタープリターレベルで構成されている場合、:envvar:`python:PYTHONWARNINGS` 環境変数または ``-W`` コマンドラインオプションを使用して、pytest はデフォルトでフィルタを構成しません。"

#: ../../how-to/capture-warnings.rst:253
msgid "Also pytest doesn't follow :pep:`506` suggestion of resetting all warning filters because it might break test suites that configure warning filters themselves by calling :func:`warnings.simplefilter` (see :issue:`2430` for an example of that)."
msgstr "また、pytest はすべての警告フィルタをリセットするという :pep:`506` の提案に従いません。これは、:func:`warnings.simplefilter` を呼び出して警告フィルタを自分で構成するテストスイートを壊す可能性があるためです（その例については :issue:`2430` を参照してください）。"

#: ../../how-to/capture-warnings.rst:263
msgid "Ensuring code triggers a deprecation warning"
msgstr "コードが非推奨警告をトリガーすることを確認する"

#: ../../how-to/capture-warnings.rst:265
msgid "You can also use :func:`pytest.deprecated_call` for checking that a certain function call triggers a ``DeprecationWarning`` or ``PendingDeprecationWarning``:"
msgstr "特定の関数呼び出しが ``DeprecationWarning`` または ``PendingDeprecationWarning`` をトリガーすることを確認するために :func:`pytest.deprecated_call` を使用することもできます:"

#: ../../how-to/capture-warnings.rst:278
msgid "This test will fail if ``myfunction`` does not issue a deprecation warning when called with a ``17`` argument."
msgstr "このテストは、``myfunction`` が ``17`` 引数で呼び出されたときに非推奨警告を発行しない場合に失敗します。"

#: ../../how-to/capture-warnings.rst:293
msgid "Asserting warnings with the warns function"
msgstr "warns 関数を使用して警告をアサートする"

#: ../../how-to/capture-warnings.rst:295
msgid "You can check that code raises a particular warning using :func:`pytest.warns`, which works in a similar manner to :ref:`raises <assertraises>` (except that :ref:`raises <assertraises>` does not capture all exceptions, only the ``expected_exception``):"
msgstr ":func:`pytest.warns` を使用してコードが特定の警告を発生させることを確認できます。これは :ref:`raises <assertraises>` と同様の方法で動作します（ただし、:ref:`raises <assertraises>` はすべての例外をキャプチャするわけではなく、``expected_exception`` のみをキャプチャします）:"

#: ../../how-to/capture-warnings.rst:311
msgid "The test will fail if the warning in question is not raised. Use the keyword argument ``match`` to assert that the warning matches a text or regex. To match a literal string that may contain regular expression metacharacters like ``(`` or ``.``, the pattern can first be escaped with ``re.escape``."
msgstr "問題の警告が発生しない場合、テストは失敗します。キーワード引数 ``match`` を使用して、警告がテキストまたは正規表現に一致することをアサートします。``(`` や ``.`` などの正規表現メタ文字を含む可能性のあるリテラル文字列に一致させるには、パターンを最初に ``re.escape`` でエスケープできます。"

#: ../../how-to/capture-warnings.rst:316
msgid "Some examples:"
msgstr "いくつかの例:"

#: ../../how-to/capture-warnings.rst:340
msgid "You can also call :func:`pytest.warns` on a function or code string:"
msgstr "関数またはコード文字列に対して :func:`pytest.warns` を呼び出すこともできます:"

#: ../../how-to/capture-warnings.rst:347
msgid "The function also returns a list of all raised warnings (as ``warnings.WarningMessage`` objects), which you can query for additional information:"
msgstr "関数は、発生したすべての警告のリスト（``warnings.WarningMessage`` オブジェクトとして）も返します。これにより、追加情報を照会できます:"

#: ../../how-to/capture-warnings.rst:361
msgid "Alternatively, you can examine raised warnings in detail using the :fixture:`recwarn` fixture (see :ref:`below <recwarn>`)."
msgstr "または、:fixture:`recwarn` フィクスチャを使用して発生した警告を詳細に調べることができます（:ref:`below <recwarn>` を参照）。"

#: ../../how-to/capture-warnings.rst:365
msgid "The :fixture:`recwarn` fixture automatically ensures to reset the warnings filter at the end of the test, so no global state is leaked."
msgstr ":fixture:`recwarn` フィクスチャは、テストの最後に警告フィルタをリセットすることを自動的に保証するため、グローバルな状態が漏洩することはありません。"

#: ../../how-to/capture-warnings.rst:373
msgid "Recording warnings"
msgstr "警告の記録"

#: ../../how-to/capture-warnings.rst:375
msgid "You can record raised warnings either using the :func:`pytest.warns` context manager or with the :fixture:`recwarn` fixture."
msgstr ":func:`pytest.warns` コンテキストマネージャーを使用するか、:fixture:`recwarn` フィクスチャを使用して発生した警告を記録できます。"

#: ../../how-to/capture-warnings.rst:378
msgid "To record with :func:`pytest.warns` without asserting anything about the warnings, pass no arguments as the expected warning type and it will default to a generic Warning:"
msgstr ":func:`pytest.warns` を使用して警告に関するアサーションを行わずに記録するには、予期される警告タイプとして引数を渡さず、デフォルトで一般的な警告に設定します:"

#: ../../how-to/capture-warnings.rst:391
msgid "The :fixture:`recwarn` fixture will record warnings for the whole function:"
msgstr ":fixture:`recwarn` フィクスチャは、関数全体の警告を記録します:"

#: ../../how-to/capture-warnings.rst:407
msgid "Both the :fixture:`recwarn` fixture and the :func:`pytest.warns` context manager return the same interface for recorded warnings: a :class:`~_pytest.recwarn.WarningsRecorder` instance. To view the recorded warnings, you can iterate over this instance, call ``len`` on it to get the number of recorded warnings, or index into it to get a particular recorded warning."
msgstr ":fixture:`recwarn` フィクスチャと :func:`pytest.warns` コンテキストマネージャーの両方が、記録された警告に対して同じインターフェースを返します: :class:`~_pytest.recwarn.WarningsRecorder` インスタンス。記録された警告を表示するには、このインスタンスを反復処理するか、``len`` を呼び出して記録された警告の数を取得するか、インデックスを使用して特定の記録された警告を取得します。"

#: ../../how-to/capture-warnings.rst:416
msgid "Additional use cases of warnings in tests"
msgstr "テストにおける警告の追加使用例"

#: ../../how-to/capture-warnings.rst:418
msgid "Here are some use cases involving warnings that often come up in tests, and suggestions on how to deal with them:"
msgstr "テストでよく発生する警告に関連するいくつかの使用例と、それらに対処する方法の提案を示します:"

#: ../../how-to/capture-warnings.rst:420
msgid "To ensure that **at least one** of the indicated warnings is issued, use:"
msgstr "指定された警告の **少なくとも1つ** が発行されることを確認するには、次を使用します:"

#: ../../how-to/capture-warnings.rst:428
msgid "To ensure that **only** certain warnings are issued, use:"
msgstr "特定の警告 **のみ** が発行されることを確認するには、次を使用します:"

#: ../../how-to/capture-warnings.rst:438
msgid "To ensure that **no** warnings are emitted, use:"
msgstr "警告が **まったく** 発行されないことを確認するには、次を使用します:"

#: ../../how-to/capture-warnings.rst:447
msgid "To suppress warnings, use:"
msgstr "警告を抑制するには、次を使用します:"

#: ../../how-to/capture-warnings.rst:459
msgid "Custom failure messages"
msgstr "カスタム失敗メッセージ"

#: ../../how-to/capture-warnings.rst:461
msgid "Recording warnings provides an opportunity to produce custom test failure messages for when no warnings are issued or other conditions are met."
msgstr "警告を記録することで、警告が発行されない場合や他の条件が満たされた場合にカスタムテスト失敗メッセージを生成する機会が得られます。"

#: ../../how-to/capture-warnings.rst:473
msgid "If no warnings are issued when calling ``f``, then ``not record`` will evaluate to ``True``.  You can then call :func:`pytest.fail` with a custom error message."
msgstr "``f`` を呼び出したときに警告が発行されない場合、``not record`` は ``True`` と評価されます。その後、カスタムエラーメッセージを使用して :func:`pytest.fail` を呼び出すことができます。"

#: ../../how-to/capture-warnings.rst:480
msgid "Internal pytest warnings"
msgstr "内部 pytest 警告"

#: ../../how-to/capture-warnings.rst:482
msgid "pytest may generate its own warnings in some situations, such as improper usage or deprecated features."
msgstr "pytest は、不適切な使用法や非推奨の機能など、いくつかの状況で独自の警告を生成する場合があります。"

#: ../../how-to/capture-warnings.rst:484
msgid "For example, pytest will emit a warning if it encounters a class that matches :confval:`python_classes` but also defines an ``__init__`` constructor, as this prevents the class from being instantiated:"
msgstr "たとえば、pytest は :confval:`python_classes` に一致するクラスに遭遇し、``__init__`` コンストラクタも定義されている場合、クラスのインスタンス化を防ぐため、警告を発します:"

#: ../../how-to/capture-warnings.rst:509
msgid "These warnings might be filtered using the same builtin mechanisms used to filter other types of warnings."
msgstr "これらの警告は、他の種類の警告をフィルタリングするために使用される同じ組み込みメカニズムを使用してフィルタリングされる場合があります。"

#: ../../how-to/capture-warnings.rst:511
msgid "Please read our :ref:`backwards-compatibility` to learn how we proceed about deprecating and eventually removing features."
msgstr "機能の非推奨化と最終的な削除の進め方については、:ref:`backwards-compatibility` をお読みください。"

#: ../../how-to/capture-warnings.rst:514
msgid "The full list of warnings is listed in :ref:`the reference documentation <warnings ref>`."
msgstr "警告の完全なリストは、:ref:`the reference documentation <warnings ref>` に記載されています。"

#: ../../how-to/capture-warnings.rst:520
msgid "Resource Warnings"
msgstr "リソース警告"

#: ../../how-to/capture-warnings.rst:522
msgid "Additional information of the source of a :class:`ResourceWarning` can be obtained when captured by pytest if :mod:`tracemalloc` module is enabled."
msgstr ":mod:`tracemalloc` モジュールが有効になっている場合、pytest によってキャプチャされたときに :class:`ResourceWarning` のソースに関する追加情報を取得できます。"

#: ../../how-to/capture-warnings.rst:525
msgid "One convenient way to enable :mod:`tracemalloc` when running tests is to set the :envvar:`PYTHONTRACEMALLOC` to a large enough number of frames (say ``20``, but that number is application dependent)."
msgstr "テストを実行するときに :mod:`tracemalloc` を有効にする便利な方法の1つは、:envvar:`PYTHONTRACEMALLOC` を十分な数のフレーム（たとえば ``20``、ただしその数はアプリケーションに依存します）に設定することです。"

#: ../../how-to/capture-warnings.rst:528
msgid "For more information, consult the `Python Development Mode <https://docs.python.org/3/library/devmode.html>`__ section in the Python documentation."
msgstr "詳細については、Python ドキュメントの `Python Development Mode <https://docs.python.org/3/library/devmode.html>`__ セクションを参照してください。"
