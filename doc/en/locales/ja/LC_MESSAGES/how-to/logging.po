# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, holger krekel and pytest-dev team
# This file is distributed under the same license as the pytest package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pytest 0.1.dev16209\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-05 00:52+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../how-to/logging.rst:4
msgid "How to manage logging"
msgstr ""

#: ../../how-to/logging.rst:6
msgid "pytest captures log messages of level ``WARNING`` or above automatically and displays them in their own section for each failed test in the same manner as captured stdout and stderr."
msgstr ""

#: ../../how-to/logging.rst:9
msgid "Running without options:"
msgstr ""

#: ../../how-to/logging.rst:15 ../../how-to/logging.rst:38
msgid "Shows failed tests like so:"
msgstr ""

#: ../../how-to/logging.rst:27
msgid "By default each captured log message shows the module, line number, log level and message."
msgstr ""

#: ../../how-to/logging.rst:30
msgid "If desired the log and date format can be specified to anything that the logging module supports by passing specific formatting options:"
msgstr ""

#: ../../how-to/logging.rst:50
msgid "These options can also be customized through ``pytest.ini`` file:"
msgstr ""

#: ../../how-to/logging.rst:58
#, python-brace-format
msgid "Specific loggers can be disabled via ``--log-disable={logger_name}``. This argument can be passed multiple times:"
msgstr ""

#: ../../how-to/logging.rst:65
msgid "Further it is possible to disable reporting of captured content (stdout, stderr and logs) on failed tests completely with:"
msgstr ""

#: ../../how-to/logging.rst:74
msgid "caplog fixture"
msgstr ""

#: ../../how-to/logging.rst:76
msgid "Inside tests it is possible to change the log level for the captured log messages.  This is supported by the ``caplog`` fixture:"
msgstr ""

#: ../../how-to/logging.rst:84
msgid "By default the level is set on the root logger, however as a convenience it is also possible to set the log level of any logger:"
msgstr ""

#: ../../how-to/logging.rst:93
msgid "The log levels set are restored automatically at the end of the test."
msgstr ""

#: ../../how-to/logging.rst:95
msgid "It is also possible to use a context manager to temporarily change the log level inside a ``with`` block:"
msgstr ""

#: ../../how-to/logging.rst:104
msgid "Again, by default the level of the root logger is affected but the level of any logger can be changed instead with:"
msgstr ""

#: ../../how-to/logging.rst:113
msgid "Lastly all the logs sent to the logger during the test run are made available on the fixture in the form of both the ``logging.LogRecord`` instances and the final log text. This is useful for when you want to assert on the contents of a message:"
msgstr ""

#: ../../how-to/logging.rst:125
msgid "For all the available attributes of the log records see the ``logging.LogRecord`` class."
msgstr ""

#: ../../how-to/logging.rst:128
msgid "You can also resort to ``record_tuples`` if all you want to do is to ensure, that certain messages have been logged under a given logger name with a given severity and message:"
msgstr ""

#: ../../how-to/logging.rst:139
msgid "You can call ``caplog.clear()`` to reset the captured log records in a test:"
msgstr ""

#: ../../how-to/logging.rst:150
msgid "The ``caplog.records`` attribute contains records from the current stage only, so inside the ``setup`` phase it contains only setup logs, same with the ``call`` and ``teardown`` phases."
msgstr ""

#: ../../how-to/logging.rst:154
msgid "To access logs from other stages, use the ``caplog.get_records(when)`` method. As an example, if you want to make sure that tests which use a certain fixture never log any warnings, you can inspect the records for the ``setup`` and ``call`` stages during teardown like so:"
msgstr ""

#: ../../how-to/logging.rst:173
msgid "The full API is available at :class:`pytest.LogCaptureFixture`."
msgstr ""

#: ../../how-to/logging.rst:177
msgid "The ``caplog`` fixture adds a handler to the root logger to capture logs. If the root logger is modified during a test, for example with ``logging.config.dictConfig``, this handler may be removed and cause no logs to be captured. To avoid this, ensure that any root logger configuration only adds to the existing handlers."
msgstr ""

#: ../../how-to/logging.rst:186
msgid "Live Logs"
msgstr ""

#: ../../how-to/logging.rst:188
msgid "By setting the :confval:`log_cli` configuration option to ``true``, pytest will output logging records as they are emitted directly into the console."
msgstr ""

#: ../../how-to/logging.rst:191
msgid "You can specify the logging level for which log records with equal or higher level are printed to the console by passing ``--log-cli-level``. This setting accepts the logging level names or numeric values as seen in :ref:`logging's documentation <python:levels>`."
msgstr ""

#: ../../how-to/logging.rst:196
msgid "Additionally, you can also specify ``--log-cli-format`` and ``--log-cli-date-format`` which mirror and default to ``--log-format`` and ``--log-date-format`` if not provided, but are applied only to the console logging handler."
msgstr ""

#: ../../how-to/logging.rst:201
msgid "All of the CLI log options can also be set in the configuration INI file. The option names are:"
msgstr ""

#: ../../how-to/logging.rst:204
msgid "``log_cli_level``"
msgstr ""

#: ../../how-to/logging.rst:205
msgid "``log_cli_format``"
msgstr ""

#: ../../how-to/logging.rst:206
msgid "``log_cli_date_format``"
msgstr ""

#: ../../how-to/logging.rst:208
msgid "If you need to record the whole test suite logging calls to a file, you can pass ``--log-file=/path/to/log/file``. This log file is opened in write mode by default which means that it will be overwritten at each run tests session. If you'd like the file opened in append mode instead, then you can pass ``--log-file-mode=a``. Note that relative paths for the log-file location, whether passed on the CLI or declared in a config file, are always resolved relative to the current working directory."
msgstr ""

#: ../../how-to/logging.rst:215
msgid "You can also specify the logging level for the log file by passing ``--log-file-level``. This setting accepts the logging level names or numeric values as seen in :ref:`logging's documentation <python:levels>`."
msgstr ""

#: ../../how-to/logging.rst:219
msgid "Additionally, you can also specify ``--log-file-format`` and ``--log-file-date-format`` which are equal to ``--log-format`` and ``--log-date-format`` but are applied to the log file logging handler."
msgstr ""

#: ../../how-to/logging.rst:223
msgid "All of the log file options can also be set in the configuration INI file. The option names are:"
msgstr ""

#: ../../how-to/logging.rst:226
msgid "``log_file``"
msgstr ""

#: ../../how-to/logging.rst:227
msgid "``log_file_mode``"
msgstr ""

#: ../../how-to/logging.rst:228
msgid "``log_file_level``"
msgstr ""

#: ../../how-to/logging.rst:229
msgid "``log_file_format``"
msgstr ""

#: ../../how-to/logging.rst:230
msgid "``log_file_date_format``"
msgstr ""

#: ../../how-to/logging.rst:232
msgid "You can call ``set_log_path()`` to customize the log_file path dynamically. This functionality is considered **experimental**. Note that ``set_log_path()`` respects the ``log_file_mode`` option."
msgstr ""

#: ../../how-to/logging.rst:238
msgid "Customizing Colors"
msgstr ""

#: ../../how-to/logging.rst:240
msgid "Log levels are colored if colored terminal output is enabled. Changing from default colors or putting color on custom log levels is supported through ``add_color_level()``. Example:"
msgstr ""

#: ../../how-to/logging.rst:257
msgid "This feature and its API are considered **experimental** and might change between releases without a deprecation notice."
msgstr ""

#: ../../how-to/logging.rst:262
msgid "Release notes"
msgstr ""

#: ../../how-to/logging.rst:264
msgid "This feature was introduced as a drop-in replacement for the :pypi:`pytest-catchlog` plugin and they conflict with each other. The backward compatibility API with ``pytest-capturelog`` has been dropped when this feature was introduced, so if for that reason you still need ``pytest-catchlog`` you can disable the internal feature by adding to your ``pytest.ini``:"
msgstr ""

#: ../../how-to/logging.rst:280
msgid "Incompatible changes in pytest 3.4"
msgstr ""

#: ../../how-to/logging.rst:282
msgid "This feature was introduced in ``3.3`` and some **incompatible changes** have been made in ``3.4`` after community feedback:"
msgstr ""

#: ../../how-to/logging.rst:285
msgid "Log levels are no longer changed unless explicitly requested by the :confval:`log_level` configuration or ``--log-level`` command-line options. This allows users to configure logger objects themselves. Setting :confval:`log_level` will set the level that is captured globally so if a specific test requires a lower level than this, use the ``caplog.set_level()`` functionality otherwise that test will be prone to failure."
msgstr ""

#: ../../how-to/logging.rst:290
msgid ":ref:`Live Logs <live_logs>` is now disabled by default and can be enabled setting the :confval:`log_cli` configuration option to ``true``. When enabled, the verbosity is increased so logging for each test is visible."
msgstr ""

#: ../../how-to/logging.rst:293
msgid ":ref:`Live Logs <live_logs>` are now sent to ``sys.stdout`` and no longer require the ``-s`` command-line option to work."
msgstr ""

#: ../../how-to/logging.rst:296
msgid "If you want to partially restore the logging behavior of version ``3.3``, you can add this options to your ``ini`` file:"
msgstr ""

#: ../../how-to/logging.rst:305
msgid "More details about the discussion that lead to this changes can be read in :issue:`3013`."
msgstr ""

