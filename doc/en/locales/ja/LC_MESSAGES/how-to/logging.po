# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, holger krekel and pytest-dev team
# This file is distributed under the same license as the pytest package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pytest 0.1.dev16209\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-05 00:52+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../how-to/logging.rst:4
msgid "How to manage logging"
msgstr "ロギングを管理する方法"

#: ../../how-to/logging.rst:6
msgid "pytest captures log messages of level ``WARNING`` or above automatically and displays them in their own section for each failed test in the same manner as captured stdout and stderr."
msgstr "pytest は、レベル ``WARNING`` 以上のログメッセージを自動的にキャプチャし、キャプチャされた stdout および stderr と同様に、各失敗したテストの独自のセクションに表示します。"

#: ../../how-to/logging.rst:9
msgid "Running without options:"
msgstr "オプションなしで実行:"

#: ../../how-to/logging.rst:15 ../../how-to/logging.rst:38
msgid "Shows failed tests like so:"
msgstr "次のように失敗したテストを表示します:"

#: ../../how-to/logging.rst:27
msgid "By default each captured log message shows the module, line number, log level and message."
msgstr "デフォルトでは、キャプチャされた各ログメッセージにモジュール、行番号、ログレベル、およびメッセージが表示されます。"

#: ../../how-to/logging.rst:30
msgid "If desired the log and date format can be specified to anything that the logging module supports by passing specific formatting options:"
msgstr "必要に応じて、特定のフォーマットオプションを渡すことで、ログおよび日付形式をロギングモジュールがサポートする任意の形式に指定できます:"

#: ../../how-to/logging.rst:50
msgid "These options can also be customized through ``pytest.ini`` file:"
msgstr "これらのオプションは、``pytest.ini`` ファイルを通じてカスタマイズすることもできます:"

#: ../../how-to/logging.rst:58
#, python-brace-format
msgid "Specific loggers can be disabled via ``--log-disable={logger_name}``. This argument can be passed multiple times:"
msgstr "特定のロガーは ``--log-disable={logger_name}`` を介して無効にできます。この引数は複数回渡すことができます:"

#: ../../how-to/logging.rst:65
msgid "Further it is possible to disable reporting of captured content (stdout, stderr and logs) on failed tests completely with:"
msgstr "さらに、次のオプションを使用して、失敗したテストでキャプチャされたコンテンツ（stdout、stderr、およびログ）のレポートを完全に無効にすることができます:"

#: ../../how-to/logging.rst:74
msgid "caplog fixture"
msgstr "caplog フィクスチャ"

#: ../../how-to/logging.rst:76
msgid "Inside tests it is possible to change the log level for the captured log messages.  This is supported by the ``caplog`` fixture:"
msgstr "テスト内でキャプチャされたログメッセージのログレベルを変更することができます。これは ``caplog`` フィクスチャによってサポートされています:"

#: ../../how-to/logging.rst:84
msgid "By default the level is set on the root logger, however as a convenience it is also possible to set the log level of any logger:"
msgstr "デフォルトでは、レベルはルートロガーに設定されていますが、便宜上、任意のロガーのログレベルを設定することもできます:"

#: ../../how-to/logging.rst:93
msgid "The log levels set are restored automatically at the end of the test."
msgstr "設定されたログレベルは、テストの終了時に自動的に復元されます。"

#: ../../how-to/logging.rst:95
msgid "It is also possible to use a context manager to temporarily change the log level inside a ``with`` block:"
msgstr "コンテキストマネージャーを使用して、``with`` ブロック内のログレベルを一時的に変更することもできます:"

#: ../../how-to/logging.rst:104
msgid "Again, by default the level of the root logger is affected but the level of any logger can be changed instead with:"
msgstr "再び、デフォルトではルートロガーのレベルが影響を受けますが、代わりに任意のロガーのレベルを変更できます:"

#: ../../how-to/logging.rst:113
msgid "Lastly all the logs sent to the logger during the test run are made available on the fixture in the form of both the ``logging.LogRecord`` instances and the final log text. This is useful for when you want to assert on the contents of a message:"
msgstr "最後に、テスト実行中にロガーに送信されたすべてのログは、``logging.LogRecord`` インスタンスと最終ログテキストの両方の形式でフィクスチャに利用可能になります。これは、メッセージの内容をアサートしたい場合に便利です:"

#: ../../how-to/logging.rst:125
msgid "For all the available attributes of the log records see the ``logging.LogRecord`` class."
msgstr "ログレコードのすべての利用可能な属性については、``logging.LogRecord`` クラスを参照してください。"

#: ../../how-to/logging.rst:128
msgid "You can also resort to ``record_tuples`` if all you want to do is to ensure, that certain messages have been logged under a given logger name with a given severity and message:"
msgstr "特定のメッセージが特定のロガー名の下で特定の重大度とメッセージでログに記録されていることを確認するだけでよい場合は、``record_tuples`` を使用することもできます:"

#: ../../how-to/logging.rst:139
msgid "You can call ``caplog.clear()`` to reset the captured log records in a test:"
msgstr "``caplog.clear()`` を呼び出して、テストでキャプチャされたログレコードをリセットできます:"

#: ../../how-to/logging.rst:150
msgid "The ``caplog.records`` attribute contains records from the current stage only, so inside the ``setup`` phase it contains only setup logs, same with the ``call`` and ``teardown`` phases."
msgstr "``caplog.records`` 属性には現在のステージのレコードのみが含まれるため、``setup`` フェーズ内にはセットアップログのみが含まれ、``call`` および ``teardown`` フェーズも同様です。"

#: ../../how-to/logging.rst:154
msgid "To access logs from other stages, use the ``caplog.get_records(when)`` method. As an example, if you want to make sure that tests which use a certain fixture never log any warnings, you can inspect the records for the ``setup`` and ``call`` stages during teardown like so:"
msgstr "他のステージのログにアクセスするには、``caplog.get_records(when)`` メソッドを使用します。たとえば、特定のフィクスチャを使用するテストが警告をまったくログに記録しないことを確認したい場合、次のようにテアダウン中に ``setup`` および ``call`` ステージのレコードを検査できます:"

#: ../../how-to/logging.rst:173
msgid "The full API is available at :class:`pytest.LogCaptureFixture`."
msgstr "完全な API は :class:`pytest.LogCaptureFixture` で利用できます。"

#: ../../how-to/logging.rst:177
msgid "The ``caplog`` fixture adds a handler to the root logger to capture logs. If the root logger is modified during a test, for example with ``logging.config.dictConfig``, this handler may be removed and cause no logs to be captured. To avoid this, ensure that any root logger configuration only adds to the existing handlers."
msgstr "``caplog`` フィクスチャは、ルートロガーにハンドラを追加してログをキャプチャします。たとえば、``logging.config.dictConfig`` を使用してテスト中にルートロガーが変更された場合、このハンドラが削除され、ログがキャプチャされない可能性があります。これを回避するには、ルートロガーの構成が既存のハンドラにのみ追加されることを確認してください。"

#: ../../how-to/logging.rst:186
msgid "Live Logs"
msgstr "ライブログ"

#: ../../how-to/logging.rst:188
msgid "By setting the :confval:`log_cli` configuration option to ``true``, pytest will output logging records as they are emitted directly into the console."
msgstr ":confval:`log_cli` 構成オプションを ``true`` に設定すると、pytest はログレコードを直接コンソールに出力します。"

#: ../../how-to/logging.rst:191
msgid "You can specify the logging level for which log records with equal or higher level are printed to the console by passing ``--log-cli-level``. This setting accepts the logging level names or numeric values as seen in :ref:`logging's documentation <python:levels>`."
msgstr "``--log-cli-level`` を渡すことで、同等またはそれ以上のレベルのログレコードがコンソールに印刷されるログレベルを指定できます。この設定は、:ref:`logging's documentation <python:levels>` に記載されているログレベル名または数値を受け入れます。"

#: ../../how-to/logging.rst:196
msgid "Additionally, you can also specify ``--log-cli-format`` and ``--log-cli-date-format`` which mirror and default to ``--log-format`` and ``--log-date-format`` if not provided, but are applied only to the console logging handler."
msgstr "さらに、``--log-cli-format`` および ``--log-cli-date-format`` を指定することもできます。これらは、指定されていない場合は ``--log-format`` および ``--log-date-format`` を反映し、デフォルトになりますが、コンソールロギングハンドラにのみ適用されます。"

#: ../../how-to/logging.rst:201
msgid "All of the CLI log options can also be set in the configuration INI file. The option names are:"
msgstr "すべての CLI ログオプションは、構成 INI ファイルで設定することもできます。オプション名は次のとおりです:"

#: ../../how-to/logging.rst:204
msgid "``log_cli_level``"
msgstr "``log_cli_level``"

#: ../../how-to/logging.rst:205
msgid "``log_cli_format``"
msgstr "``log_cli_format``"

#: ../../how-to/logging.rst:206
msgid "``log_cli_date_format``"
msgstr "``log_cli_date_format``"

#: ../../how-to/logging.rst:208
msgid "If you need to record the whole test suite logging calls to a file, you can pass ``--log-file=/path/to/log/file``. This log file is opened in write mode by default which means that it will be overwritten at each run tests session. If you'd like the file opened in append mode instead, then you can pass ``--log-file-mode=a``. Note that relative paths for the log-file location, whether passed on the CLI or declared in a config file, are always resolved relative to the current working directory."
msgstr "テストスイート全体のロギング呼び出しをファイルに記録する必要がある場合は、``--log-file=/path/to/log/file`` を渡すことができます。このログファイルはデフォルトで書き込みモードで開かれるため、各テストセッションの実行時に上書きされます。代わりにファイルを追加モードで開きたい場合は、``--log-file-mode=a`` を渡すことができます。CLI で渡された場合でも構成ファイルで宣言された場合でも、ログファイルの場所の相対パスは常に現在の作業ディレクトリを基準に解決されることに注意してください。"

#: ../../how-to/logging.rst:215
msgid "You can also specify the logging level for the log file by passing ``--log-file-level``. This setting accepts the logging level names or numeric values as seen in :ref:`logging's documentation <python:levels>`."
msgstr "``--log-file-level`` を渡すことで、ログファイルのログレベルを指定することもできます。この設定は、:ref:`logging's documentation <python:levels>` に記載されているログレベル名または数値を受け入れます。"

#: ../../how-to/logging.rst:219
msgid "Additionally, you can also specify ``--log-file-format`` and ``--log-file-date-format`` which are equal to ``--log-format`` and ``--log-date-format`` but are applied to the log file logging handler."
msgstr "さらに、``--log-file-format`` および ``--log-file-date-format`` を指定することもできます。これらは ``--log-format`` および ``--log-date-format`` と同じですが、ログファイルロギングハンドラに適用されます。"

#: ../../how-to/logging.rst:223
msgid "All of the log file options can also be set in the configuration INI file. The option names are:"
msgstr "すべてのログファイルオプションは、構成 INI ファイルで設定することもできます。オプション名は次のとおりです:"

#: ../../how-to/logging.rst:226
msgid "``log_file``"
msgstr "``log_file``"

#: ../../how-to/logging.rst:227
msgid "``log_file_mode``"
msgstr "``log_file_mode``"

#: ../../how-to/logging.rst:228
msgid "``log_file_level``"
msgstr "``log_file_level``"

#: ../../how-to/logging.rst:229
msgid "``log_file_format``"
msgstr "``log_file_format``"

#: ../../how-to/logging.rst:230
msgid "``log_file_date_format``"
msgstr "``log_file_date_format``"

#: ../../how-to/logging.rst:232
msgid "You can call ``set_log_path()`` to customize the log_file path dynamically. This functionality is considered **experimental**. Note that ``set_log_path()`` respects the ``log_file_mode`` option."
msgstr "``set_log_path()`` を呼び出して、log_file パスを動的にカスタマイズできます。この機能は **実験的** と見なされます。``set_log_path()`` は ``log_file_mode`` オプションを尊重することに注意してください。"

#: ../../how-to/logging.rst:238
msgid "Customizing Colors"
msgstr "色のカスタマイズ"

#: ../../how-to/logging.rst:240
msgid "Log levels are colored if colored terminal output is enabled. Changing from default colors or putting color on custom log levels is supported through ``add_color_level()``. Example:"
msgstr "カラーターミナル出力が有効になっている場合、ログレベルは色分けされます。デフォルトの色から変更したり、カスタムログレベルに色を付けたりすることは、``add_color_level()`` を通じてサポートされています。例:"

#: ../../how-to/logging.rst:257
msgid "This feature and its API are considered **experimental** and might change between releases without a deprecation notice."
msgstr "この機能とその API は **実験的** と見なされ、非推奨通知なしにリリース間で変更される可能性があります。"

#: ../../how-to/logging.rst:262
msgid "Release notes"
msgstr "リリースノート"

#: ../../how-to/logging.rst:264
msgid "This feature was introduced as a drop-in replacement for the :pypi:`pytest-catchlog` plugin and they conflict with each other. The backward compatibility API with ``pytest-capturelog`` has been dropped when this feature was introduced, so if for that reason you still need ``pytest-catchlog`` you can disable the internal feature by adding to your ``pytest.ini``:"
msgstr "この機能は、:pypi:`pytest-catchlog` プラグインのドロップイン置換として導入され、互いに競合します。この機能が導入されたときに ``pytest-capturelog`` との後方互換性 API が削除されたため、その理由で ``pytest-catchlog`` がまだ必要な場合は、``pytest.ini`` に追加して内部機能を無効にできます:"

#: ../../how-to/logging.rst:280
msgid "Incompatible changes in pytest 3.4"
msgstr "pytest 3.4 の非互換の変更"

#: ../../how-to/logging.rst:282
msgid "This feature was introduced in ``3.3`` and some **incompatible changes** have been made in ``3.4`` after community feedback:"
msgstr "この機能は ``3.3`` で導入され、コミュニティのフィードバックを受けて ``3.4`` でいくつかの **非互換の変更** が行われました:"

#: ../../how-to/logging.rst:285
msgid "Log levels are no longer changed unless explicitly requested by the :confval:`log_level` configuration or ``--log-level`` command-line options. This allows users to configure logger objects themselves. Setting :confval:`log_level` will set the level that is captured globally so if a specific test requires a lower level than this, use the ``caplog.set_level()`` functionality otherwise that test will be prone to failure."
msgstr "ログレベルは、:confval:`log_level` 構成または ``--log-level`` コマンドラインオプションで明示的に要求されない限り、変更されなくなりました。これにより、ユーザーはロガーオブジェクトを自分で構成できます。:confval:`log_level` を設定すると、グローバルにキャプチャされるレベルが設定されるため、特定のテストでこれより低いレベルが必要な場合は、``caplog.set_level()`` 機能を使用してください。そうしないと、そのテストは失敗しやすくなります。"

#: ../../how-to/logging.rst:290
msgid ":ref:`Live Logs <live_logs>` is now disabled by default and can be enabled setting the :confval:`log_cli` configuration option to ``true``. When enabled, the verbosity is increased so logging for each test is visible."
msgstr ":ref:`Live Logs <live_logs>` はデフォルトで無効になっており、:confval:`log_cli` 構成オプションを ``true`` に設定して有効にできます。有効にすると、冗長性が増加し、各テストのロギングが表示されます。"

#: ../../how-to/logging.rst:293
msgid ":ref:`Live Logs <live_logs>` are now sent to ``sys.stdout`` and no longer require the ``-s`` command-line option to work."
msgstr ":ref:`Live Logs <live_logs>` は現在 ``sys.stdout`` に送信され、動作するために ``-s`` コマンドラインオプションを必要としなくなりました。"

#: ../../how-to/logging.rst:296
msgid "If you want to partially restore the logging behavior of version ``3.3``, you can add this options to your ``ini`` file:"
msgstr "バージョン ``3.3`` のロギング動作を部分的に復元したい場合は、次のオプションを ``ini`` ファイルに追加できます:"

#: ../../how-to/logging.rst:305
msgid "More details about the discussion that lead to this changes can be read in :issue:`3013`."
msgstr "この変更につながった議論の詳細については、:issue:`3013` を参照してください。"
