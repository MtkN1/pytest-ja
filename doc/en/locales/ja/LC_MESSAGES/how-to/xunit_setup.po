# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, holger krekel and pytest-dev team
# This file is distributed under the same license as the pytest package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pytest 0.1.dev16209\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-05 00:52+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../how-to/xunit_setup.rst:6
msgid "How to implement xunit-style set-up"
msgstr ""

#: ../../how-to/xunit_setup.rst:8
msgid "This section describes a classic and popular way how you can implement fixtures (setup and teardown test state) on a per-module/class/function basis."
msgstr ""

#: ../../how-to/xunit_setup.rst:14
msgid "While these setup/teardown methods are simple and familiar to those coming from a ``unittest`` or ``nose`` background, you may also consider using pytest's more powerful :ref:`fixture mechanism <fixture>` which leverages the concept of dependency injection, allowing for a more modular and more scalable approach for managing test state, especially for larger projects and for functional testing.  You can mix both fixture mechanisms in the same file but test methods of ``unittest.TestCase`` subclasses cannot receive fixture arguments."
msgstr ""

#: ../../how-to/xunit_setup.rst:26
msgid "Module level setup/teardown"
msgstr ""

#: ../../how-to/xunit_setup.rst:28
msgid "If you have multiple test functions and test classes in a single module you can optionally implement the following fixture methods which will usually be called once for all the functions:"
msgstr ""

#: ../../how-to/xunit_setup.rst:43
msgid "As of pytest-3.0, the ``module`` parameter is optional."
msgstr ""

#: ../../how-to/xunit_setup.rst:46
msgid "Class level setup/teardown"
msgstr ""

#: ../../how-to/xunit_setup.rst:48
msgid "Similarly, the following methods are called at class level before and after all test methods of the class are called:"
msgstr ""

#: ../../how-to/xunit_setup.rst:69
msgid "Method and function level setup/teardown"
msgstr ""

#: ../../how-to/xunit_setup.rst:71
msgid "Similarly, the following methods are called around each method invocation:"
msgstr ""

#: ../../how-to/xunit_setup.rst:86
msgid "As of pytest-3.0, the ``method`` parameter is optional."
msgstr ""

#: ../../how-to/xunit_setup.rst:88
msgid "If you would rather define test functions directly at module level you can also use the following functions to implement fixtures:"
msgstr ""

#: ../../how-to/xunit_setup.rst:104
msgid "As of pytest-3.0, the ``function`` parameter is optional."
msgstr ""

#: ../../how-to/xunit_setup.rst:106
msgid "Remarks:"
msgstr ""

#: ../../how-to/xunit_setup.rst:108
msgid "It is possible for setup/teardown pairs to be invoked multiple times per testing process."
msgstr ""

#: ../../how-to/xunit_setup.rst:111
msgid "teardown functions are not called if the corresponding setup function existed and failed/was skipped."
msgstr ""

#: ../../how-to/xunit_setup.rst:114
msgid "Prior to pytest-4.2, xunit-style functions did not obey the scope rules of fixtures, so it was possible, for example, for a ``setup_method`` to be called before a session-scoped autouse fixture."
msgstr ""

#: ../../how-to/xunit_setup.rst:118
msgid "Now the xunit-style functions are integrated with the fixture mechanism and obey the proper scope rules of fixtures involved in the call."
msgstr ""

