# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, holger krekel and pytest-dev team
# This file is distributed under the same license as the pytest package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pytest 0.1.dev16209\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-05 00:52+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../how-to/skipping.rst:6
msgid "How to use skip and xfail to deal with tests that cannot succeed"
msgstr ""

#: ../../how-to/skipping.rst:8
msgid "You can mark test functions that cannot be run on certain platforms or that you expect to fail so pytest can deal with them accordingly and present a summary of the test session, while keeping the test suite *green*."
msgstr ""

#: ../../how-to/skipping.rst:12
msgid "A **skip** means that you expect your test to pass only if some conditions are met, otherwise pytest should skip running the test altogether. Common examples are skipping windows-only tests on non-windows platforms, or skipping tests that depend on an external resource which is not available at the moment (for example a database)."
msgstr ""

#: ../../how-to/skipping.rst:17
msgid "An **xfail** means that you expect a test to fail for some reason. A common example is a test for a feature not yet implemented, or a bug not yet fixed. When a test passes despite being expected to fail (marked with ``pytest.mark.xfail``), it's an **xpass** and will be reported in the test summary."
msgstr ""

#: ../../how-to/skipping.rst:22
msgid "``pytest`` counts and lists *skip* and *xfail* tests separately. Detailed information about skipped/xfailed tests is not shown by default to avoid cluttering the output.  You can use the ``-r`` option to see details corresponding to the \"short\" letters shown in the test progress:"
msgstr ""

#: ../../how-to/skipping.rst:31
msgid "More details on the ``-r`` option can be found by running ``pytest -h``."
msgstr ""

#: ../../how-to/skipping.rst:33
msgid "(See :ref:`how to change command line options defaults`)"
msgstr ""

#: ../../how-to/skipping.rst:40
msgid "Skipping test functions"
msgstr ""

#: ../../how-to/skipping.rst:44
msgid "The simplest way to skip a test function is to mark it with the ``skip`` decorator which may be passed an optional ``reason``:"
msgstr ""

#: ../../how-to/skipping.rst:53
msgid "Alternatively, it is also possible to skip imperatively during test execution or setup by calling the ``pytest.skip(reason)`` function:"
msgstr ""

#: ../../how-to/skipping.rst:62
msgid "The imperative method is useful when it is not possible to evaluate the skip condition during import time."
msgstr ""

#: ../../how-to/skipping.rst:65
msgid "It is also possible to skip the whole module using ``pytest.skip(reason, allow_module_level=True)`` at the module level:"
msgstr ""

#: ../../how-to/skipping.rst:78
msgid "**Reference**: :ref:`pytest.mark.skip ref`"
msgstr ""

#: ../../how-to/skipping.rst:81
msgid "``skipif``"
msgstr ""

#: ../../how-to/skipping.rst:85
msgid "If you wish to skip something conditionally then you can use ``skipif`` instead. Here is an example of marking a test function to be skipped when run on an interpreter earlier than Python3.10:"
msgstr ""

#: ../../how-to/skipping.rst:97
msgid "If the condition evaluates to ``True`` during collection, the test function will be skipped, with the specified reason appearing in the summary when using ``-rs``."
msgstr ""

#: ../../how-to/skipping.rst:100
msgid "You can share ``skipif`` markers between modules.  Consider this test module:"
msgstr ""

#: ../../how-to/skipping.rst:115
msgid "You can import the marker and reuse it in another test module:"
msgstr ""

#: ../../how-to/skipping.rst:126
msgid "For larger test suites it's usually a good idea to have one file where you define the markers which you then consistently apply throughout your test suite."
msgstr ""

#: ../../how-to/skipping.rst:130
msgid "Alternatively, you can use :ref:`condition strings <string conditions>` instead of booleans, but they can't be shared between modules easily so they are supported mainly for backward compatibility reasons."
msgstr ""

#: ../../how-to/skipping.rst:134
msgid "**Reference**: :ref:`pytest.mark.skipif ref`"
msgstr ""

#: ../../how-to/skipping.rst:138
msgid "Skip all test functions of a class or module"
msgstr ""

#: ../../how-to/skipping.rst:140
msgid "You can use the ``skipif`` marker (as any other marker) on classes:"
msgstr ""

#: ../../how-to/skipping.rst:149
msgid "If the condition is ``True``, this marker will produce a skip result for each of the test methods of that class."
msgstr ""

#: ../../how-to/skipping.rst:152
msgid "If you want to skip all test functions of a module, you may use the :globalvar:`pytestmark` global:"
msgstr ""

#: ../../how-to/skipping.rst:160
msgid "If multiple ``skipif`` decorators are applied to a test function, it will be skipped if any of the skip conditions is true."
msgstr ""

#: ../../how-to/skipping.rst:167
msgid "Skipping files or directories"
msgstr ""

#: ../../how-to/skipping.rst:169
msgid "Sometimes you may need to skip an entire file or directory, for example if the tests rely on Python version-specific features or contain code that you do not wish pytest to run. In this case, you must exclude the files and directories from collection. Refer to :ref:`customizing-test-collection` for more information."
msgstr ""

#: ../../how-to/skipping.rst:177
msgid "Skipping on a missing import dependency"
msgstr ""

#: ../../how-to/skipping.rst:179
msgid "You can skip tests on a missing import by using :ref:`pytest.importorskip ref` at module level, within a test, or test setup function."
msgstr ""

#: ../../how-to/skipping.rst:186
msgid "If ``docutils`` cannot be imported here, this will lead to a skip outcome of the test. You can also skip based on the version number of a library:"
msgstr ""

#: ../../how-to/skipping.rst:193
msgid "The version will be read from the specified module's ``__version__`` attribute."
msgstr ""

#: ../../how-to/skipping.rst:197
msgid "Summary"
msgstr ""

#: ../../how-to/skipping.rst:199
msgid "Here's a quick guide on how to skip tests in a module in different situations:"
msgstr ""

#: ../../how-to/skipping.rst:201
msgid "Skip all tests in a module unconditionally:"
msgstr ""

#: ../../how-to/skipping.rst:207
msgid "Skip all tests in a module based on some condition:"
msgstr ""

#: ../../how-to/skipping.rst:213
msgid "Skip all tests in a module if some import is missing:"
msgstr ""

#: ../../how-to/skipping.rst:223
msgid "XFail: mark test functions as expected to fail"
msgstr ""

#: ../../how-to/skipping.rst:225
msgid "You can use the ``xfail`` marker to indicate that you expect a test to fail:"
msgstr ""

#: ../../how-to/skipping.rst:233
msgid "This test will run but no traceback will be reported when it fails. Instead, terminal reporting will list it in the \"expected to fail\" (``XFAIL``) or \"unexpectedly passing\" (``XPASS``) sections."
msgstr ""

#: ../../how-to/skipping.rst:237
msgid "Alternatively, you can also mark a test as ``XFAIL`` from within the test or its setup function imperatively:"
msgstr ""

#: ../../how-to/skipping.rst:254
msgid "These two examples illustrate situations where you don't want to check for a condition at the module level, which is when a condition would otherwise be evaluated for marks."
msgstr ""

#: ../../how-to/skipping.rst:257
msgid "This will make ``test_function`` ``XFAIL``. Note that no other code is executed after the :func:`pytest.xfail` call, differently from the marker. That's because it is implemented internally by raising a known exception."
msgstr ""

#: ../../how-to/skipping.rst:261
msgid "**Reference**: :ref:`pytest.mark.xfail ref`"
msgstr ""

#: ../../how-to/skipping.rst:265
msgid "``condition`` parameter"
msgstr ""

#: ../../how-to/skipping.rst:267
msgid "If a test is only expected to fail under a certain condition, you can pass that condition as the first parameter:"
msgstr ""

#: ../../how-to/skipping.rst:275
msgid "Note that you have to pass a reason as well (see the parameter description at :ref:`pytest.mark.xfail ref`)."
msgstr ""

#: ../../how-to/skipping.rst:279
msgid "``reason`` parameter"
msgstr ""

#: ../../how-to/skipping.rst:281
msgid "You can specify the motive of an expected failure with the ``reason`` parameter:"
msgstr ""

#: ../../how-to/skipping.rst:290
msgid "``raises`` parameter"
msgstr ""

#: ../../how-to/skipping.rst:292
msgid "If you want to be more specific as to why the test is failing, you can specify a single exception, or a tuple of exceptions, in the ``raises`` argument."
msgstr ""

#: ../../how-to/skipping.rst:300
msgid "Then the test will be reported as a regular failure if it fails with an exception not mentioned in ``raises``."
msgstr ""

#: ../../how-to/skipping.rst:304
msgid "``run`` parameter"
msgstr ""

#: ../../how-to/skipping.rst:306
msgid "If a test should be marked as xfail and reported as such but should not be even executed, use the ``run`` parameter as ``False``:"
msgstr ""

#: ../../how-to/skipping.rst:314
msgid "This is specially useful for xfailing tests that are crashing the interpreter and should be investigated later."
msgstr ""

#: ../../how-to/skipping.rst:320
msgid "``strict`` parameter"
msgstr ""

#: ../../how-to/skipping.rst:322
msgid "Both ``XFAIL`` and ``XPASS`` don't fail the test suite by default. You can change this by setting the ``strict`` keyword-only parameter to ``True``:"
msgstr ""

#: ../../how-to/skipping.rst:331
msgid "This will make ``XPASS`` (\"unexpectedly passing\") results from this test to fail the test suite."
msgstr ""

#: ../../how-to/skipping.rst:333
msgid "You can change the default value of the ``strict`` parameter using the ``xfail_strict`` ini option:"
msgstr ""

#: ../../how-to/skipping.rst:343
msgid "Ignoring xfail"
msgstr ""

#: ../../how-to/skipping.rst:345
msgid "By specifying on the commandline:"
msgstr ""

#: ../../how-to/skipping.rst:351
msgid "you can force the running and reporting of an ``xfail`` marked test as if it weren't marked at all. This also causes :func:`pytest.xfail` to produce no effect."
msgstr ""

#: ../../how-to/skipping.rst:355
msgid "Examples"
msgstr ""

#: ../../how-to/skipping.rst:357
msgid "Here is a simple test file with the several usages:"
msgstr ""

#: ../../how-to/skipping.rst:361
msgid "Running it with the report-on-xfail option gives this output:"
msgstr ""

#: ../../how-to/skipping.rst:395
msgid "Skip/xfail with parametrize"
msgstr ""

#: ../../how-to/skipping.rst:397
msgid "It is possible to apply markers like skip and xfail to individual test instances when using parametrize:"
msgstr ""

