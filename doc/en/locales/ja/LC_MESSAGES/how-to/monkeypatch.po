# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, holger krekel and pytest-dev team
# This file is distributed under the same license as the pytest package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pytest 0.1.dev16209\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-05 00:52+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../how-to/monkeypatch.rst:4
msgid "How to monkeypatch/mock modules and environments"
msgstr ""

#: ../../how-to/monkeypatch.rst:8
msgid "Sometimes tests need to invoke functionality which depends on global settings or which invokes code which cannot be easily tested such as network access.  The ``monkeypatch`` fixture helps you to safely set/delete an attribute, dictionary item or environment variable, or to modify ``sys.path`` for importing."
msgstr ""

#: ../../how-to/monkeypatch.rst:14
msgid "The ``monkeypatch`` fixture provides these helper methods for safely patching and mocking functionality in tests:"
msgstr ""

#: ../../how-to/monkeypatch.rst:17
msgid ":meth:`monkeypatch.setattr(obj, name, value, raising=True) <pytest.MonkeyPatch.setattr>`"
msgstr ""

#: ../../how-to/monkeypatch.rst:18
msgid ":meth:`monkeypatch.delattr(obj, name, raising=True) <pytest.MonkeyPatch.delattr>`"
msgstr ""

#: ../../how-to/monkeypatch.rst:19
msgid ":meth:`monkeypatch.setitem(mapping, name, value) <pytest.MonkeyPatch.setitem>`"
msgstr ""

#: ../../how-to/monkeypatch.rst:20
msgid ":meth:`monkeypatch.delitem(obj, name, raising=True) <pytest.MonkeyPatch.delitem>`"
msgstr ""

#: ../../how-to/monkeypatch.rst:21
msgid ":meth:`monkeypatch.setenv(name, value, prepend=None) <pytest.MonkeyPatch.setenv>`"
msgstr ""

#: ../../how-to/monkeypatch.rst:22
msgid ":meth:`monkeypatch.delenv(name, raising=True) <pytest.MonkeyPatch.delenv>`"
msgstr ""

#: ../../how-to/monkeypatch.rst:23
msgid ":meth:`monkeypatch.syspath_prepend(path) <pytest.MonkeyPatch.syspath_prepend>`"
msgstr ""

#: ../../how-to/monkeypatch.rst:24
msgid ":meth:`monkeypatch.chdir(path) <pytest.MonkeyPatch.chdir>`"
msgstr ""

#: ../../how-to/monkeypatch.rst:25
msgid ":meth:`monkeypatch.context() <pytest.MonkeyPatch.context>`"
msgstr ""

#: ../../how-to/monkeypatch.rst:28
msgid "All modifications will be undone after the requesting test function or fixture has finished. The ``raising`` parameter determines if a ``KeyError`` or ``AttributeError`` will be raised if the target of the set/deletion operation does not exist."
msgstr ""

#: ../../how-to/monkeypatch.rst:33
msgid "Consider the following scenarios:"
msgstr ""

#: ../../how-to/monkeypatch.rst:35
msgid "1. Modifying the behavior of a function or the property of a class for a test e.g. there is an API call or database connection you will not make for a test but you know what the expected output should be. Use :py:meth:`monkeypatch.setattr <MonkeyPatch.setattr>` to patch the function or property with your desired testing behavior. This can include your own functions. Use :py:meth:`monkeypatch.delattr <MonkeyPatch.delattr>` to remove the function or property for the test."
msgstr ""

#: ../../how-to/monkeypatch.rst:41
msgid "2. Modifying the values of dictionaries e.g. you have a global configuration that you want to modify for certain test cases. Use :py:meth:`monkeypatch.setitem <MonkeyPatch.setitem>` to patch the dictionary for the test. :py:meth:`monkeypatch.delitem <MonkeyPatch.delitem>` can be used to remove items."
msgstr ""

#: ../../how-to/monkeypatch.rst:45
msgid "3. Modifying environment variables for a test e.g. to test program behavior if an environment variable is missing, or to set multiple values to a known variable. :py:meth:`monkeypatch.setenv <MonkeyPatch.setenv>` and :py:meth:`monkeypatch.delenv <MonkeyPatch.delenv>` can be used for these patches."
msgstr ""

#: ../../how-to/monkeypatch.rst:50
msgid "4. Use ``monkeypatch.setenv(\"PATH\", value, prepend=os.pathsep)`` to modify ``$PATH``, and :py:meth:`monkeypatch.chdir <MonkeyPatch.chdir>` to change the context of the current working directory during a test."
msgstr ""

#: ../../how-to/monkeypatch.rst:54
msgid "5. Use :py:meth:`monkeypatch.syspath_prepend <MonkeyPatch.syspath_prepend>` to modify ``sys.path`` which will also call ``pkg_resources.fixup_namespace_packages`` and :py:func:`importlib.invalidate_caches`."
msgstr ""

#: ../../how-to/monkeypatch.rst:57
msgid "6. Use :py:meth:`monkeypatch.context <MonkeyPatch.context>` to apply patches only in a specific scope, which can help control teardown of complex fixtures or patches to the stdlib."
msgstr ""

#: ../../how-to/monkeypatch.rst:60
msgid "See the `monkeypatch blog post`_ for some introduction material and a discussion of its motivation."
msgstr ""

#: ../../how-to/monkeypatch.rst:66
msgid "Monkeypatching functions"
msgstr ""

#: ../../how-to/monkeypatch.rst:68
msgid "Consider a scenario where you are working with user directories. In the context of testing, you do not want your test to depend on the running user. ``monkeypatch`` can be used to patch functions dependent on the user to always return a specific value."
msgstr ""

#: ../../how-to/monkeypatch.rst:73
msgid "In this example, :py:meth:`monkeypatch.setattr <MonkeyPatch.setattr>` is used to patch ``Path.home`` so that the known testing path ``Path(\"/abc\")`` is always used when the test is run. This removes any dependency on the running user for testing purposes. :py:meth:`monkeypatch.setattr <MonkeyPatch.setattr>` must be called before the function which will use the patched function is called. After the test function finishes the ``Path.home`` modification will be undone."
msgstr ""

#: ../../how-to/monkeypatch.rst:107
msgid "Monkeypatching returned objects: building mock classes"
msgstr ""

#: ../../how-to/monkeypatch.rst:109
msgid ":py:meth:`monkeypatch.setattr <MonkeyPatch.setattr>` can be used in conjunction with classes to mock returned objects from functions instead of values. Imagine a simple function to take an API url and return the json response."
msgstr ""

#: ../../how-to/monkeypatch.rst:124
msgid "We need to mock ``r``, the returned response object for testing purposes. The mock of ``r`` needs a ``.json()`` method which returns a dictionary. This can be done in our test file by defining a class to represent ``r``."
msgstr ""

#: ../../how-to/monkeypatch.rst:162
msgid "``monkeypatch`` applies the mock for ``requests.get`` with our ``mock_get`` function. The ``mock_get`` function returns an instance of the ``MockResponse`` class, which has a ``json()`` method defined to return a known testing dictionary and does not require any outside API connection."
msgstr ""

#: ../../how-to/monkeypatch.rst:167
msgid "You can build the ``MockResponse`` class with the appropriate degree of complexity for the scenario you are testing. For instance, it could include an ``ok`` property that always returns ``True``, or return different values from the ``json()`` mocked method based on input strings."
msgstr ""

#: ../../how-to/monkeypatch.rst:172
msgid "This mock can be shared across tests using a ``fixture``:"
msgstr ""

#: ../../how-to/monkeypatch.rst:208
msgid "Furthermore, if the mock was designed to be applied to all tests, the ``fixture`` could be moved to a ``conftest.py`` file and use the with ``autouse=True`` option."
msgstr ""

#: ../../how-to/monkeypatch.rst:213
msgid "Global patch example: preventing \"requests\" from remote operations"
msgstr ""

#: ../../how-to/monkeypatch.rst:215
msgid "If you want to prevent the \"requests\" library from performing http requests in all your tests, you can do:"
msgstr ""

#: ../../how-to/monkeypatch.rst:229
msgid "This autouse fixture will be executed for each test function and it will delete the method ``request.session.Session.request`` so that any attempts within tests to create http requests will fail."
msgstr ""

#: ../../how-to/monkeypatch.rst:236
msgid "Be advised that it is not recommended to patch builtin functions such as ``open``, ``compile``, etc., because it might break pytest's internals. If that's unavoidable, passing ``--tb=native``, ``--assert=plain`` and ``--capture=no`` might help although there's no guarantee."
msgstr ""

#: ../../how-to/monkeypatch.rst:243
msgid "Mind that patching ``stdlib`` functions and some third-party libraries used by pytest might break pytest itself, therefore in those cases it is recommended to use :meth:`MonkeyPatch.context` to limit the patching to the block you want tested:"
msgstr ""

#: ../../how-to/monkeypatch.rst:257
msgid "See :issue:`3290` for details."
msgstr ""

#: ../../how-to/monkeypatch.rst:261
msgid "Monkeypatching environment variables"
msgstr ""

#: ../../how-to/monkeypatch.rst:263
msgid "If you are working with environment variables you often need to safely change the values or delete them from the system for testing purposes. ``monkeypatch`` provides a mechanism to do this using the ``setenv`` and ``delenv`` method. Our example code to test:"
msgstr ""

#: ../../how-to/monkeypatch.rst:283
msgid "There are two potential paths. First, the ``USER`` environment variable is set to a value. Second, the ``USER`` environment variable does not exist. Using ``monkeypatch`` both paths can be safely tested without impacting the running environment:"
msgstr ""

#: ../../how-to/monkeypatch.rst:306
msgid "This behavior can be moved into ``fixture`` structures and shared across tests:"
msgstr ""

#: ../../how-to/monkeypatch.rst:335
msgid "Monkeypatching dictionaries"
msgstr ""

#: ../../how-to/monkeypatch.rst:337
msgid ":py:meth:`monkeypatch.setitem <MonkeyPatch.setitem>` can be used to safely set the values of dictionaries to specific values during tests. Take this simplified connection string example:"
msgstr ""

#: ../../how-to/monkeypatch.rst:351
msgid "For testing purposes we can patch the ``DEFAULT_CONFIG`` dictionary to specific values."
msgstr ""

#: ../../how-to/monkeypatch.rst:373
msgid "You can use the :py:meth:`monkeypatch.delitem <MonkeyPatch.delitem>` to remove values."
msgstr ""

#: ../../how-to/monkeypatch.rst:394
msgid "The modularity of fixtures gives you the flexibility to define separate fixtures for each potential mock and reference them in the needed tests."
msgstr ""

#: ../../how-to/monkeypatch.rst:441
msgid "API Reference"
msgstr ""

#: ../../how-to/monkeypatch.rst:443
msgid "Consult the docs for the :class:`MonkeyPatch` class."
msgstr ""

